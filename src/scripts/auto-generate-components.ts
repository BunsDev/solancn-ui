#!/usr/bin/env node

/**
 * Script to automatically generate the components.ts file
 * This scans the docs directory and updates the static component list
 */

import fs from "fs";
import path from "path";

// Define the component type for generation
interface ComponentData {
	name: string;
	title: string;
	description: string;
	type: string;
	path: string;
	dependencies: string[];
	files?: {
		path: string;
		name: string;
		content: string;
		type: string;
	}[];
}

// Function to automatically generate components from docs directory
function generateComponentsFromDocs(basePath: string) {
	const componentsPath = path.join(basePath, "../app/components");
	const components: ComponentData[] = [];

	// Add the core tabs component manually since it's in a different location
	components.push({
		name: "tabs",
		title: "Tabs",
		description:
		"A minimalistic tab component designed with React and Tailwind CSS.",
		type: "registry:component",
		path: "../app/components/tabs",
		dependencies: [],
		files: [
			{
				path: "../app/components/tabs",
				name: "tabs",
				content: "",
				type: "registry:component",
			},
		],
	});

	try {
		// Read all directories in the components folder
		const componentsEntries = fs.readdirSync(componentsPath, {
			withFileTypes: true,
		});

		for (const entry of componentsEntries) {
			if (entry.isDirectory()) {
				const componentName = entry.name;

				// Skip certain directories that aren't components or already handled
				if (
					componentName === "installation" ||
					componentName === "hide-toc-example" ||
					componentName === "tabs"
				) {
					continue;
				}

				// Convert kebab-case to Title Case
				const title = componentName
					.split("-")
					.map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))
					.join(" ");

				// Generate description based on component name
				let description = `A minimalistic ${componentName.replace("-", " ")} component designed with React and Tailwind CSS.`;

				// Custom descriptions for specific components
				const customDescriptions: Record<string, string> = {
					amazongift:
						"A minimalistic Amazon gift card component designed with React and Tailwind CSS.",
					twostep:
						"A minimalistic two-step verification component designed with React and Tailwind CSS.",
					flipwords:
						"A minimalistic flip words animation component designed with React and Tailwind CSS.",
					pattern:
						"A collection of beautiful background patterns designed with React and Tailwind CSS.",
					accordion:
						"A minimalistic accordion component designed with React and Tailwind CSS.",
					"accordion-last":
						"A minimalistic accordion component with last item styling designed with React and Tailwind CSS.",
					dropdown:
						"A minimalistic dropdown component designed with React and Tailwind CSS.",
					dock: "A minimalistic dock component designed with React and Tailwind CSS.",
					fuzzy:
						"A minimalistic fuzzy search component designed with React and Tailwind CSS.",
					password:
						"A minimalistic password input component designed with React and Tailwind CSS.",
					prompt:
						"A minimalistic prompt component designed with React and Tailwind CSS.",
				};

				if (customDescriptions[componentName]) {
					description = customDescriptions[componentName];
				}

				components.push({
					name: componentName,
					title: title,
					description: description,
					type: "registry:component",
					path: `../app/components/${componentName}`,
					dependencies: [],
					files: [
						{
							path: `../app/components/${componentName}`,
							name: componentName,
							content: "",
							type: "registry:component",
						},
					],
				});
			}
		}
	} catch (error) {
		console.error("Error reading docs directory:", error);
		process.exit(1);
	}

	return components.sort((a, b) => a.name.localeCompare(b.name));
}

// Generate the components.ts file content
function generateComponentsFile(basePath: string) {
	const components = generateComponentsFromDocs(basePath);

	const fileContent = `import { RegistryItemSchema, RegistryType } from "./types";

type ComponentType = Omit<
  RegistryItemSchema,
  "$schema" | "files" | "type" | "author"
> &
  Partial<Pick<RegistryItemSchema, "type" | "author">> & {
    path: string;
    files?: {
      path: string;
      name: string;
      content: string;
      type: RegistryType;
    }[];
  };

// Static component list - this is auto-generated by the build script
export const components: ComponentType[] = [
${components
	.map(
		(component) => `  {
    name: "${component.name}",
    title: "${component.title}",
    description: "${component.description}",
    type: "${component.type}",
    path: "${component.path}",
    dependencies: [],
    files: [
      {
        path: "${component.path}",
        name: "${component.name}",
        content: "",
        type: "${component.type}",
      },
    ],
  }`,
	)
	.join(",\n")}
];
`;

	return fileContent;
}

// Main execution
console.log("üîÑ Auto-generating components.ts file...");

try {
	const newContent = generateComponentsFile(__dirname);
	const componentsFilePath = path.join(__dirname, "components.ts");

	fs.writeFileSync(componentsFilePath, newContent);

	console.log("‚úÖ components.ts file updated successfully!");
	console.log(`üìÅ Updated: ${componentsFilePath}`);
} catch (error) {
	console.error("‚ùå Error generating components.ts:", error);
	process.exit(1);
}
