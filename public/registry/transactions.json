{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transactions",
  "title": "Transactions",
  "description": "A minimalistic transactions component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "transactions.tsx",
      "content": "\"use client\";\n\nimport { ArrowUpDown, Filter, RefreshCw, Search } from \"lucide-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { mockTransactions } from \"./mock-data\";\nimport { TransactionDetail } from \"./transaction-detail\";\nimport { TransactionList } from \"./transaction-list\";\nimport type { Transaction } from \"./types\";\n\nexport default function TransactionsPage() {\n\treturn <Transactions />;\n}\n\nexport const Transactions = () => {\n\t// State for managing transactions and filters\n\tconst [transactions, setTransactions] = useState<Transaction[]>([]);\n\tconst [filteredTransactions, setFilteredTransactions] = useState<\n\t\tTransaction[]\n\t>([]);\n\tconst [activeTab, setActiveTab] = useState<string>(\"all\");\n\tconst [searchQuery, setSearchQuery] = useState<string>(\"\");\n\tconst [selectedType, setSelectedType] = useState<string>(\"all\");\n\tconst [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n\tconst [isLoading, setIsLoading] = useState<boolean>(true);\n\tconst [selectedTransaction, setSelectedTransaction] =\n\t\tuseState<Transaction | null>(null);\n\tconst [isRefreshing, setIsRefreshing] = useState<boolean>(false);\n\n\t// Fetch transactions (mock for now)\n\tuseEffect(() => {\n\t\tconst fetchTransactions = async () => {\n\t\t\tsetIsLoading(true);\n\t\t\ttry {\n\t\t\t\t// In a real implementation, this would fetch from Solana\n\t\t\t\t// For example: const txns = await connection.getSignaturesForAddress(publicKey)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetTransactions(mockTransactions);\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t}, 1000); // Simulate network delay\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Failed to fetch transactions:\", error);\n\t\t\t\tsetIsLoading(false);\n\t\t\t}\n\t\t};\n\n\t\tfetchTransactions();\n\t}, []);\n\n\t// Apply filters whenever dependencies change\n\tuseEffect(() => {\n\t\tlet filtered = [...transactions];\n\n\t\t// Filter by tab (status)\n\t\tif (activeTab !== \"all\") {\n\t\t\tfiltered = filtered.filter((tx) => tx.status.toLowerCase() === activeTab);\n\t\t}\n\n\t\t// Filter by transaction type\n\t\tif (selectedType !== \"all\") {\n\t\t\tfiltered = filtered.filter((tx) => tx.type === selectedType);\n\t\t}\n\n\t\t// Filter by search query\n\t\tif (searchQuery) {\n\t\t\tconst query = searchQuery.toLowerCase();\n\t\t\tfiltered = filtered.filter(\n\t\t\t\t(tx) =>\n\t\t\t\t\ttx.signature.toLowerCase().includes(query) ||\n\t\t\t\t\ttx.description.toLowerCase().includes(query),\n\t\t\t);\n\t\t}\n\n\t\t// Sort by date\n\t\tfiltered.sort((a, b) => {\n\t\t\tconst dateA = new Date(a.timestamp).getTime();\n\t\t\tconst dateB = new Date(b.timestamp).getTime();\n\t\t\treturn sortOrder === \"asc\" ? dateA - dateB : dateB - dateA;\n\t\t});\n\n\t\tsetFilteredTransactions(filtered);\n\t}, [transactions, activeTab, searchQuery, selectedType, sortOrder]);\n\n\t// Handle refreshing transactions\n\tconst handleRefresh = async () => {\n\t\tsetIsRefreshing(true);\n\t\t// In a real implementation, this would re-fetch from Solana\n\t\tsetTimeout(() => {\n\t\t\t// Simulate updated data by adding a new transaction\n\t\t\tconst refreshedTransactions = [...transactions];\n\t\t\tsetTransactions(refreshedTransactions);\n\t\t\tsetIsRefreshing(false);\n\t\t}, 1500);\n\t};\n\n\treturn (\n\t\t<div className=\"w-full max-w-7xl mx-auto p-4 sm:p-6 space-y-6\">\n\t\t\t<div className=\"flex flex-col space-y-2\">\n\t\t\t\t<h1 className=\"text-3xl font-bold\">Transactions</h1>\n\t\t\t\t<p className=\"text-gray-500 dark:text-gray-400\">\n\t\t\t\t\tView and manage your recent Solana transactions\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t{selectedTransaction ? (\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"flex items-center text-sm font-medium text-purple-600 hover:text-purple-800 mb-4\"\n\t\t\t\t\t\tonClick={() => setSelectedTransaction(null)}\n\t\t\t\t\t>\n\t\t\t\t\t\t‚Üê Back to transactions\n\t\t\t\t\t</button>\n\t\t\t\t\t<TransactionDetail\n\t\t\t\t\t\ttransaction={selectedTransaction}\n\t\t\t\t\t\tonClose={() => setSelectedTransaction(null)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<Tabs\n\t\t\t\t\t\tdefaultValue=\"all\"\n\t\t\t\t\t\tclassName=\"w-full\"\n\t\t\t\t\t\tonValueChange={setActiveTab}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n\t\t\t\t\t\t\t<TabsList className=\"bg-gray-100 dark:bg-gray-800\">\n\t\t\t\t\t\t\t\t<TabsTrigger value=\"all\">All</TabsTrigger>\n\t\t\t\t\t\t\t\t<TabsTrigger value=\"pending\">Pending</TabsTrigger>\n\t\t\t\t\t\t\t\t<TabsTrigger value=\"confirmed\">Confirmed</TabsTrigger>\n\t\t\t\t\t\t\t\t<TabsTrigger value=\"failed\">Failed</TabsTrigger>\n\t\t\t\t\t\t\t</TabsList>\n\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName={`p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 ${\n\t\t\t\t\t\t\t\t\t\tisRefreshing ? \"animate-spin text-purple-600\" : \"\"\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\tonClick={handleRefresh}\n\t\t\t\t\t\t\t\t\tdisabled={isRefreshing}\n\t\t\t\t\t\t\t\t\taria-label=\"Refresh transactions\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<RefreshCw className=\"w-5 h-5\" />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tsetSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\taria-label=\"Sort by date\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ArrowUpDown className=\"w-5 h-5\" />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Filter and search bar */}\n\t\t\t\t\t\t<div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n\t\t\t\t\t\t\t<div className=\"relative flex-grow\">\n\t\t\t\t\t\t\t\t<Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tplaceholder=\"Search signature or description\"\n\t\t\t\t\t\t\t\t\tclassName=\"pl-10\"\n\t\t\t\t\t\t\t\t\tvalue={searchQuery}\n\t\t\t\t\t\t\t\t\tonChange={(e) => setSearchQuery(e.target.value)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 min-w-[180px]\">\n\t\t\t\t\t\t\t\t<Filter className=\"w-4 h-4 text-gray-400\" />\n\t\t\t\t\t\t\t\t<Select value={selectedType} onValueChange={setSelectedType}>\n\t\t\t\t\t\t\t\t\t<SelectTrigger className=\"flex-grow\">\n\t\t\t\t\t\t\t\t\t\t<SelectValue placeholder=\"Filter by type\" />\n\t\t\t\t\t\t\t\t\t</SelectTrigger>\n\t\t\t\t\t\t\t\t\t<SelectContent>\n\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"all\">All Types</SelectItem>\n\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"transfer\">Transfer</SelectItem>\n\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"swap\">Swap</SelectItem>\n\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"stake\">Stake</SelectItem>\n\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"unstake\">Unstake</SelectItem>\n\t\t\t\t\t\t\t\t\t\t<SelectItem value=\"mint\">Mint</SelectItem>\n\t\t\t\t\t\t\t\t\t</SelectContent>\n\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<TabsContent value=\"all\" className=\"mt-0\">\n\t\t\t\t\t\t\t<TransactionList\n\t\t\t\t\t\t\t\ttransactions={filteredTransactions}\n\t\t\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t\t\t\tonTransactionSelect={setSelectedTransaction}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TabsContent>\n\n\t\t\t\t\t\t<TabsContent value=\"pending\" className=\"mt-0\">\n\t\t\t\t\t\t\t<TransactionList\n\t\t\t\t\t\t\t\ttransactions={filteredTransactions}\n\t\t\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t\t\t\tonTransactionSelect={setSelectedTransaction}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TabsContent>\n\n\t\t\t\t\t\t<TabsContent value=\"confirmed\" className=\"mt-0\">\n\t\t\t\t\t\t\t<TransactionList\n\t\t\t\t\t\t\t\ttransactions={filteredTransactions}\n\t\t\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t\t\t\tonTransactionSelect={setSelectedTransaction}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TabsContent>\n\n\t\t\t\t\t\t<TabsContent value=\"failed\" className=\"mt-0\">\n\t\t\t\t\t\t\t<TransactionList\n\t\t\t\t\t\t\t\ttransactions={filteredTransactions}\n\t\t\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t\t\t\tonTransactionSelect={setSelectedTransaction}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TabsContent>\n\t\t\t\t\t</Tabs>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n",
      "type": "registry:component"
    },
    {
      "path": "page.tsx",
      "content": "import type { Metadata } from \"next\";\nimport TransactionsPage from \"./transactions\";\n\nexport const metadata: Metadata = {\n\ttitle: \"Solana Transactions\",\n\tdescription: \"View and manage your Solana blockchain transactions\",\n};\n\nexport default function Page() {\n\treturn <TransactionsPage />;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "transaction-detail.tsx",
      "content": "\"use client\";\n\nimport {\n\tCheckCircle2,\n\tCircleCheck,\n\tCircleX,\n\tClock,\n\tCopy,\n\tExternalLink,\n\tX,\n} from \"lucide-react\";\nimport React from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport type { Transaction } from \"./types\";\nimport { formatAmount, formatDate, truncateAddress } from \"./utils\";\n\ninterface TransactionDetailProps {\n\ttransaction: Transaction;\n\tonClose: () => void;\n}\n\nexport const TransactionDetail: React.FC<TransactionDetailProps> = ({\n\ttransaction,\n\tonClose,\n}) => {\n\tconst { toast } = useToast();\n\tconst [copied, setCopied] = React.useState(false);\n\n\tconst handleCopySignature = () => {\n\t\tnavigator.clipboard.writeText(transaction.signature);\n\t\tsetCopied(true);\n\t\ttoast({\n\t\t\ttitle: \"Signature copied\",\n\t\t\tdescription: \"Transaction signature copied to clipboard\",\n\t\t});\n\t\tsetTimeout(() => setCopied(false), 2000);\n\t};\n\n\tconst getStatusIcon = () => {\n\t\tswitch (transaction.status) {\n\t\t\tcase \"confirmed\":\n\t\t\t\treturn <CircleCheck className=\"h-6 w-6 text-green-500\" />;\n\t\t\tcase \"pending\":\n\t\t\t\treturn <Clock className=\"h-6 w-6 text-yellow-500\" />;\n\t\t\tcase \"failed\":\n\t\t\t\treturn <CircleX className=\"h-6 w-6 text-red-500\" />;\n\t\t\tdefault:\n\t\t\t\treturn <Clock className=\"h-6 w-6 text-gray-500\" />;\n\t\t}\n\t};\n\n\tconst getStatusClass = () => {\n\t\tswitch (transaction.status) {\n\t\t\tcase \"confirmed\":\n\t\t\t\treturn \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n\t\t\tcase \"pending\":\n\t\t\t\treturn \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n\t\t\tcase \"failed\":\n\t\t\t\treturn \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n\t\t\tdefault:\n\t\t\t\treturn \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<Card className=\"border border-gray-200 dark:border-gray-800\">\n\t\t\t\t<CardHeader className=\"flex flex-row items-center justify-between\">\n\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t{getStatusIcon()}\n\t\t\t\t\t\t<CardTitle className=\"text-xl\">Transaction Details</CardTitle>\n\t\t\t\t\t\t<Badge variant=\"outline\" className={getStatusClass()}>\n\t\t\t\t\t\t\t{transaction.status.charAt(0).toUpperCase() +\n\t\t\t\t\t\t\t\ttransaction.status.slice(1)}\n\t\t\t\t\t\t</Badge>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n\t\t\t\t\t\t<X className=\"h-5 w-5\" />\n\t\t\t\t\t</Button>\n\t\t\t\t</CardHeader>\n\n\t\t\t\t<CardContent className=\"space-y-6\">\n\t\t\t\t\t{/* Transaction Overview */}\n\t\t\t\t\t<div className=\"space-y-4\">\n\t\t\t\t\t\t<h3 className=\"text-lg font-medium\">Overview</h3>\n\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n\t\t\t\t\t\t\t{/* Transaction Type */}\n\t\t\t\t\t\t\t<div className=\"space-y-1\">\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">Type</p>\n\t\t\t\t\t\t\t\t<p className=\"font-medium capitalize\">{transaction.type}</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/* Date & Time */}\n\t\t\t\t\t\t\t<div className=\"space-y-1\">\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\tDate & Time\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"font-medium\">\n\t\t\t\t\t\t\t\t\t{formatDate(transaction.timestamp, true)}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/* Amount (if applicable) */}\n\t\t\t\t\t\t\t{transaction.amount && (\n\t\t\t\t\t\t\t\t<div className=\"space-y-1\">\n\t\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\t\tAmount\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<p className=\"font-medium\">\n\t\t\t\t\t\t\t\t\t\t{formatAmount(transaction.amount)} {transaction.token}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{/* Fee */}\n\t\t\t\t\t\t\t<div className=\"space-y-1\">\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">Fee</p>\n\t\t\t\t\t\t\t\t<p className=\"font-medium\">\n\t\t\t\t\t\t\t\t\t{transaction.fee ? formatAmount(transaction.fee) : \"0.000005\"}{\" \"}\n\t\t\t\t\t\t\t\t\tSOL\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<Separator />\n\n\t\t\t\t\t{/* Transaction Technical Details */}\n\t\t\t\t\t<div className=\"space-y-4\">\n\t\t\t\t\t\t<h3 className=\"text-lg font-medium\">Technical Details</h3>\n\n\t\t\t\t\t\t<div className=\"space-y-3\">\n\t\t\t\t\t\t\t{/* Signature with copy button */}\n\t\t\t\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\tSignature\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t<code className=\"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono break-all\">\n\t\t\t\t\t\t\t\t\t\t{transaction.signature}\n\t\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\t\t\tclassName=\"h-8 w-8\"\n\t\t\t\t\t\t\t\t\t\tonClick={handleCopySignature}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{copied ? (\n\t\t\t\t\t\t\t\t\t\t\t<CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t<Copy className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/* Block Height */}\n\t\t\t\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\tBlock Height\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"font-medium\">\n\t\t\t\t\t\t\t\t\t{transaction.blockHeight || \"123,456,789\"}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/* Sender & Receiver (if available) */}\n\t\t\t\t\t\t\t{transaction.sender && (\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\t\tFrom\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<code className=\"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono break-all\">\n\t\t\t\t\t\t\t\t\t\t{transaction.sender}\n\t\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{transaction.recipient && (\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400\">To</p>\n\t\t\t\t\t\t\t\t\t<code className=\"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono break-all\">\n\t\t\t\t\t\t\t\t\t\t{transaction.recipient}\n\t\t\t\t\t\t\t\t\t</code>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Actions */}\n\t\t\t\t\t<div className=\"flex justify-end space-x-3 pt-4\">\n\t\t\t\t\t\t<Button variant=\"outline\" onClick={onClose}>\n\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"default\"\n\t\t\t\t\t\t\tclassName=\"bg-purple-600 hover:bg-purple-700 text-white\"\n\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\twindow.open(\n\t\t\t\t\t\t\t\t\t`https://explorer.solana.com/tx/${transaction.signature}`,\n\t\t\t\t\t\t\t\t\t\"_blank\",\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ExternalLink className=\"h-4 w-4 mr-2\" />\n\t\t\t\t\t\t\tView on Explorer\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n};\n",
      "type": "registry:component"
    },
    {
      "path": "transaction-item.tsx",
      "content": "\"use client\";\n\nimport {\n\tArrowDownLeft,\n\tArrowRight,\n\tArrowUpRight,\n\tCircleCheck,\n\tCircleX,\n\tClock,\n\tCoins,\n\tExternalLink,\n\tRefreshCw,\n\tShield,\n} from \"lucide-react\";\nimport type React from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipProvider,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport type { Transaction, TransactionStatus } from \"./types\";\nimport { formatAmount, formatDate, truncateAddress } from \"./utils\";\n\ninterface TransactionItemProps {\n\ttransaction: Transaction;\n\tonClick: () => void;\n}\n\n// Helper to determine icon by transaction type\nconst getTransactionIcon = (type: string) => {\n\tswitch (type.toLowerCase()) {\n\t\tcase \"transfer\":\n\t\t\treturn <ArrowRight className=\"h-5 w-5\" />;\n\t\tcase \"send\":\n\t\t\treturn <ArrowUpRight className=\"h-5 w-5\" />;\n\t\tcase \"receive\":\n\t\t\treturn <ArrowDownLeft className=\"h-5 w-5\" />;\n\t\tcase \"swap\":\n\t\t\treturn <RefreshCw className=\"h-5 w-5\" />;\n\t\tcase \"stake\":\n\t\t\treturn <Shield className=\"h-5 w-5\" />;\n\t\tcase \"unstake\":\n\t\t\treturn <Shield className=\"h-5 w-5\" />;\n\t\tcase \"mint\":\n\t\t\treturn <Coins className=\"h-5 w-5\" />;\n\t\tdefault:\n\t\t\treturn <ArrowRight className=\"h-5 w-5\" />;\n\t}\n};\n\n// Helper to determine status indicator and color\nconst getStatusIndicator = (status: TransactionStatus) => {\n\tswitch (status) {\n\t\tcase \"confirmed\":\n\t\t\treturn {\n\t\t\t\ticon: <CircleCheck className=\"h-4 w-4\" />,\n\t\t\t\tcolor:\n\t\t\t\t\t\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n\t\t\t\tlabel: \"Confirmed\",\n\t\t\t};\n\t\tcase \"pending\":\n\t\t\treturn {\n\t\t\t\ticon: <Clock className=\"h-4 w-4\" />,\n\t\t\t\tcolor:\n\t\t\t\t\t\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n\t\t\t\tlabel: \"Pending\",\n\t\t\t};\n\t\tcase \"failed\":\n\t\t\treturn {\n\t\t\t\ticon: <CircleX className=\"h-4 w-4\" />,\n\t\t\t\tcolor: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n\t\t\t\tlabel: \"Failed\",\n\t\t\t};\n\t\tdefault:\n\t\t\treturn {\n\t\t\t\ticon: <Clock className=\"h-4 w-4\" />,\n\t\t\t\tcolor: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\",\n\t\t\t\tlabel: status,\n\t\t\t};\n\t}\n};\n\nexport const TransactionItem: React.FC<TransactionItemProps> = ({\n\ttransaction,\n\tonClick,\n}) => {\n\tconst statusInfo = getStatusIndicator(transaction.status);\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"flex flex-col md:flex-row md:items-center justify-between p-4 rounded-lg border border-gray-200 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-900 transition-colors cursor-pointer\"\n\t\t\tonClick={onClick}\n\t\t>\n\t\t\t{/* Left side: Icon, type & description */}\n\t\t\t<div className=\"flex items-center space-x-4 mb-3 md:mb-0\">\n\t\t\t\t<div className=\"flex-shrink-0 h-10 w-10 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center text-purple-600 dark:text-purple-300\">\n\t\t\t\t\t{getTransactionIcon(transaction.type)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex-1 min-w-0\">\n\t\t\t\t\t<div className=\"flex items-center\">\n\t\t\t\t\t\t<p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mr-2 capitalize\">\n\t\t\t\t\t\t\t{transaction.type}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\tclassName={`${statusInfo.color} flex items-center gap-1 text-xs`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{statusInfo.icon}\n\t\t\t\t\t\t\t<span>{statusInfo.label}</span>\n\t\t\t\t\t\t</Badge>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n\t\t\t\t\t\t{transaction.description || truncateAddress(transaction.signature)}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* Right side: Amount, date & explorer link */}\n\t\t\t<div className=\"flex flex-col md:flex-row md:items-center gap-2 md:gap-6\">\n\t\t\t\t{/* Amount (conditionally shown) */}\n\t\t\t\t{transaction.amount && (\n\t\t\t\t\t<div className=\"flex items-center text-right\">\n\t\t\t\t\t\t<p\n\t\t\t\t\t\t\tclassName={`text-sm font-medium ${\n\t\t\t\t\t\t\t\ttransaction.type === \"receive\"\n\t\t\t\t\t\t\t\t\t? \"text-green-600 dark:text-green-400\"\n\t\t\t\t\t\t\t\t\t: \"text-gray-900 dark:text-gray-100\"\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{transaction.type === \"receive\" ? \"+\" : \"\"}\n\t\t\t\t\t\t\t{formatAmount(transaction.amount)} {transaction.token}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t{/* Date */}\n\t\t\t\t<div className=\"flex items-center text-right\">\n\t\t\t\t\t<p className=\"text-xs text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t{formatDate(transaction.timestamp)}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Explorer link */}\n\t\t\t\t<TooltipProvider>\n\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tclassName=\"h-8 w-8\"\n\t\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\twindow.open(\n\t\t\t\t\t\t\t\t\t\t`https://explorer.solana.com/tx/${transaction.signature}`,\n\t\t\t\t\t\t\t\t\t\t\"_blank\",\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ExternalLink className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t<TooltipContent>\n\t\t\t\t\t\t\t<p>View on Solana Explorer</p>\n\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t</TooltipProvider>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n",
      "type": "registry:component"
    },
    {
      "path": "transaction-list.tsx",
      "content": "\"use client\";\n\nimport { CircleMinus } from \"lucide-react\";\nimport type React from \"react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { TransactionItem } from \"./transaction-item\";\nimport type { Transaction } from \"./types\";\n\ninterface TransactionListProps {\n\ttransactions: Transaction[];\n\tisLoading: boolean;\n\tonTransactionSelect: (transaction: Transaction) => void;\n}\n\nexport const TransactionList: React.FC<TransactionListProps> = ({\n\ttransactions,\n\tisLoading,\n\tonTransactionSelect,\n}) => {\n\tif (isLoading) {\n\t\treturn (\n\t\t\t<div className=\"space-y-4\">\n\t\t\t\t{Array.from({ length: 5 }).map((_, i) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tclassName=\"flex items-center space-x-4 p-4 rounded-lg border border-gray-200 dark:border-gray-800\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Skeleton className=\"h-12 w-12 rounded-full\" />\n\t\t\t\t\t\t<div className=\"space-y-2 flex-1\">\n\t\t\t\t\t\t\t<Skeleton className=\"h-4 w-3/4\" />\n\t\t\t\t\t\t\t<Skeleton className=\"h-4 w-1/2\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Skeleton className=\"h-4 w-24\" />\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif (transactions.length === 0) {\n\t\treturn (\n\t\t\t<div className=\"flex flex-col items-center justify-center p-8 text-center border border-dashed rounded-lg border-gray-300 dark:border-gray-700\">\n\t\t\t\t<CircleMinus className=\"h-10 w-10 text-gray-400 mb-3\" />\n\t\t\t\t<h3 className=\"font-medium text-gray-900 dark:text-gray-100\">\n\t\t\t\t\tNo transactions found\n\t\t\t\t</h3>\n\t\t\t\t<p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n\t\t\t\t\tThere are no transactions matching your filters.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className=\"space-y-4\">\n\t\t\t{transactions.map((transaction) => (\n\t\t\t\t<TransactionItem\n\t\t\t\t\tkey={transaction.id}\n\t\t\t\t\ttransaction={transaction}\n\t\t\t\t\tonClick={() => onTransactionSelect(transaction)}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n",
      "type": "registry:component"
    }
  ]
}