{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "transactions",
  "title": "Transactions",
  "description": "A minimalistic transactions component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "transactions.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from \"@/components/ui/select\";\nimport {\n    Search,\n    Filter,\n    ArrowUpDown,\n    RefreshCw,\n} from \"lucide-react\";\nimport { TransactionList } from \"./transaction-list\";\nimport { TransactionDetail } from \"./transaction-detail\";\nimport { Transaction } from \"./types\";\nimport { mockTransactions } from \"./mock-data\";\n\nexport default function TransactionsPage() {\n    return <Transactions />;\n}\n\nexport const Transactions = () => {\n    // State for managing transactions and filters\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\n    const [filteredTransactions, setFilteredTransactions] = useState<Transaction[]>([]);\n    const [activeTab, setActiveTab] = useState<string>(\"all\");\n    const [searchQuery, setSearchQuery] = useState<string>(\"\");\n    const [selectedType, setSelectedType] = useState<string>(\"all\");\n    const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n    const [isRefreshing, setIsRefreshing] = useState<boolean>(false);\n\n    // Fetch transactions (mock for now)\n    useEffect(() => {\n        const fetchTransactions = async () => {\n            setIsLoading(true);\n            try {\n                // In a real implementation, this would fetch from Solana\n                // For example: const txns = await connection.getSignaturesForAddress(publicKey)\n                setTimeout(() => {\n                    setTransactions(mockTransactions);\n                    setIsLoading(false);\n                }, 1000); // Simulate network delay\n            } catch (error) {\n                console.error(\"Failed to fetch transactions:\", error);\n                setIsLoading(false);\n            }\n        };\n\n        fetchTransactions();\n    }, []);\n\n    // Apply filters whenever dependencies change\n    useEffect(() => {\n        let filtered = [...transactions];\n\n        // Filter by tab (status)\n        if (activeTab !== \"all\") {\n            filtered = filtered.filter(tx => tx.status.toLowerCase() === activeTab);\n        }\n\n        // Filter by transaction type\n        if (selectedType !== \"all\") {\n            filtered = filtered.filter(tx => tx.type === selectedType);\n        }\n\n        // Filter by search query\n        if (searchQuery) {\n            const query = searchQuery.toLowerCase();\n            filtered = filtered.filter(\n                tx =>\n                    tx.signature.toLowerCase().includes(query) ||\n                    tx.description.toLowerCase().includes(query)\n            );\n        }\n\n        // Sort by date\n        filtered.sort((a, b) => {\n            const dateA = new Date(a.timestamp).getTime();\n            const dateB = new Date(b.timestamp).getTime();\n            return sortOrder === \"asc\" ? dateA - dateB : dateB - dateA;\n        });\n\n        setFilteredTransactions(filtered);\n    }, [transactions, activeTab, searchQuery, selectedType, sortOrder]);\n\n    // Handle refreshing transactions\n    const handleRefresh = async () => {\n        setIsRefreshing(true);\n        // In a real implementation, this would re-fetch from Solana\n        setTimeout(() => {\n            // Simulate updated data by adding a new transaction\n            const refreshedTransactions = [...transactions];\n            setTransactions(refreshedTransactions);\n            setIsRefreshing(false);\n        }, 1500);\n    };\n\n    return (\n        <div className=\"w-full max-w-7xl mx-auto p-4 sm:p-6 space-y-6\">\n            <div className=\"flex flex-col space-y-2\">\n                <h1 className=\"text-3xl font-bold\">Transactions</h1>\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                    View and manage your recent Solana transactions\n                </p>\n            </div>\n\n            {selectedTransaction ? (\n                <div>\n                    <button\n                        className=\"flex items-center text-sm font-medium text-purple-600 hover:text-purple-800 mb-4\"\n                        onClick={() => setSelectedTransaction(null)}\n                    >\n                        ‚Üê Back to transactions\n                    </button>\n                    <TransactionDetail\n                        transaction={selectedTransaction}\n                        onClose={() => setSelectedTransaction(null)}\n                    />\n                </div>\n            ) : (\n                <>\n                    <Tabs defaultValue=\"all\" className=\"w-full\" onValueChange={setActiveTab}>\n                        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n                            <TabsList className=\"bg-gray-100 dark:bg-gray-800\">\n                                <TabsTrigger value=\"all\">All</TabsTrigger>\n                                <TabsTrigger value=\"pending\">Pending</TabsTrigger>\n                                <TabsTrigger value=\"confirmed\">Confirmed</TabsTrigger>\n                                <TabsTrigger value=\"failed\">Failed</TabsTrigger>\n                            </TabsList>\n\n                            <div className=\"flex items-center gap-2\">\n                                <button\n                                    className={`p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 ${isRefreshing ? \"animate-spin text-purple-600\" : \"\"\n                                        }`}\n                                    onClick={handleRefresh}\n                                    disabled={isRefreshing}\n                                    aria-label=\"Refresh transactions\"\n                                >\n                                    <RefreshCw className=\"w-5 h-5\" />\n                                </button>\n                                <button\n                                    className=\"p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800\"\n                                    onClick={() => setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")}\n                                    aria-label=\"Sort by date\"\n                                >\n                                    <ArrowUpDown className=\"w-5 h-5\" />\n                                </button>\n                            </div>\n                        </div>\n\n                        {/* Filter and search bar */}\n                        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n                            <div className=\"relative flex-grow\">\n                                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                                <Input\n                                    placeholder=\"Search signature or description\"\n                                    className=\"pl-10\"\n                                    value={searchQuery}\n                                    onChange={(e) => setSearchQuery(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"flex items-center gap-2 min-w-[180px]\">\n                                <Filter className=\"w-4 h-4 text-gray-400\" />\n                                <Select value={selectedType} onValueChange={setSelectedType}>\n                                    <SelectTrigger className=\"flex-grow\">\n                                        <SelectValue placeholder=\"Filter by type\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"all\">All Types</SelectItem>\n                                        <SelectItem value=\"transfer\">Transfer</SelectItem>\n                                        <SelectItem value=\"swap\">Swap</SelectItem>\n                                        <SelectItem value=\"stake\">Stake</SelectItem>\n                                        <SelectItem value=\"unstake\">Unstake</SelectItem>\n                                        <SelectItem value=\"mint\">Mint</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                            </div>\n                        </div>\n\n                        <TabsContent value=\"all\" className=\"mt-0\">\n                            <TransactionList\n                                transactions={filteredTransactions}\n                                isLoading={isLoading}\n                                onTransactionSelect={setSelectedTransaction}\n                            />\n                        </TabsContent>\n\n                        <TabsContent value=\"pending\" className=\"mt-0\">\n                            <TransactionList\n                                transactions={filteredTransactions}\n                                isLoading={isLoading}\n                                onTransactionSelect={setSelectedTransaction}\n                            />\n                        </TabsContent>\n\n                        <TabsContent value=\"confirmed\" className=\"mt-0\">\n                            <TransactionList\n                                transactions={filteredTransactions}\n                                isLoading={isLoading}\n                                onTransactionSelect={setSelectedTransaction}\n                            />\n                        </TabsContent>\n\n                        <TabsContent value=\"failed\" className=\"mt-0\">\n                            <TransactionList\n                                transactions={filteredTransactions}\n                                isLoading={isLoading}\n                                onTransactionSelect={setSelectedTransaction}\n                            />\n                        </TabsContent>\n                    </Tabs>\n                </>\n            )}\n        </div>\n    );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "page.tsx",
      "content": "import { Metadata } from \"next\";\nimport TransactionsPage from \"./transactions\";\n\nexport const metadata: Metadata = {\n  title: \"Solana Transactions\",\n  description: \"View and manage your Solana blockchain transactions\",\n};\n\nexport default function Page() {\n  return <TransactionsPage />;\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "transaction-detail.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { Transaction } from \"./types\";\nimport { formatDate, formatAmount, truncateAddress } from \"./utils\";\nimport { \n  CircleCheck, \n  CircleX, \n  Clock, \n  ExternalLink, \n  Copy, \n  CheckCircle2,\n  X\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface TransactionDetailProps {\n  transaction: Transaction;\n  onClose: () => void;\n}\n\nexport const TransactionDetail: React.FC<TransactionDetailProps> = ({ \n  transaction,\n  onClose \n}) => {\n  const { toast } = useToast();\n  const [copied, setCopied] = React.useState(false);\n\n  const handleCopySignature = () => {\n    navigator.clipboard.writeText(transaction.signature);\n    setCopied(true);\n    toast({\n      title: \"Signature copied\",\n      description: \"Transaction signature copied to clipboard\",\n    });\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const getStatusIcon = () => {\n    switch (transaction.status) {\n      case \"confirmed\":\n        return <CircleCheck className=\"h-6 w-6 text-green-500\" />;\n      case \"pending\":\n        return <Clock className=\"h-6 w-6 text-yellow-500\" />;\n      case \"failed\":\n        return <CircleX className=\"h-6 w-6 text-red-500\" />;\n      default:\n        return <Clock className=\"h-6 w-6 text-gray-500\" />;\n    }\n  };\n\n  const getStatusClass = () => {\n    switch (transaction.status) {\n      case \"confirmed\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"failed\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      <Card className=\"border border-gray-200 dark:border-gray-800\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            {getStatusIcon()}\n            <CardTitle className=\"text-xl\">Transaction Details</CardTitle>\n            <Badge variant=\"outline\" className={getStatusClass()}>\n              {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}\n            </Badge>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* Transaction Overview */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Overview</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Transaction Type */}\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Type</p>\n                <p className=\"font-medium capitalize\">{transaction.type}</p>\n              </div>\n\n              {/* Date & Time */}\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Date & Time</p>\n                <p className=\"font-medium\">{formatDate(transaction.timestamp, true)}</p>\n              </div>\n\n              {/* Amount (if applicable) */}\n              {transaction.amount && (\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">Amount</p>\n                  <p className=\"font-medium\">\n                    {formatAmount(transaction.amount)} {transaction.token}\n                  </p>\n                </div>\n              )}\n\n              {/* Fee */}\n              <div className=\"space-y-1\">\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Fee</p>\n                <p className=\"font-medium\">{transaction.fee ? formatAmount(transaction.fee) : \"0.000005\"} SOL</p>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Transaction Technical Details */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium\">Technical Details</h3>\n            \n            <div className=\"space-y-3\">\n              {/* Signature with copy button */}\n              <div className=\"flex flex-col space-y-1\">\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Signature</p>\n                <div className=\"flex items-center gap-2\">\n                  <code className=\"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono break-all\">\n                    {transaction.signature}\n                  </code>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"h-8 w-8\"\n                    onClick={handleCopySignature}\n                  >\n                    {copied ? \n                      <CheckCircle2 className=\"h-4 w-4 text-green-500\" /> : \n                      <Copy className=\"h-4 w-4\" />\n                    }\n                  </Button>\n                </div>\n              </div>\n\n              {/* Block Height */}\n              <div className=\"flex flex-col space-y-1\">\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">Block Height</p>\n                <p className=\"font-medium\">{transaction.blockHeight || \"123,456,789\"}</p>\n              </div>\n\n              {/* Sender & Receiver (if available) */}\n              {transaction.sender && (\n                <div className=\"flex flex-col space-y-1\">\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">From</p>\n                  <code className=\"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono break-all\">\n                    {transaction.sender}\n                  </code>\n                </div>\n              )}\n\n              {transaction.recipient && (\n                <div className=\"flex flex-col space-y-1\">\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">To</p>\n                  <code className=\"bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono break-all\">\n                    {transaction.recipient}\n                  </code>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={onClose}>Close</Button>\n            <Button \n              variant=\"default\"\n              className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n              onClick={() => window.open(`https://explorer.solana.com/tx/${transaction.signature}`, '_blank')}\n            >\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\n              View on Explorer\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "transaction-item.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { Transaction, TransactionStatus } from \"./types\";\nimport { formatDate, formatAmount, truncateAddress } from \"./utils\";\nimport { \n  ArrowRight, \n  CircleCheck, \n  CircleX, \n  Clock, \n  ExternalLink,\n  ArrowUpRight,\n  ArrowDownLeft,\n  RefreshCw,\n  Shield,\n  Coins,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface TransactionItemProps {\n  transaction: Transaction;\n  onClick: () => void;\n}\n\n// Helper to determine icon by transaction type\nconst getTransactionIcon = (type: string) => {\n  switch (type.toLowerCase()) {\n    case \"transfer\":\n      return <ArrowRight className=\"h-5 w-5\" />;\n    case \"send\":\n      return <ArrowUpRight className=\"h-5 w-5\" />;\n    case \"receive\":\n      return <ArrowDownLeft className=\"h-5 w-5\" />;\n    case \"swap\":\n      return <RefreshCw className=\"h-5 w-5\" />;\n    case \"stake\":\n      return <Shield className=\"h-5 w-5\" />;\n    case \"unstake\":\n      return <Shield className=\"h-5 w-5\" />;\n    case \"mint\":\n      return <Coins className=\"h-5 w-5\" />;\n    default:\n      return <ArrowRight className=\"h-5 w-5\" />;\n  }\n};\n\n// Helper to determine status indicator and color\nconst getStatusIndicator = (status: TransactionStatus) => {\n  switch (status) {\n    case \"confirmed\":\n      return {\n        icon: <CircleCheck className=\"h-4 w-4\" />,\n        color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n        label: \"Confirmed\"\n      };\n    case \"pending\":\n      return {\n        icon: <Clock className=\"h-4 w-4\" />,\n        color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n        label: \"Pending\"\n      };\n    case \"failed\":\n      return {\n        icon: <CircleX className=\"h-4 w-4\" />,\n        color: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n        label: \"Failed\"\n      };\n    default:\n      return {\n        icon: <Clock className=\"h-4 w-4\" />,\n        color: \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\",\n        label: status\n      };\n  }\n};\n\nexport const TransactionItem: React.FC<TransactionItemProps> = ({ transaction, onClick }) => {\n  const statusInfo = getStatusIndicator(transaction.status);\n\n  return (\n    <div \n      className=\"flex flex-col md:flex-row md:items-center justify-between p-4 rounded-lg border border-gray-200 dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-900 transition-colors cursor-pointer\"\n      onClick={onClick}\n    >\n      {/* Left side: Icon, type & description */}\n      <div className=\"flex items-center space-x-4 mb-3 md:mb-0\">\n        <div className=\"flex-shrink-0 h-10 w-10 rounded-full bg-purple-100 dark:bg-purple-900 flex items-center justify-center text-purple-600 dark:text-purple-300\">\n          {getTransactionIcon(transaction.type)}\n        </div>\n\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center\">\n            <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 mr-2 capitalize\">\n              {transaction.type}\n            </p>\n            <Badge variant=\"outline\" className={`${statusInfo.color} flex items-center gap-1 text-xs`}>\n              {statusInfo.icon}\n              <span>{statusInfo.label}</span>\n            </Badge>\n          </div>\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n            {transaction.description || truncateAddress(transaction.signature)}\n          </p>\n        </div>\n      </div>\n\n      {/* Right side: Amount, date & explorer link */}\n      <div className=\"flex flex-col md:flex-row md:items-center gap-2 md:gap-6\">\n        {/* Amount (conditionally shown) */}\n        {transaction.amount && (\n          <div className=\"flex items-center text-right\">\n            <p className={`text-sm font-medium ${\n              transaction.type === \"receive\" \n                ? \"text-green-600 dark:text-green-400\"\n                : \"text-gray-900 dark:text-gray-100\"\n            }`}>\n              {transaction.type === \"receive\" ? \"+\" : \"\"}\n              {formatAmount(transaction.amount)} {transaction.token}\n            </p>\n          </div>\n        )}\n        \n        {/* Date */}\n        <div className=\"flex items-center text-right\">\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n            {formatDate(transaction.timestamp)}\n          </p>\n        </div>\n\n        {/* Explorer link */}\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"h-8 w-8\" \n                onClick={(e) => {\n                  e.stopPropagation();\n                  window.open(`https://explorer.solana.com/tx/${transaction.signature}`, '_blank');\n                }}\n              >\n                <ExternalLink className=\"h-4 w-4\" />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>View on Solana Explorer</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "transaction-list.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { TransactionItem } from \"./transaction-item\";\nimport { Transaction } from \"./types\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { CircleMinus } from \"lucide-react\";\n\ninterface TransactionListProps {\n  transactions: Transaction[];\n  isLoading: boolean;\n  onTransactionSelect: (transaction: Transaction) => void;\n}\n\nexport const TransactionList: React.FC<TransactionListProps> = ({ \n  transactions, \n  isLoading,\n  onTransactionSelect\n}) => {\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div \n            key={i} \n            className=\"flex items-center space-x-4 p-4 rounded-lg border border-gray-200 dark:border-gray-800\"\n          >\n            <Skeleton className=\"h-12 w-12 rounded-full\" />\n            <div className=\"space-y-2 flex-1\">\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-4 w-1/2\" />\n            </div>\n            <Skeleton className=\"h-4 w-24\" />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (transactions.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-8 text-center border border-dashed rounded-lg border-gray-300 dark:border-gray-700\">\n        <CircleMinus className=\"h-10 w-10 text-gray-400 mb-3\" />\n        <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">No transactions found</h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n          There are no transactions matching your filters.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {transactions.map((transaction) => (\n        <TransactionItem\n          key={transaction.id}\n          transaction={transaction}\n          onClick={() => onTransactionSelect(transaction)}\n        />\n      ))}\n    </div>\n  );\n};\n",
      "type": "registry:ui"
    }
  ]
}