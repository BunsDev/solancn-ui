{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "network",
  "title": "Network",
  "description": "A minimalistic network component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:component",
  "dependencies": [],
  "files": [
    {
      "path": "network.tsx",
      "content": "\"use client\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// Type definitions\ninterface Avatar {\n\tid: number;\n\tname: string;\n\timage: string;\n\tring: \"outer\" | \"inner\";\n}\n\ninterface Position {\n\tcx: number;\n\tcy: number;\n}\n\ninterface Connection {\n\tfrom: number | \"center\";\n\tto: number | \"center\";\n\tcolor: string;\n}\n\ninterface AvatarPositions {\n\t[key: string]: Position;\n}\n\n// Main React component for the improved network visualization\nfunction NetworkVisualization() {\n\t// State to track container dimensions\n\tconst [containerSize, setContainerSize] = useState({\n\t\twidth: 700,\n\t\theight: 700,\n\t});\n\t// Removed unused isMobile state\n\n\t// Responsive dimensions based on screen size\n\tconst dimensions = useMemo(() => {\n\t\tconst baseSize = Math.min(containerSize.width, containerSize.height);\n\t\tconst scale = baseSize / 700; // Scale factor based on original 700px design\n\n\t\treturn {\n\t\t\tcontainerSize: baseSize,\n\t\t\touterRadius: Math.floor(290 * scale),\n\t\t\tinnerRadius: Math.floor(180 * scale),\n\t\t\tcenterImageSize: Math.floor(160 * scale), // w-40 = 160px\n\t\t\touterAvatarSize: Math.floor(80 * scale), // w-20 = 80px\n\t\t\tinnerAvatarSize: Math.floor(72 * scale), // w-18 = 72px\n\t\t\touterImageSize: Math.floor(64 * scale), // w-16 = 64px\n\t\t\tinnerImageSize: Math.floor(56 * scale), // w-14 = 56px\n\t\t\tstrokeWidth: Math.max(1, Math.floor(3 * scale)),\n\t\t\ttooltipTextSize: scale < 0.6 ? \"text-xs\" : \"text-sm\",\n\t\t\tcenterX: baseSize / 2,\n\t\t\tcenterY: baseSize / 2,\n\t\t};\n\t}, [containerSize]);\n\n\t// Effect to handle responsive sizing\n\tuseEffect(() => {\n\t\tconst updateSize = () => {\n\t\t\tconst width = window.innerWidth;\n\t\t\tconst height = window.innerHeight;\n\t\t\t// Removed unused isMobile logic\n\n\t\t\t// Calculate available space (accounting for padding and margins)\n\t\t\tconst maxWidth = Math.min(width - 32, 700); // 32px for padding\n\t\t\tconst maxHeight = Math.min(height - 32, 700);\n\t\t\tconst size = Math.min(maxWidth, maxHeight);\n\n\t\t\tsetContainerSize({ width: size, height: size });\n\t\t};\n\n\t\tupdateSize();\n\t\twindow.addEventListener(\"resize\", updateSize);\n\t\treturn () => window.removeEventListener(\"resize\", updateSize);\n\t}, []);\n\n\t// Avatar data array with diverse images. Positions will be calculated dynamically.\n\tconst avatars: Avatar[] = useMemo(() => {\n\t\t// New list of image links for avatars\n\t\tconst newImageLinks = [\n\t\t\t\"https://ui.solancn.com/buns.png\",\n\t\t\t\"https://i.pinimg.com/736x/8c/6d/db/8c6ddb5fe6600fcc4b183cb2ee228eb7.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/6f/a3/6a/6fa36aa2c367da06b2a4c8ae1cf9ee02.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/c2/4e/27/c24e271f2f992fd7e62e8c1e8d9b3e2f.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/81/d6/b1/81d6b158728f5fc97ca6e0a025fefee0.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/9f/46/74/9f4674ca9c17330ab419c1b2f5951d9a.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/57/3c/80/573c80967c9429d0ed0ce32701f85b70.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/b0/c4/21/b0c421e77cf563962026ade82c90dd5b.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/ce/31/42/ce3142d7a968fff3aecd0100572a5e8b.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/79/63/a5/7963a5246188d408b8f28961a0cf2b90.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/8e/c1/f8/8ec1f80db272047cedf4c20263114387.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/08/a2/41/08a2413b771b729a9f9df20fa97be52a.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/b0/7b/cc/b07bcc19e5d06dfb888c3263724b8baa.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/12/ec/d9/12ecd918607b1ccb9d46772435bb592f.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/e2/f5/bc/e2f5bc45bd9d07946c9453cfb48747ea.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/50/47/d2/5047d259f0d8b3d652b7d3dfa3479139.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/bb/87/18/bb87180897cb4cb694cd692966a0ab15.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/fb/c3/03/fbc30308d8f36a5566cbf0a535c14322.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/de/11/d2/de11d2f9df4295493625189e9cb829ce.jpg\",\n\t\t];\n\n\t\treturn [\n\t\t\t{ id: 1, name: \"Val Alexander\", image: newImageLinks[0], ring: \"outer\" },\n\t\t\t{ id: 2, name: \"Maya\", image: newImageLinks[1], ring: \"outer\" },\n\t\t\t{ id: 3, name: \"Jordan\", image: newImageLinks[2], ring: \"outer\" },\n\t\t\t{ id: 4, name: \"Zara\", image: newImageLinks[3], ring: \"outer\" },\n\t\t\t{ id: 5, name: \"Sam\", image: newImageLinks[4], ring: \"outer\" },\n\t\t\t{ id: 6, name: \"Riley\", image: newImageLinks[5], ring: \"outer\" },\n\t\t\t{ id: 7, name: \"Casey\", image: newImageLinks[6], ring: \"outer\" },\n\t\t\t{ id: 8, name: \"Avery\", image: newImageLinks[7], ring: \"outer\" },\n\t\t\t{ id: 9, name: \"Morgan\", image: newImageLinks[8], ring: \"inner\" },\n\t\t\t{ id: 10, name: \"Quinn\", image: newImageLinks[9], ring: \"inner\" },\n\t\t\t{ id: 11, name: \"Sage\", image: newImageLinks[10], ring: \"inner\" },\n\t\t\t{ id: 12, name: \"River\", image: newImageLinks[11], ring: \"inner\" },\n\t\t\t{ id: 13, name: \"Alex\", image: newImageLinks[12], ring: \"outer\" },\n\t\t\t{ id: 14, name: \"Jamie\", image: newImageLinks[13], ring: \"outer\" },\n\t\t\t{ id: 15, name: \"Chris\", image: newImageLinks[14], ring: \"inner\" },\n\t\t\t{ id: 16, name: \"Pat\", image: newImageLinks[15], ring: \"outer\" },\n\t\t\t{ id: 17, name: \"Drew\", image: newImageLinks[16], ring: \"inner\" },\n\t\t\t{ id: 18, name: \"Lee\", image: newImageLinks[17], ring: \"outer\" },\n\t\t\t// Added more avatars for increased density and better distribution\n\t\t\t// Using existing image links for additional avatars, cycling if needed\n\t\t\t{\n\t\t\t\tid: 19,\n\t\t\t\tname: \"Taylor\",\n\t\t\t\timage: newImageLinks[18 % newImageLinks.length],\n\t\t\t\tring: \"outer\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 20,\n\t\t\t\tname: \"Jesse\",\n\t\t\t\timage: newImageLinks[1 % newImageLinks.length],\n\t\t\t\tring: \"outer\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 21,\n\t\t\t\tname: \"Dakota\",\n\t\t\t\timage: newImageLinks[2 % newImageLinks.length],\n\t\t\t\tring: \"inner\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 22,\n\t\t\t\tname: \"Blair\",\n\t\t\t\timage: newImageLinks[3 % newImageLinks.length],\n\t\t\t\tring: \"inner\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 23,\n\t\t\t\tname: \"Jordan S.\",\n\t\t\t\timage: newImageLinks[4 % newImageLinks.length],\n\t\t\t\tring: \"outer\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 24,\n\t\t\t\tname: \"Casey M.\",\n\t\t\t\timage: newImageLinks[5 % newImageLinks.length],\n\t\t\t\tring: \"inner\",\n\t\t\t},\n\t\t];\n\t}, []);\n\n\t// Separate avatars into inner and outer rings for distinct positioning\n\tconst outerRingAvatars = avatars.filter((a) => a.ring === \"outer\");\n\tconst innerRingAvatars = avatars.filter((a) => a.ring === \"inner\");\n\n\t// State to hold the active connections\n\tconst [activeConnections, setActiveConnections] = useState<Connection[]>([]);\n\n\t// Pre-calculate all avatar positions and store them in a map for easy lookup\n\tconst allAvatarPositions: AvatarPositions = useMemo(() => {\n\t\t// Function to calculate the absolute center position of an avatar\n\t\t// relative to the top-left of the container.\n\t\tconst getAvatarAbsolutePosition = (\n\t\t\tindex: number,\n\t\t\ttotal: number,\n\t\t\tradius: number,\n\t\t\tstartAngleOffset: number = 0,\n\t\t): Position => {\n\t\t\tconst angle = startAngleOffset + (index / total) * 2 * Math.PI; // Angle in radians, with offset\n\t\t\tconst x = radius * Math.cos(angle);\n\t\t\tconst y = radius * Math.sin(angle);\n\t\t\t// Add center coordinates to center the coordinates within the container\n\t\t\treturn { cx: dimensions.centerX + x, cy: dimensions.centerY + y };\n\t\t};\n\n\t\tconst positions: AvatarPositions = {};\n\t\touterRingAvatars.forEach((avatar, index) => {\n\t\t\tpositions[avatar.id] = getAvatarAbsolutePosition(\n\t\t\t\tindex,\n\t\t\t\touterRingAvatars.length,\n\t\t\t\tdimensions.outerRadius,\n\t\t\t\tMath.PI / 2,\n\t\t\t);\n\t\t});\n\t\tinnerRingAvatars.forEach((avatar, index) => {\n\t\t\tpositions[avatar.id] = getAvatarAbsolutePosition(\n\t\t\t\tindex,\n\t\t\t\tinnerRingAvatars.length,\n\t\t\t\tdimensions.innerRadius,\n\t\t\t\tMath.PI / 3,\n\t\t\t);\n\t\t});\n\t\t// Add the center image's position\n\t\tpositions[\"center\"] = {\n\t\t\tcx: dimensions.centerX,\n\t\t\tcy: dimensions.centerY,\n\t\t} as Position;\n\t\treturn positions;\n\t}, [dimensions, outerRingAvatars, innerRingAvatars]);\n\n\t// Get all possible connection points (avatar IDs and 'center')\n\tconst allConnectionPoints: (number | \"center\")[] = useMemo(\n\t\t() => [...avatars.map((a) => a.id), \"center\"],\n\t\t[avatars],\n\t);\n\n\t// Helper function to get a random element from an array\n\tconst getRandomElement = <T,>(arr: T[]): T =>\n\t\tarr[Math.floor(Math.random() * arr.length)];\n\n\t// Effect to generate random connections periodically\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tlet from: number | \"center\";\n\t\t\tlet to: number | \"center\";\n\t\t\tlet newConnection: Connection | null = null;\n\t\t\tlet attempts = 0;\n\t\t\tconst maxAttempts = 10; // Prevent infinite loops if points are exhausted\n\n\t\t\tdo {\n\t\t\t\tfrom = getRandomElement(allConnectionPoints);\n\t\t\t\tto = getRandomElement(allConnectionPoints);\n\t\t\t\tattempts++;\n\t\t\t\tif (from !== to) {\n\t\t\t\t\t// Found a valid connection\n\t\t\t\t\tnewConnection = {\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tto,\n\t\t\t\t\t\tcolor: getRandomElement([\n\t\t\t\t\t\t\t\"blue\",\n\t\t\t\t\t\t\t\"green\",\n\t\t\t\t\t\t\t\"purple\",\n\t\t\t\t\t\t\t\"yellow\",\n\t\t\t\t\t\t\t\"red\",\n\t\t\t\t\t\t\t\"orange\",\n\t\t\t\t\t\t\t\"pink\",\n\t\t\t\t\t\t\t\"cyan\",\n\t\t\t\t\t\t\t\"white\",\n\t\t\t\t\t\t]),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (attempts < maxAttempts);\n\n\t\t\tsetActiveConnections(newConnection ? [newConnection] : []); // Only one connection at a time\n\t\t}, 4000); // Update connections every 4 seconds (3s animation + 1s pause)\n\n\t\t// Cleanup interval on component unmount\n\t\treturn () => clearInterval(interval);\n\t}, [allConnectionPoints]); // Include allConnectionPoints dependency\n\n\t// Helper function to check if an ID is part of the current active connection\n\tconst isCurrentlyConnected = (id: number | \"center\"): boolean => {\n\t\treturn activeConnections.some((conn) => conn.from === id || conn.to === id);\n\t};\n\n\treturn (\n\t\t// Main container for the visualization, setting background and centering content\n\t\t<div className=\"flex items-center justify-center p-2 sm:p-4 overflow-hidden font-sans w-full h-full min-h-[400px]\">\n\t\t\t{/* Relative container for the network elements to position them absolutely */}\n\t\t\t<div\n\t\t\t\tclassName=\"relative\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: `${dimensions.containerSize}px`,\n\t\t\t\t\theight: `${dimensions.containerSize}px`,\n\t\t\t\t\tmaxWidth: \"100vw\",\n\t\t\t\t\tmaxHeight: \"100vh\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{/* Outer dashed circle */}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"absolute border-2 border-dashed border-purple-400/50 rounded-full top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: `${dimensions.outerRadius * 2}px`,\n\t\t\t\t\t\theight: `${dimensions.outerRadius * 2}px`,\n\t\t\t\t\t}}\n\t\t\t\t></div>\n\n\t\t\t\t{/* Inner dashed circle */}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"absolute border-2 border-dashed border-purple-400/50 rounded-full top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: `${dimensions.innerRadius * 2}px`,\n\t\t\t\t\t\theight: `${dimensions.innerRadius * 2}px`,\n\t\t\t\t\t}}\n\t\t\t\t></div>\n\n\t\t\t\t{/* Center image */}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"absolute shadow-lg z-10 group-center cursor-pointer\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: `${dimensions.centerX}px`,\n\t\t\t\t\t\ttop: `${dimensions.centerY}px`,\n\t\t\t\t\t\ttransform: `translate(-50%, -50%)`, // Center the image element precisely\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"https://i.pinimg.com/736x/5c/62/7a/5c627a3458297ee0c587328e5f7061fc.jpg\"\n\t\t\t\t\t\talt=\"Center Image\"\n\t\t\t\t\t\tclassName=\"rounded-full object-cover border-4 border-white\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: `${dimensions.centerImageSize}px`,\n\t\t\t\t\t\t\theight: `${dimensions.centerImageSize}px`,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\ttarget.style.display = \"none\";\n\t\t\t\t\t\t\tconst parent = target.parentElement;\n\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\tparent.innerHTML = `<span class=\"text-2xl text-white\">⭐</span>`; // Fallback to a star emoji\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{/* Tooltip for Center Image */}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n              ${\n\t\t\t\t\t\t\t\tisCurrentlyConnected(\"center\")\n\t\t\t\t\t\t\t\t\t? \"opacity-100\" // Visible if connected\n\t\t\t\t\t\t\t\t\t: \"opacity-0 group-center:hover:opacity-100\" // Otherwise, visible on hover\n\t\t\t\t\t\t\t}\n          `}\n\t\t\t\t\t>\n\t\t\t\t\t\tCenter Hub\n\t\t\t\t\t\t{/* Tooltip arrow */}\n\t\t\t\t\t\t<div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{/* SVG for drawing animated connection lines */}\n\t\t\t\t<svg className=\"absolute inset-0 w-full h-full z-0\">\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t{/* Filter for line glow effect */}\n\t\t\t\t\t\t<filter id=\"lineGlow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n\t\t\t\t\t\t\t<feGaussianBlur\n\t\t\t\t\t\t\t\tin=\"SourceGraphic\"\n\t\t\t\t\t\t\t\tstdDeviation=\"2\"\n\t\t\t\t\t\t\t\tresult=\"blur\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<feComponentTransfer in=\"blur\" result=\"glow\">\n\t\t\t\t\t\t\t\t{/* Adjusts alpha for glow intensity */}\n\t\t\t\t\t\t\t\t<feFuncA type=\"linear\" slope=\"0.5\" intercept=\"0\" />\n\t\t\t\t\t\t\t</feComponentTransfer>\n\t\t\t\t\t\t\t<feMerge>\n\t\t\t\t\t\t\t\t<feMergeNode in=\"glow\" />\n\t\t\t\t\t\t\t\t<feMergeNode in=\"SourceGraphic\" />\n\t\t\t\t\t\t\t</feMerge>\n\t\t\t\t\t\t</filter>\n\t\t\t\t\t</defs>\n\t\t\t\t\t<AnimatePresence>\n\t\t\t\t\t\t{activeConnections.map((conn) => {\n\t\t\t\t\t\t\tconst fromPos = allAvatarPositions[conn.from as number];\n\t\t\t\t\t\t\tconst toPos = allAvatarPositions[conn.to as number];\n\n\t\t\t\t\t\t\tif (!fromPos || !toPos) return null; // Skip if a position is not found\n\n\t\t\t\t\t\t\t// Calculate line length for stroke-dasharray\n\t\t\t\t\t\t\tconst dx = toPos.cx - fromPos.cx;\n\t\t\t\t\t\t\tconst dy = toPos.cy - fromPos.cy;\n\t\t\t\t\t\t\tconst lineLength = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<motion.line\n\t\t\t\t\t\t\t\t\tkey={`${conn.from}-${conn.to}`} // Key for Framer Motion to track unique lines\n\t\t\t\t\t\t\t\t\tx1={fromPos.cx}\n\t\t\t\t\t\t\t\t\ty1={fromPos.cy}\n\t\t\t\t\t\t\t\t\tx2={toPos.cx}\n\t\t\t\t\t\t\t\t\ty2={toPos.cy}\n\t\t\t\t\t\t\t\t\tstroke={\n\t\t\t\t\t\t\t\t\t\tconn.color.includes(\"blue\")\n\t\t\t\t\t\t\t\t\t\t\t? \"#3b82f6\"\n\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"green\")\n\t\t\t\t\t\t\t\t\t\t\t\t? \"#10b981\"\n\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"purple\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#8b5cf6\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"yellow\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#f59e0b\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"red\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#ef4444\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"orange\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#f97316\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"pink\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#ec4899\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"cyan\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#06b6d4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"white\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#ffffff\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"#3b82f6\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tstrokeWidth={dimensions.strokeWidth}\n\t\t\t\t\t\t\t\t\tstrokeOpacity=\"0.8\"\n\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\tinitial={{\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray: lineLength,\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset: lineLength,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tanimate={{ strokeDashoffset: 0 }}\n\t\t\t\t\t\t\t\t\ttransition={{ duration: 3, ease: \"linear\" }}\n\t\t\t\t\t\t\t\t\tfilter=\"url(#lineGlow)\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</AnimatePresence>\n\t\t\t\t</svg>\n\n\t\t\t\t{/* Render outer ring avatars */}\n\t\t\t\t{outerRingAvatars.map((avatar) => {\n\t\t\t\t\tconst { cx, cy } = allAvatarPositions[avatar.id]; // Use pre-calculated positions\n\t\t\t\t\t// Check if this avatar is currently involved in a connection\n\t\t\t\t\tconst isActive = isCurrentlyConnected(avatar.id);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={avatar.id}\n\t\t\t\t\t\t\tclassName=\"absolute\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tleft: `${cx}px`,\n\t\t\t\t\t\t\t\ttop: `${cy}px`,\n\t\t\t\t\t\t\t\ttransform: `translate(-50%, -50%)`, // Center the avatar element precisely\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/* Avatar container with hover effects */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={`bg-white rounded-full flex items-center justify-center shadow-lg hover:scale-105 transition-transform duration-200 cursor-pointer group-outer-${avatar.id} relative`}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidth: `${dimensions.outerAvatarSize}px`,\n\t\t\t\t\t\t\t\t\theight: `${dimensions.outerAvatarSize}px`,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{/* Inner circle for the avatar image/emoji */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"rounded-full relative overflow-hidden flex items-center justify-center\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\twidth: `${dimensions.outerImageSize}px`,\n\t\t\t\t\t\t\t\t\t\theight: `${dimensions.outerImageSize}px`,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{/* Avatar image with error fallback to emoji */}\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={avatar.image || \"/placeholder.svg\"}\n\t\t\t\t\t\t\t\t\t\talt={avatar.name}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-full h-full object-cover rounded-full\"\n\t\t\t\t\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\t\t\t\t\ttarget.style.display = \"none\"; // Hide the broken image\n\t\t\t\t\t\t\t\t\t\t\tconst parent = target.parentElement;\n\t\t\t\t\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Fallback to a generic emoji if image fails to load\n\t\t\t\t\t\t\t\t\t\t\t\tparent.innerHTML = `<span class=\"text-2xl\">👤</span>`;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t{/* Tooltip with avatar name */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n                    ${\n\t\t\t\t\t\t\t\t\t\t\tisActive\n\t\t\t\t\t\t\t\t\t\t\t\t? \"opacity-100\" // Visible if connected\n\t\t\t\t\t\t\t\t\t\t\t\t: \"opacity-0 group-outer-${avatar.id}:hover:opacity-100\" // Otherwise, visible on hover\n\t\t\t\t\t\t\t\t\t\t}\n                `}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{avatar.name}\n\t\t\t\t\t\t\t\t\t{/* Tooltip arrow */}\n\t\t\t\t\t\t\t\t\t<div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\n\t\t\t\t{/* Render inner ring avatars */}\n\t\t\t\t{innerRingAvatars.map((avatar) => {\n\t\t\t\t\tconst { cx, cy } = allAvatarPositions[avatar.id]; // Use pre-calculated positions\n\t\t\t\t\t// Check if this avatar is currently involved in a connection\n\t\t\t\t\tconst isActive = isCurrentlyConnected(avatar.id);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={avatar.id}\n\t\t\t\t\t\t\tclassName=\"absolute\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tleft: `${cx}px`,\n\t\t\t\t\t\t\t\ttop: `${cy}px`,\n\t\t\t\t\t\t\t\ttransform: `translate(-50%, -50%)`, // Center the avatar element precisely\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/* Avatar container with hover effects */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={`bg-white rounded-full flex items-center justify-center shadow-lg hover:scale-105 transition-transform duration-200 cursor-pointer group-inner-${avatar.id} relative`}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidth: `${dimensions.innerAvatarSize}px`,\n\t\t\t\t\t\t\t\t\theight: `${dimensions.innerAvatarSize}px`,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{/* Inner circle for the avatar image/emoji */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"rounded-full relative overflow-hidden flex items-center justify-center\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\twidth: `${dimensions.innerImageSize}px`,\n\t\t\t\t\t\t\t\t\t\theight: `${dimensions.innerImageSize}px`,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{/* Avatar image with error fallback to emoji */}\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={avatar.image || \"/placeholder.svg\"}\n\t\t\t\t\t\t\t\t\t\talt={avatar.name}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-full h-full object-cover rounded-full\"\n\t\t\t\t\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\t\t\t\t\ttarget.style.display = \"none\"; // Hide the broken image\n\t\t\t\t\t\t\t\t\t\t\tconst parent = target.parentElement;\n\t\t\t\t\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Fallback to a generic emoji if image fails to load\n\t\t\t\t\t\t\t\t\t\t\t\tparent.innerHTML = `<span class=\"text-2xl\">👤</span>`;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t{/* Tooltip with avatar name */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n                    ${\n\t\t\t\t\t\t\t\t\t\t\tisActive\n\t\t\t\t\t\t\t\t\t\t\t\t? \"opacity-100\" // Visible if connected\n\t\t\t\t\t\t\t\t\t\t\t\t: \"opacity-0 group-inner-${avatar.id}:hover:opacity-100\" // Otherwise, visible on hover\n\t\t\t\t\t\t\t\t\t\t}\n                `}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{avatar.name}\n\t\t\t\t\t\t\t\t\t{/* Tooltip arrow */}\n\t\t\t\t\t\t\t\t\t<div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default NetworkVisualization;\n",
      "type": "registry:component"
    },
    {
      "path": "network",
      "content": "\"use client\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\n// Type definitions\ninterface Avatar {\n\tid: number;\n\tname: string;\n\timage: string;\n\tring: \"outer\" | \"inner\";\n}\n\ninterface Position {\n\tcx: number;\n\tcy: number;\n}\n\ninterface Connection {\n\tfrom: number | \"center\";\n\tto: number | \"center\";\n\tcolor: string;\n}\n\ninterface AvatarPositions {\n\t[key: string]: Position;\n}\n\n// Main React component for the improved network visualization\nfunction NetworkVisualization() {\n\t// State to track container dimensions\n\tconst [containerSize, setContainerSize] = useState({\n\t\twidth: 700,\n\t\theight: 700,\n\t});\n\t// Removed unused isMobile state\n\n\t// Responsive dimensions based on screen size\n\tconst dimensions = useMemo(() => {\n\t\tconst baseSize = Math.min(containerSize.width, containerSize.height);\n\t\tconst scale = baseSize / 700; // Scale factor based on original 700px design\n\n\t\treturn {\n\t\t\tcontainerSize: baseSize,\n\t\t\touterRadius: Math.floor(290 * scale),\n\t\t\tinnerRadius: Math.floor(180 * scale),\n\t\t\tcenterImageSize: Math.floor(160 * scale), // w-40 = 160px\n\t\t\touterAvatarSize: Math.floor(80 * scale), // w-20 = 80px\n\t\t\tinnerAvatarSize: Math.floor(72 * scale), // w-18 = 72px\n\t\t\touterImageSize: Math.floor(64 * scale), // w-16 = 64px\n\t\t\tinnerImageSize: Math.floor(56 * scale), // w-14 = 56px\n\t\t\tstrokeWidth: Math.max(1, Math.floor(3 * scale)),\n\t\t\ttooltipTextSize: scale < 0.6 ? \"text-xs\" : \"text-sm\",\n\t\t\tcenterX: baseSize / 2,\n\t\t\tcenterY: baseSize / 2,\n\t\t};\n\t}, [containerSize]);\n\n\t// Effect to handle responsive sizing\n\tuseEffect(() => {\n\t\tconst updateSize = () => {\n\t\t\tconst width = window.innerWidth;\n\t\t\tconst height = window.innerHeight;\n\t\t\t// Removed unused isMobile logic\n\n\t\t\t// Calculate available space (accounting for padding and margins)\n\t\t\tconst maxWidth = Math.min(width - 32, 700); // 32px for padding\n\t\t\tconst maxHeight = Math.min(height - 32, 700);\n\t\t\tconst size = Math.min(maxWidth, maxHeight);\n\n\t\t\tsetContainerSize({ width: size, height: size });\n\t\t};\n\n\t\tupdateSize();\n\t\twindow.addEventListener(\"resize\", updateSize);\n\t\treturn () => window.removeEventListener(\"resize\", updateSize);\n\t}, []);\n\n\t// Avatar data array with diverse images. Positions will be calculated dynamically.\n\tconst avatars: Avatar[] = useMemo(() => {\n\t\t// New list of image links for avatars\n\t\tconst newImageLinks = [\n\t\t\t\"https://ui.solancn.com/buns.png\",\n\t\t\t\"https://i.pinimg.com/736x/8c/6d/db/8c6ddb5fe6600fcc4b183cb2ee228eb7.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/6f/a3/6a/6fa36aa2c367da06b2a4c8ae1cf9ee02.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/c2/4e/27/c24e271f2f992fd7e62e8c1e8d9b3e2f.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/81/d6/b1/81d6b158728f5fc97ca6e0a025fefee0.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/9f/46/74/9f4674ca9c17330ab419c1b2f5951d9a.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/57/3c/80/573c80967c9429d0ed0ce32701f85b70.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/b0/c4/21/b0c421e77cf563962026ade82c90dd5b.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/ce/31/42/ce3142d7a968fff3aecd0100572a5e8b.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/79/63/a5/7963a5246188d408b8f28961a0cf2b90.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/8e/c1/f8/8ec1f80db272047cedf4c20263114387.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/08/a2/41/08a2413b771b729a9f9df20fa97be52a.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/b0/7b/cc/b07bcc19e5d06dfb888c3263724b8baa.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/12/ec/d9/12ecd918607b1ccb9d46772435bb592f.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/e2/f5/bc/e2f5bc45bd9d07946c9453cfb48747ea.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/50/47/d2/5047d259f0d8b3d652b7d3dfa3479139.jpg\",\n\t\t\t\"https://i.pinimg.com/736x/bb/87/18/bb87180897cb4cb694cd692966a0ab15.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/fb/c3/03/fbc30308d8f36a5566cbf0a535c14322.jpg\",\n\t\t\t\"https://i.pinimg.com/1200x/de/11/d2/de11d2f9df4295493625189e9cb829ce.jpg\",\n\t\t];\n\n\t\treturn [\n\t\t\t{ id: 1, name: \"Val Alexander\", image: newImageLinks[0], ring: \"outer\" },\n\t\t\t{ id: 2, name: \"Maya\", image: newImageLinks[1], ring: \"outer\" },\n\t\t\t{ id: 3, name: \"Jordan\", image: newImageLinks[2], ring: \"outer\" },\n\t\t\t{ id: 4, name: \"Zara\", image: newImageLinks[3], ring: \"outer\" },\n\t\t\t{ id: 5, name: \"Sam\", image: newImageLinks[4], ring: \"outer\" },\n\t\t\t{ id: 6, name: \"Riley\", image: newImageLinks[5], ring: \"outer\" },\n\t\t\t{ id: 7, name: \"Casey\", image: newImageLinks[6], ring: \"outer\" },\n\t\t\t{ id: 8, name: \"Avery\", image: newImageLinks[7], ring: \"outer\" },\n\t\t\t{ id: 9, name: \"Morgan\", image: newImageLinks[8], ring: \"inner\" },\n\t\t\t{ id: 10, name: \"Quinn\", image: newImageLinks[9], ring: \"inner\" },\n\t\t\t{ id: 11, name: \"Sage\", image: newImageLinks[10], ring: \"inner\" },\n\t\t\t{ id: 12, name: \"River\", image: newImageLinks[11], ring: \"inner\" },\n\t\t\t{ id: 13, name: \"Alex\", image: newImageLinks[12], ring: \"outer\" },\n\t\t\t{ id: 14, name: \"Jamie\", image: newImageLinks[13], ring: \"outer\" },\n\t\t\t{ id: 15, name: \"Chris\", image: newImageLinks[14], ring: \"inner\" },\n\t\t\t{ id: 16, name: \"Pat\", image: newImageLinks[15], ring: \"outer\" },\n\t\t\t{ id: 17, name: \"Drew\", image: newImageLinks[16], ring: \"inner\" },\n\t\t\t{ id: 18, name: \"Lee\", image: newImageLinks[17], ring: \"outer\" },\n\t\t\t// Added more avatars for increased density and better distribution\n\t\t\t// Using existing image links for additional avatars, cycling if needed\n\t\t\t{\n\t\t\t\tid: 19,\n\t\t\t\tname: \"Taylor\",\n\t\t\t\timage: newImageLinks[18 % newImageLinks.length],\n\t\t\t\tring: \"outer\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 20,\n\t\t\t\tname: \"Jesse\",\n\t\t\t\timage: newImageLinks[1 % newImageLinks.length],\n\t\t\t\tring: \"outer\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 21,\n\t\t\t\tname: \"Dakota\",\n\t\t\t\timage: newImageLinks[2 % newImageLinks.length],\n\t\t\t\tring: \"inner\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 22,\n\t\t\t\tname: \"Blair\",\n\t\t\t\timage: newImageLinks[3 % newImageLinks.length],\n\t\t\t\tring: \"inner\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 23,\n\t\t\t\tname: \"Jordan S.\",\n\t\t\t\timage: newImageLinks[4 % newImageLinks.length],\n\t\t\t\tring: \"outer\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 24,\n\t\t\t\tname: \"Casey M.\",\n\t\t\t\timage: newImageLinks[5 % newImageLinks.length],\n\t\t\t\tring: \"inner\",\n\t\t\t},\n\t\t];\n\t}, []);\n\n\t// Separate avatars into inner and outer rings for distinct positioning\n\tconst outerRingAvatars = avatars.filter((a) => a.ring === \"outer\");\n\tconst innerRingAvatars = avatars.filter((a) => a.ring === \"inner\");\n\n\t// State to hold the active connections\n\tconst [activeConnections, setActiveConnections] = useState<Connection[]>([]);\n\n\t// Pre-calculate all avatar positions and store them in a map for easy lookup\n\tconst allAvatarPositions: AvatarPositions = useMemo(() => {\n\t\t// Function to calculate the absolute center position of an avatar\n\t\t// relative to the top-left of the container.\n\t\tconst getAvatarAbsolutePosition = (\n\t\t\tindex: number,\n\t\t\ttotal: number,\n\t\t\tradius: number,\n\t\t\tstartAngleOffset: number = 0,\n\t\t): Position => {\n\t\t\tconst angle = startAngleOffset + (index / total) * 2 * Math.PI; // Angle in radians, with offset\n\t\t\tconst x = radius * Math.cos(angle);\n\t\t\tconst y = radius * Math.sin(angle);\n\t\t\t// Add center coordinates to center the coordinates within the container\n\t\t\treturn { cx: dimensions.centerX + x, cy: dimensions.centerY + y };\n\t\t};\n\n\t\tconst positions: AvatarPositions = {};\n\t\touterRingAvatars.forEach((avatar, index) => {\n\t\t\tpositions[avatar.id] = getAvatarAbsolutePosition(\n\t\t\t\tindex,\n\t\t\t\touterRingAvatars.length,\n\t\t\t\tdimensions.outerRadius,\n\t\t\t\tMath.PI / 2,\n\t\t\t);\n\t\t});\n\t\tinnerRingAvatars.forEach((avatar, index) => {\n\t\t\tpositions[avatar.id] = getAvatarAbsolutePosition(\n\t\t\t\tindex,\n\t\t\t\tinnerRingAvatars.length,\n\t\t\t\tdimensions.innerRadius,\n\t\t\t\tMath.PI / 3,\n\t\t\t);\n\t\t});\n\t\t// Add the center image's position\n\t\tpositions[\"center\"] = {\n\t\t\tcx: dimensions.centerX,\n\t\t\tcy: dimensions.centerY,\n\t\t} as Position;\n\t\treturn positions;\n\t}, [dimensions, outerRingAvatars, innerRingAvatars]);\n\n\t// Get all possible connection points (avatar IDs and 'center')\n\tconst allConnectionPoints: (number | \"center\")[] = useMemo(\n\t\t() => [...avatars.map((a) => a.id), \"center\"],\n\t\t[avatars],\n\t);\n\n\t// Helper function to get a random element from an array\n\tconst getRandomElement = <T,>(arr: T[]): T =>\n\t\tarr[Math.floor(Math.random() * arr.length)];\n\n\t// Effect to generate random connections periodically\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tlet from: number | \"center\";\n\t\t\tlet to: number | \"center\";\n\t\t\tlet newConnection: Connection | null = null;\n\t\t\tlet attempts = 0;\n\t\t\tconst maxAttempts = 10; // Prevent infinite loops if points are exhausted\n\n\t\t\tdo {\n\t\t\t\tfrom = getRandomElement(allConnectionPoints);\n\t\t\t\tto = getRandomElement(allConnectionPoints);\n\t\t\t\tattempts++;\n\t\t\t\tif (from !== to) {\n\t\t\t\t\t// Found a valid connection\n\t\t\t\t\tnewConnection = {\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tto,\n\t\t\t\t\t\tcolor: getRandomElement([\n\t\t\t\t\t\t\t\"blue\",\n\t\t\t\t\t\t\t\"green\",\n\t\t\t\t\t\t\t\"purple\",\n\t\t\t\t\t\t\t\"yellow\",\n\t\t\t\t\t\t\t\"red\",\n\t\t\t\t\t\t\t\"orange\",\n\t\t\t\t\t\t\t\"pink\",\n\t\t\t\t\t\t\t\"cyan\",\n\t\t\t\t\t\t\t\"white\",\n\t\t\t\t\t\t]),\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (attempts < maxAttempts);\n\n\t\t\tsetActiveConnections(newConnection ? [newConnection] : []); // Only one connection at a time\n\t\t}, 4000); // Update connections every 4 seconds (3s animation + 1s pause)\n\n\t\t// Cleanup interval on component unmount\n\t\treturn () => clearInterval(interval);\n\t}, [allConnectionPoints]); // Include allConnectionPoints dependency\n\n\t// Helper function to check if an ID is part of the current active connection\n\tconst isCurrentlyConnected = (id: number | \"center\"): boolean => {\n\t\treturn activeConnections.some((conn) => conn.from === id || conn.to === id);\n\t};\n\n\treturn (\n\t\t// Main container for the visualization, setting background and centering content\n\t\t<div className=\"flex items-center justify-center p-2 sm:p-4 overflow-hidden font-sans w-full h-full min-h-[400px]\">\n\t\t\t{/* Relative container for the network elements to position them absolutely */}\n\t\t\t<div\n\t\t\t\tclassName=\"relative\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: `${dimensions.containerSize}px`,\n\t\t\t\t\theight: `${dimensions.containerSize}px`,\n\t\t\t\t\tmaxWidth: \"100vw\",\n\t\t\t\t\tmaxHeight: \"100vh\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{/* Outer dashed circle */}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"absolute border-2 border-dashed border-purple-400/50 rounded-full top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: `${dimensions.outerRadius * 2}px`,\n\t\t\t\t\t\theight: `${dimensions.outerRadius * 2}px`,\n\t\t\t\t\t}}\n\t\t\t\t></div>\n\n\t\t\t\t{/* Inner dashed circle */}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"absolute border-2 border-dashed border-purple-400/50 rounded-full top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: `${dimensions.innerRadius * 2}px`,\n\t\t\t\t\t\theight: `${dimensions.innerRadius * 2}px`,\n\t\t\t\t\t}}\n\t\t\t\t></div>\n\n\t\t\t\t{/* Center image */}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"absolute shadow-lg z-10 group-center cursor-pointer\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: `${dimensions.centerX}px`,\n\t\t\t\t\t\ttop: `${dimensions.centerY}px`,\n\t\t\t\t\t\ttransform: `translate(-50%, -50%)`, // Center the image element precisely\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"https://i.pinimg.com/736x/5c/62/7a/5c627a3458297ee0c587328e5f7061fc.jpg\"\n\t\t\t\t\t\talt=\"Center Image\"\n\t\t\t\t\t\tclassName=\"rounded-full object-cover border-4 border-white\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\twidth: `${dimensions.centerImageSize}px`,\n\t\t\t\t\t\t\theight: `${dimensions.centerImageSize}px`,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\ttarget.style.display = \"none\";\n\t\t\t\t\t\t\tconst parent = target.parentElement;\n\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\tparent.innerHTML = `<span class=\"text-2xl text-white\">⭐</span>`; // Fallback to a star emoji\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{/* Tooltip for Center Image */}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n              ${\n\t\t\t\t\t\t\t\tisCurrentlyConnected(\"center\")\n\t\t\t\t\t\t\t\t\t? \"opacity-100\" // Visible if connected\n\t\t\t\t\t\t\t\t\t: \"opacity-0 group-center:hover:opacity-100\" // Otherwise, visible on hover\n\t\t\t\t\t\t\t}\n          `}\n\t\t\t\t\t>\n\t\t\t\t\t\tCenter Hub\n\t\t\t\t\t\t{/* Tooltip arrow */}\n\t\t\t\t\t\t<div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{/* SVG for drawing animated connection lines */}\n\t\t\t\t<svg className=\"absolute inset-0 w-full h-full z-0\">\n\t\t\t\t\t<defs>\n\t\t\t\t\t\t{/* Filter for line glow effect */}\n\t\t\t\t\t\t<filter id=\"lineGlow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n\t\t\t\t\t\t\t<feGaussianBlur\n\t\t\t\t\t\t\t\tin=\"SourceGraphic\"\n\t\t\t\t\t\t\t\tstdDeviation=\"2\"\n\t\t\t\t\t\t\t\tresult=\"blur\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<feComponentTransfer in=\"blur\" result=\"glow\">\n\t\t\t\t\t\t\t\t{/* Adjusts alpha for glow intensity */}\n\t\t\t\t\t\t\t\t<feFuncA type=\"linear\" slope=\"0.5\" intercept=\"0\" />\n\t\t\t\t\t\t\t</feComponentTransfer>\n\t\t\t\t\t\t\t<feMerge>\n\t\t\t\t\t\t\t\t<feMergeNode in=\"glow\" />\n\t\t\t\t\t\t\t\t<feMergeNode in=\"SourceGraphic\" />\n\t\t\t\t\t\t\t</feMerge>\n\t\t\t\t\t\t</filter>\n\t\t\t\t\t</defs>\n\t\t\t\t\t<AnimatePresence>\n\t\t\t\t\t\t{activeConnections.map((conn) => {\n\t\t\t\t\t\t\tconst fromPos = allAvatarPositions[conn.from as number];\n\t\t\t\t\t\t\tconst toPos = allAvatarPositions[conn.to as number];\n\n\t\t\t\t\t\t\tif (!fromPos || !toPos) return null; // Skip if a position is not found\n\n\t\t\t\t\t\t\t// Calculate line length for stroke-dasharray\n\t\t\t\t\t\t\tconst dx = toPos.cx - fromPos.cx;\n\t\t\t\t\t\t\tconst dy = toPos.cy - fromPos.cy;\n\t\t\t\t\t\t\tconst lineLength = Math.sqrt(dx * dx + dy * dy);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<motion.line\n\t\t\t\t\t\t\t\t\tkey={`${conn.from}-${conn.to}`} // Key for Framer Motion to track unique lines\n\t\t\t\t\t\t\t\t\tx1={fromPos.cx}\n\t\t\t\t\t\t\t\t\ty1={fromPos.cy}\n\t\t\t\t\t\t\t\t\tx2={toPos.cx}\n\t\t\t\t\t\t\t\t\ty2={toPos.cy}\n\t\t\t\t\t\t\t\t\tstroke={\n\t\t\t\t\t\t\t\t\t\tconn.color.includes(\"blue\")\n\t\t\t\t\t\t\t\t\t\t\t? \"#3b82f6\"\n\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"green\")\n\t\t\t\t\t\t\t\t\t\t\t\t? \"#10b981\"\n\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"purple\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#8b5cf6\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"yellow\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#f59e0b\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"red\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#ef4444\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"orange\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#f97316\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"pink\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#ec4899\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"cyan\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#06b6d4\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: conn.color.includes(\"white\")\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"#ffffff\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"#3b82f6\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tstrokeWidth={dimensions.strokeWidth}\n\t\t\t\t\t\t\t\t\tstrokeOpacity=\"0.8\"\n\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\tinitial={{\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray: lineLength,\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset: lineLength,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tanimate={{ strokeDashoffset: 0 }}\n\t\t\t\t\t\t\t\t\ttransition={{ duration: 3, ease: \"linear\" }}\n\t\t\t\t\t\t\t\t\tfilter=\"url(#lineGlow)\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</AnimatePresence>\n\t\t\t\t</svg>\n\n\t\t\t\t{/* Render outer ring avatars */}\n\t\t\t\t{outerRingAvatars.map((avatar) => {\n\t\t\t\t\tconst { cx, cy } = allAvatarPositions[avatar.id]; // Use pre-calculated positions\n\t\t\t\t\t// Check if this avatar is currently involved in a connection\n\t\t\t\t\tconst isActive = isCurrentlyConnected(avatar.id);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={avatar.id}\n\t\t\t\t\t\t\tclassName=\"absolute\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tleft: `${cx}px`,\n\t\t\t\t\t\t\t\ttop: `${cy}px`,\n\t\t\t\t\t\t\t\ttransform: `translate(-50%, -50%)`, // Center the avatar element precisely\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/* Avatar container with hover effects */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={`bg-white rounded-full flex items-center justify-center shadow-lg hover:scale-105 transition-transform duration-200 cursor-pointer group-outer-${avatar.id} relative`}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidth: `${dimensions.outerAvatarSize}px`,\n\t\t\t\t\t\t\t\t\theight: `${dimensions.outerAvatarSize}px`,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{/* Inner circle for the avatar image/emoji */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"rounded-full relative overflow-hidden flex items-center justify-center\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\twidth: `${dimensions.outerImageSize}px`,\n\t\t\t\t\t\t\t\t\t\theight: `${dimensions.outerImageSize}px`,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{/* Avatar image with error fallback to emoji */}\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={avatar.image || \"/placeholder.svg\"}\n\t\t\t\t\t\t\t\t\t\talt={avatar.name}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-full h-full object-cover rounded-full\"\n\t\t\t\t\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\t\t\t\t\ttarget.style.display = \"none\"; // Hide the broken image\n\t\t\t\t\t\t\t\t\t\t\tconst parent = target.parentElement;\n\t\t\t\t\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Fallback to a generic emoji if image fails to load\n\t\t\t\t\t\t\t\t\t\t\t\tparent.innerHTML = `<span class=\"text-2xl\">👤</span>`;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t{/* Tooltip with avatar name */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n                    ${\n\t\t\t\t\t\t\t\t\t\t\tisActive\n\t\t\t\t\t\t\t\t\t\t\t\t? \"opacity-100\" // Visible if connected\n\t\t\t\t\t\t\t\t\t\t\t\t: \"opacity-0 group-outer-${avatar.id}:hover:opacity-100\" // Otherwise, visible on hover\n\t\t\t\t\t\t\t\t\t\t}\n                `}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{avatar.name}\n\t\t\t\t\t\t\t\t\t{/* Tooltip arrow */}\n\t\t\t\t\t\t\t\t\t<div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\n\t\t\t\t{/* Render inner ring avatars */}\n\t\t\t\t{innerRingAvatars.map((avatar) => {\n\t\t\t\t\tconst { cx, cy } = allAvatarPositions[avatar.id]; // Use pre-calculated positions\n\t\t\t\t\t// Check if this avatar is currently involved in a connection\n\t\t\t\t\tconst isActive = isCurrentlyConnected(avatar.id);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={avatar.id}\n\t\t\t\t\t\t\tclassName=\"absolute\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tleft: `${cx}px`,\n\t\t\t\t\t\t\t\ttop: `${cy}px`,\n\t\t\t\t\t\t\t\ttransform: `translate(-50%, -50%)`, // Center the avatar element precisely\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/* Avatar container with hover effects */}\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName={`bg-white rounded-full flex items-center justify-center shadow-lg hover:scale-105 transition-transform duration-200 cursor-pointer group-inner-${avatar.id} relative`}\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\twidth: `${dimensions.innerAvatarSize}px`,\n\t\t\t\t\t\t\t\t\theight: `${dimensions.innerAvatarSize}px`,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{/* Inner circle for the avatar image/emoji */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"rounded-full relative overflow-hidden flex items-center justify-center\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\twidth: `${dimensions.innerImageSize}px`,\n\t\t\t\t\t\t\t\t\t\theight: `${dimensions.innerImageSize}px`,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{/* Avatar image with error fallback to emoji */}\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={avatar.image || \"/placeholder.svg\"}\n\t\t\t\t\t\t\t\t\t\talt={avatar.name}\n\t\t\t\t\t\t\t\t\t\tclassName=\"w-full h-full object-cover rounded-full\"\n\t\t\t\t\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\t\t\t\t\ttarget.style.display = \"none\"; // Hide the broken image\n\t\t\t\t\t\t\t\t\t\t\tconst parent = target.parentElement;\n\t\t\t\t\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Fallback to a generic emoji if image fails to load\n\t\t\t\t\t\t\t\t\t\t\t\tparent.innerHTML = `<span class=\"text-2xl\">👤</span>`;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t{/* Tooltip with avatar name */}\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n                    ${\n\t\t\t\t\t\t\t\t\t\t\tisActive\n\t\t\t\t\t\t\t\t\t\t\t\t? \"opacity-100\" // Visible if connected\n\t\t\t\t\t\t\t\t\t\t\t\t: \"opacity-0 group-inner-${avatar.id}:hover:opacity-100\" // Otherwise, visible on hover\n\t\t\t\t\t\t\t\t\t\t}\n                `}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{avatar.name}\n\t\t\t\t\t\t\t\t\t{/* Tooltip arrow */}\n\t\t\t\t\t\t\t\t\t<div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default NetworkVisualization;\n",
      "type": "registry:component"
    }
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  }
}