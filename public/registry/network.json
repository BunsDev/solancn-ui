{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "network",
  "title": "Network",
  "description": "A minimalistic network component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "network.tsx",
      "content": "'use client'\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\n// Type definitions\ninterface Avatar {\n  id: number;\n  name: string;\n  image: string;\n  ring: \"outer\" | \"inner\";\n}\n\ninterface Position {\n  cx: number;\n  cy: number;\n}\n\ninterface Connection {\n  from: number | 'center';\n  to: number | 'center';\n  color: string;\n}\n\ninterface AvatarPositions {\n  [key: string]: Position;\n}\n\n// Main React component for the improved network visualization\nfunction NetworkVisualization() {\n  // State to track container dimensions\n  const [containerSize, setContainerSize] = useState({ width: 700, height: 700 });\n  // Removed unused isMobile state\n\n  // Responsive dimensions based on screen size\n  const dimensions = useMemo(() => {\n    const baseSize = Math.min(containerSize.width, containerSize.height);\n    const scale = baseSize / 700; // Scale factor based on original 700px design\n    \n    return {\n      containerSize: baseSize,\n      outerRadius: Math.floor(290 * scale),\n      innerRadius: Math.floor(180 * scale),\n      centerImageSize: Math.floor(160 * scale), // w-40 = 160px\n      outerAvatarSize: Math.floor(80 * scale),  // w-20 = 80px\n      innerAvatarSize: Math.floor(72 * scale),  // w-18 = 72px\n      outerImageSize: Math.floor(64 * scale),   // w-16 = 64px\n      innerImageSize: Math.floor(56 * scale),   // w-14 = 56px\n      strokeWidth: Math.max(1, Math.floor(3 * scale)),\n      tooltipTextSize: scale < 0.6 ? 'text-xs' : 'text-sm',\n      centerX: baseSize / 2,\n      centerY: baseSize / 2,\n    };\n  }, [containerSize]);\n\n  // Effect to handle responsive sizing\n  useEffect(() => {\n    const updateSize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      // Removed unused isMobile logic\n      \n      // Calculate available space (accounting for padding and margins)\n      const maxWidth = Math.min(width - 32, 700); // 32px for padding\n      const maxHeight = Math.min(height - 32, 700);\n      const size = Math.min(maxWidth, maxHeight);\n      \n      setContainerSize({ width: size, height: size });\n    };\n\n    updateSize();\n    window.addEventListener('resize', updateSize);\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n\n  // Avatar data array with diverse images. Positions will be calculated dynamically.\n  const avatars: Avatar[] = useMemo(() => {\n    // New list of image links for avatars\n    const newImageLinks = [\n      \"https://i.postimg.cc/W1rCvYnT/nazmul-hossain.jpg\",\n      \"https://i.pinimg.com/736x/8c/6d/db/8c6ddb5fe6600fcc4b183cb2ee228eb7.jpg\",\n      \"https://i.pinimg.com/736x/6f/a3/6a/6fa36aa2c367da06b2a4c8ae1cf9ee02.jpg\",\n      \"https://i.pinimg.com/1200x/c2/4e/27/c24e271f2f992fd7e62e8c1e8d9b3e2f.jpg\",\n      \"https://i.pinimg.com/736x/81/d6/b1/81d6b158728f5fc97ca6e0a025fefee0.jpg\",\n      \"https://i.pinimg.com/736x/9f/46/74/9f4674ca9c17330ab419c1b2f5951d9a.jpg\",\n      \"https://i.pinimg.com/736x/57/3c/80/573c80967c9429d0ed0ce32701f85b70.jpg\",\n      \"https://i.pinimg.com/736x/b0/c4/21/b0c421e77cf563962026ade82c90dd5b.jpg\",\n      \"https://i.pinimg.com/736x/ce/31/42/ce3142d7a968fff3aecd0100572a5e8b.jpg\",\n      \"https://i.pinimg.com/736x/79/63/a5/7963a5246188d408b8f28961a0cf2b90.jpg\",\n      \"https://i.pinimg.com/736x/8e/c1/f8/8ec1f80db272047cedf4c20263114387.jpg\",\n      \"https://i.pinimg.com/1200x/08/a2/41/08a2413b771b729a9f9df20fa97be52a.jpg\",\n      \"https://i.pinimg.com/736x/b0/7b/cc/b07bcc19e5d06dfb888c3263724b8baa.jpg\",\n      \"https://i.pinimg.com/736x/12/ec/d9/12ecd918607b1ccb9d46772435bb592f.jpg\",\n      \"https://i.pinimg.com/1200x/e2/f5/bc/e2f5bc45bd9d07946c9453cfb48747ea.jpg\",\n      \"https://i.pinimg.com/1200x/50/47/d2/5047d259f0d8b3d652b7d3dfa3479139.jpg\",\n      \"https://i.pinimg.com/736x/bb/87/18/bb87180897cb4cb694cd692966a0ab15.jpg\",\n      \"https://i.pinimg.com/1200x/fb/c3/03/fbc30308d8f36a5566cbf0a535c14322.jpg\",\n      \"https://i.pinimg.com/1200x/de/11/d2/de11d2f9df4295493625189e9cb829ce.jpg\"\n    ];\n\n    return [\n    { id: 1, name: \"Nazmul Hossain\", image: newImageLinks[0], ring: \"outer\" },\n    { id: 2, name: \"Maya\", image: newImageLinks[1], ring: \"outer\" },\n    { id: 3, name: \"Jordan\", image: newImageLinks[2], ring: \"outer\" },\n    { id: 4, name: \"Zara\", image: newImageLinks[3], ring: \"outer\" },\n    { id: 5, name: \"Sam\", image: newImageLinks[4], ring: \"outer\" },\n    { id: 6, name: \"Riley\", image: newImageLinks[5], ring: \"outer\" },\n    { id: 7, name: \"Casey\", image: newImageLinks[6], ring: \"outer\" },\n    { id: 8, name: \"Avery\", image: newImageLinks[7], ring: \"outer\" },\n    { id: 9, name: \"Morgan\", image: newImageLinks[8], ring: \"inner\" },\n    { id: 10, name: \"Quinn\", image: newImageLinks[9], ring: \"inner\" },\n    { id: 11, name: \"Sage\", image: newImageLinks[10], ring: \"inner\" },\n    { id: 12, name: \"River\", image: newImageLinks[11], ring: \"inner\" },\n    { id: 13, name: \"Alex\", image: newImageLinks[12], ring: \"outer\" },\n    { id: 14, name: \"Jamie\", image: newImageLinks[13], ring: \"outer\" },\n    { id: 15, name: \"Chris\", image: newImageLinks[14], ring: \"inner\" },\n    { id: 16, name: \"Pat\", image: newImageLinks[15], ring: \"outer\" },\n    { id: 17, name: \"Drew\", image: newImageLinks[16], ring: \"inner\" },\n    { id: 18, name: \"Lee\", image: newImageLinks[17], ring: \"outer\" },\n    // Added more avatars for increased density and better distribution\n    // Using existing image links for additional avatars, cycling if needed\n    { id: 19, name: \"Taylor\", image: newImageLinks[18 % newImageLinks.length], ring: \"outer\" },\n    { id: 20, name: \"Jesse\", image: newImageLinks[1 % newImageLinks.length], ring: \"outer\" },\n    { id: 21, name: \"Dakota\", image: newImageLinks[2 % newImageLinks.length], ring: \"inner\" },\n    { id: 22, name: \"Blair\", image: newImageLinks[3 % newImageLinks.length], ring: \"inner\" },\n    { id: 23, name: \"Jordan S.\", image: newImageLinks[4 % newImageLinks.length], ring: \"outer\" },\n    { id: 24, name: \"Casey M.\", image: newImageLinks[5 % newImageLinks.length], ring: \"inner\" },\n    ];\n  }, []);\n\n  // Separate avatars into inner and outer rings for distinct positioning\n  const outerRingAvatars = avatars.filter(a => a.ring === 'outer');\n  const innerRingAvatars = avatars.filter(a => a.ring === 'inner');\n\n  // State to hold the active connections\n  const [activeConnections, setActiveConnections] = useState<Connection[]>([]);\n\n  // Pre-calculate all avatar positions and store them in a map for easy lookup\n  const allAvatarPositions: AvatarPositions = useMemo(() => {\n    // Function to calculate the absolute center position of an avatar\n    // relative to the top-left of the container.\n    const getAvatarAbsolutePosition = (index: number, total: number, radius: number, startAngleOffset: number = 0): Position => {\n      const angle = startAngleOffset + (index / total) * 2 * Math.PI; // Angle in radians, with offset\n      const x = radius * Math.cos(angle);\n      const y = radius * Math.sin(angle);\n      // Add center coordinates to center the coordinates within the container\n      return { cx: dimensions.centerX + x, cy: dimensions.centerY + y };\n    };\n\n    const positions: AvatarPositions = {};\n    outerRingAvatars.forEach((avatar, index) => {\n      positions[avatar.id] = getAvatarAbsolutePosition(index, outerRingAvatars.length, dimensions.outerRadius, Math.PI / 2);\n    });\n    innerRingAvatars.forEach((avatar, index) => {\n      positions[avatar.id] = getAvatarAbsolutePosition(index, innerRingAvatars.length, dimensions.innerRadius, Math.PI / 3);\n    });\n    // Add the center image's position\n    positions['center'] = { cx: dimensions.centerX, cy: dimensions.centerY } as Position;\n    return positions;\n  }, [dimensions, outerRingAvatars, innerRingAvatars]);\n\n  // Get all possible connection points (avatar IDs and 'center')\n  const allConnectionPoints: (number | 'center')[] = useMemo(() =>\n    [...avatars.map(a => a.id), 'center'],\n    [avatars]\n  );\n\n  // Helper function to get a random element from an array\n  const getRandomElement = <T,>(arr: T[]): T => arr[Math.floor(Math.random() * arr.length)];\n\n  // Effect to generate random connections periodically\n  useEffect(() => {\n    const interval = setInterval(() => {\n      let from: number | 'center';\n      let to: number | 'center';\n      let newConnection: Connection | null = null;\n      let attempts = 0;\n      const maxAttempts = 10; // Prevent infinite loops if points are exhausted\n\n      do {\n        from = getRandomElement(allConnectionPoints);\n        to = getRandomElement(allConnectionPoints);\n        attempts++;\n        if (from !== to) {\n          // Found a valid connection\n          newConnection = {\n            from,\n            to,\n            color: getRandomElement(['blue', 'green', 'purple', 'yellow', 'red', 'orange', 'pink', 'cyan', 'white'])\n          };\n          break;\n        }\n      } while (attempts < maxAttempts);\n\n      setActiveConnections(newConnection ? [newConnection] : []); // Only one connection at a time\n    }, 4000); // Update connections every 4 seconds (3s animation + 1s pause)\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(interval);\n  }, [allConnectionPoints]); // Include allConnectionPoints dependency\n\n  // Helper function to check if an ID is part of the current active connection\n  const isCurrentlyConnected = (id: number | 'center'): boolean => {\n    return activeConnections.some(conn => conn.from === id || conn.to === id);\n  };\n\n  return (\n    // Main container for the visualization, setting background and centering content\n    <div className=\"flex items-center justify-center p-2 sm:p-4 overflow-hidden font-sans w-full h-full min-h-[400px]\">\n      {/* Relative container for the network elements to position them absolutely */}\n      <div \n        className=\"relative\"\n        style={{ \n          width: `${dimensions.containerSize}px`, \n          height: `${dimensions.containerSize}px`,\n          maxWidth: '100vw',\n          maxHeight: '100vh'\n        }}\n      >\n        {/* Outer dashed circle */}\n        <div \n          className=\"absolute border-2 border-dashed border-purple-400/50 rounded-full top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n          style={{\n            width: `${dimensions.outerRadius * 2}px`,\n            height: `${dimensions.outerRadius * 2}px`\n          }}\n        ></div>\n\n        {/* Inner dashed circle */}\n        <div \n          className=\"absolute border-2 border-dashed border-purple-400/50 rounded-full top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n          style={{\n            width: `${dimensions.innerRadius * 2}px`,\n            height: `${dimensions.innerRadius * 2}px`\n          }}\n        ></div>\n\n        {/* Center image */}\n        <div \n          className=\"absolute shadow-lg z-10 group-center cursor-pointer\"\n          style={{\n            left: `${dimensions.centerX}px`,\n            top: `${dimensions.centerY}px`,\n            transform: `translate(-50%, -50%)` // Center the image element precisely\n          }}\n        >\n          <img\n            src=\"https://i.pinimg.com/736x/5c/62/7a/5c627a3458297ee0c587328e5f7061fc.jpg\"\n            alt=\"Center Image\"\n            className=\"rounded-full object-cover border-4 border-white\"\n            style={{\n              width: `${dimensions.centerImageSize}px`,\n              height: `${dimensions.centerImageSize}px`\n            }}\n            onError={(e) => {\n              const target = e.target as HTMLImageElement;\n              target.style.display = \"none\";\n              const parent = target.parentElement;\n              if (parent) {\n                parent.innerHTML = `<span class=\"text-2xl text-white\">⭐</span>`; // Fallback to a star emoji\n              }\n            }}\n          />\n\n          {/* Tooltip for Center Image */}\n          <div className={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n              ${isCurrentlyConnected('center')\n                ? 'opacity-100' // Visible if connected\n                : 'opacity-0 group-center:hover:opacity-100' // Otherwise, visible on hover\n              }\n          `}>\n            Center Hub\n            {/* Tooltip arrow */}\n            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n          </div>\n        </div>\n\n        {/* SVG for drawing animated connection lines */}\n        <svg className=\"absolute inset-0 w-full h-full z-0\">\n          <defs>\n            {/* Filter for line glow effect */}\n            <filter id=\"lineGlow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n              <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"2\" result=\"blur\" />\n              <feComponentTransfer in=\"blur\" result=\"glow\">\n                {/* Adjusts alpha for glow intensity */}\n                <feFuncA type=\"linear\" slope=\"0.5\" intercept=\"0\" />\n              </feComponentTransfer>\n              <feMerge>\n                <feMergeNode in=\"glow\"/>\n                <feMergeNode in=\"SourceGraphic\"/>\n              </feMerge>\n            </filter>\n          </defs>\n          <AnimatePresence>\n            {activeConnections.map((conn) => {\n              const fromPos = allAvatarPositions[conn.from as number];\n              const toPos = allAvatarPositions[conn.to as number];\n\n              if (!fromPos || !toPos) return null; // Skip if a position is not found\n\n              // Calculate line length for stroke-dasharray\n              const dx = toPos.cx - fromPos.cx;\n              const dy = toPos.cy - fromPos.cy;\n              const lineLength = Math.sqrt(dx * dx + dy * dy);\n\n              return (\n                <motion.line\n                  key={`${conn.from}-${conn.to}`} // Key for Framer Motion to track unique lines\n                  x1={fromPos.cx}\n                  y1={fromPos.cy}\n                  x2={toPos.cx}\n                  y2={toPos.cy}\n                  stroke={conn.color.includes('blue') ? '#3b82f6' : \n                         conn.color.includes('green') ? '#10b981' :\n                         conn.color.includes('purple') ? '#8b5cf6' :\n                         conn.color.includes('yellow') ? '#f59e0b' :\n                         conn.color.includes('red') ? '#ef4444' :\n                         conn.color.includes('orange') ? '#f97316' :\n                         conn.color.includes('pink') ? '#ec4899' :\n                         conn.color.includes('cyan') ? '#06b6d4' :\n                         conn.color.includes('white') ? '#ffffff' : '#3b82f6'}\n                  strokeWidth={dimensions.strokeWidth}\n                  strokeOpacity=\"0.8\"\n                  fill=\"none\"\n                  initial={{ strokeDasharray: lineLength, strokeDashoffset: lineLength }}\n                  animate={{ strokeDashoffset: 0 }}\n                  transition={{ duration: 3, ease: \"linear\" }}\n                  filter=\"url(#lineGlow)\"\n                />\n              );\n            })}\n          </AnimatePresence>\n        </svg>\n\n        {/* Render outer ring avatars */}\n        {outerRingAvatars.map((avatar) => {\n          const { cx, cy } = allAvatarPositions[avatar.id]; // Use pre-calculated positions\n          // Check if this avatar is currently involved in a connection\n          const isActive = isCurrentlyConnected(avatar.id);\n\n          return (\n            <div\n              key={avatar.id}\n              className=\"absolute\"\n              style={{\n                left: `${cx}px`,\n                top: `${cy}px`,\n                transform: `translate(-50%, -50%)` // Center the avatar element precisely\n              }}\n            >\n              {/* Avatar container with hover effects */}\n              <div\n                className={`bg-white rounded-full flex items-center justify-center shadow-lg hover:scale-105 transition-transform duration-200 cursor-pointer group-outer-${avatar.id} relative`}\n                style={{\n                  width: `${dimensions.outerAvatarSize}px`,\n                  height: `${dimensions.outerAvatarSize}px`\n                }}\n              >\n                {/* Inner circle for the avatar image/emoji */}\n                <div\n                  className=\"rounded-full relative overflow-hidden flex items-center justify-center\"\n                  style={{\n                    width: `${dimensions.outerImageSize}px`,\n                    height: `${dimensions.outerImageSize}px`\n                  }}\n                >\n                  {/* Avatar image with error fallback to emoji */}\n                  <img\n                    src={avatar.image || \"/placeholder.svg\"}\n                    alt={avatar.name}\n                    className=\"w-full h-full object-cover rounded-full\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = \"none\"; // Hide the broken image\n                      const parent = target.parentElement;\n                      if (parent) {\n                        // Fallback to a generic emoji if image fails to load\n                        parent.innerHTML = `<span class=\"text-2xl\">👤</span>`;\n                      }\n                    }}\n                  />\n                </div>\n\n                {/* Tooltip with avatar name */}\n                <div className={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n                    ${isActive\n                      ? 'opacity-100' // Visible if connected\n                      : 'opacity-0 group-outer-${avatar.id}:hover:opacity-100' // Otherwise, visible on hover\n                    }\n                `}>\n                  {avatar.name}\n                  {/* Tooltip arrow */}\n                  <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n\n        {/* Render inner ring avatars */}\n        {innerRingAvatars.map((avatar) => {\n          const { cx, cy } = allAvatarPositions[avatar.id]; // Use pre-calculated positions\n          // Check if this avatar is currently involved in a connection\n          const isActive = isCurrentlyConnected(avatar.id);\n\n          return (\n            <div\n              key={avatar.id}\n              className=\"absolute\"\n              style={{\n                left: `${cx}px`,\n                top: `${cy}px`,\n                transform: `translate(-50%, -50%)` // Center the avatar element precisely\n              }}\n            >\n              {/* Avatar container with hover effects */}\n              <div\n                className={`bg-white rounded-full flex items-center justify-center shadow-lg hover:scale-105 transition-transform duration-200 cursor-pointer group-inner-${avatar.id} relative`}\n                style={{\n                  width: `${dimensions.innerAvatarSize}px`,\n                  height: `${dimensions.innerAvatarSize}px`\n                }}\n              >\n                {/* Inner circle for the avatar image/emoji */}\n                <div\n                  className=\"rounded-full relative overflow-hidden flex items-center justify-center\"\n                  style={{\n                    width: `${dimensions.innerImageSize}px`,\n                    height: `${dimensions.innerImageSize}px`\n                  }}\n                >\n                  {/* Avatar image with error fallback to emoji */}\n                  <img\n                    src={avatar.image || \"/placeholder.svg\"}\n                    alt={avatar.name}\n                    className=\"w-full h-full object-cover rounded-full\"\n                    onError={(e) => {\n                      const target = e.target as HTMLImageElement;\n                      target.style.display = \"none\"; // Hide the broken image\n                      const parent = target.parentElement;\n                      if (parent) {\n                        // Fallback to a generic emoji if image fails to load\n                        parent.innerHTML = `<span class=\"text-2xl\">👤</span>`;\n                      }\n                    }}\n                  />\n                </div>\n\n                {/* Tooltip with avatar name */}\n                 <div className={`absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full font-medium text-gray-800 shadow-lg transition-opacity duration-200 pointer-events-none whitespace-nowrap z-20 ${dimensions.tooltipTextSize}\n                    ${isActive\n                      ? 'opacity-100' // Visible if connected\n                      : 'opacity-0 group-inner-${avatar.id}:hover:opacity-100' // Otherwise, visible on hover\n                    }\n                `}>\n                  {avatar.name}\n                  {/* Tooltip arrow */}\n                  <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-white/90\"></div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default NetworkVisualization;",
      "type": "registry:ui"
    }
  ]
}