{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "retro-button",
  "title": "Retro Button",
  "description": "A minimalistic retro button component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "retro-button.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n  return classes.filter(Boolean).join(\" \");\n};\n\nconst buttonVariants = cva(\n  \"font-sans transition-all outline-none cursor-pointer duration-200 font-medium flex items-center justify-center disabled:cursor-not-allowed disabled:opacity-60\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-[#00ff84] text-[#000000] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#00ff84] dark:text-[#000000] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n        secondary:\n          \"bg-[#374151] text-[#ffffff] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#374151] dark:text-[#ffffff] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n        outline:\n          \"bg-transparent text-[#00ff84] border-2 border-[#00ff84] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 hover:bg-[#00ff84] hover:text-[#000000] disabled:hover:bg-transparent disabled:hover:text-[#00ff84] disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-transparent dark:text-[#00ff84] dark:border-[#00ff84] dark:shadow-[4px_4px_0px_0px_#ffffff] dark:hover:bg-[#00ff84] dark:hover:text-[#000000]\",\n        link: \"bg-transparent text-[#00ff84] hover:underline dark:text-[#00ff84]\",\n      },\n      size: {\n        sm: \"px-4 py-2 text-sm\",\n        md: \"px-6 py-2.5 text-base\",\n        lg: \"px-8 py-4 text-lg\",\n        icon: \"h-12 w-12\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  }\n);\n\nexport interface IButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  loading?: boolean;\n}\n\nconst Spinner: React.FC = () => (\n  <svg\n    className=\"animate-spin h-6 w-6 text-current\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n  >\n    <circle\n      className=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n    ></circle>\n    <path\n      className=\"opacity-75\"\n      fill=\"currentColor\"\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    ></path>\n  </svg>\n);\n\nconst Button = React.forwardRef<HTMLButtonElement, IButtonProps>(\n  ({ className, variant, size, children, loading = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={loading || props.disabled}\n        {...props}\n      >\n        {loading ? <Spinner /> : children}\n      </button>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport default Button;\n",
      "type": "registry:ui"
    },
    {
      "path": "retro-btn.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n  return classes.filter(Boolean).join(\" \");\n};\n\nconst buttonVariants = cva(\n  \"font-sans transition-all outline-none cursor-pointer duration-200 font-medium flex items-center justify-center disabled:cursor-not-allowed disabled:opacity-60\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-[#00ff84] text-[#000000] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#00ff84] dark:text-[#000000] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n        secondary:\n          \"bg-[#374151] text-[#ffffff] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#374151] dark:text-[#ffffff] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n        outline:\n          \"bg-transparent text-[#00ff84] border-2 border-[#00ff84] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 hover:bg-[#00ff84] hover:text-[#000000] disabled:hover:bg-transparent disabled:hover:text-[#00ff84] disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-transparent dark:text-[#00ff84] dark:border-[#00ff84] dark:shadow-[4px_4px_0px_0px_#ffffff] dark:hover:bg-[#00ff84] dark:hover:text-[#000000]\",\n        link: \"bg-transparent text-[#00ff84] hover:underline dark:text-[#00ff84]\",\n      },\n      size: {\n        sm: \"px-4 py-2 text-sm\",\n        md: \"px-6 py-2.5 text-base\",\n        lg: \"px-8 py-4 text-lg\",\n        icon: \"h-12 w-12\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  }\n);\n\nexport interface IButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  loading?: boolean;\n}\n\nconst Spinner: React.FC = () => (\n  <svg\n    className=\"animate-spin h-6 w-6 text-current\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n  >\n    <circle\n      className=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n    ></circle>\n    <path\n      className=\"opacity-75\"\n      fill=\"currentColor\"\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    ></path>\n  </svg>\n);\n\nconst Button = React.forwardRef<HTMLButtonElement, IButtonProps>(\n  ({ className, variant, size, children, loading = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={loading || props.disabled}\n        {...props}\n      >\n        {loading ? <Spinner /> : children}\n      </button>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport default Button;\n",
      "type": "registry:ui"
    },
    {
      "path": "retro-view.tsx",
      "content": "\"use client\";\nimport React from \"react\";\nimport DefaultButtons from \"./components/DefaultButtons\";\nimport SecondaryButtons from \"./components/SecondaryButtons\";\nimport OutlineButtons from \"./components/OutlineButtons\";\nimport IconButtons from \"./components/IconButtons\";\nimport LinkButtons from \"./components/LinkButtons\";\nimport LoadingButtons from \"./components/LoadingButtons\";\nimport ButtonsWithIcons from \"./components/ButtonsWithIcons\";\nimport FormButtons from \"./components/FormButtons\";\nimport SizeComparison from \"./components/SizeComparison\";\nimport InteractiveDemo from \"./components/InteractiveDemo\";\n\nexport default function RetroButtonView() {\n  // Section Title Helper Component\n  interface SectionTitleProps {\n    title: string;\n    description?: string;\n  }\n\n  const SectionTitle: React.FC<SectionTitleProps> = ({\n    title,\n    description,\n  }) => (\n    <div className=\"mb-8 text-center\">\n      <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n        {title}\n      </h2>\n      {description && (\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm max-w-2xl mx-auto\">\n          {description}\n        </p>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"py-12 px-4\">\n      <div className=\"max-w-6xl mx-auto space-y-16\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n            Retro Button Components\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n            A comprehensive showcase of retro-styled button components with hard\n            shadows, vibrant colors, and smooth hover animations. Perfect for\n            modern applications with a nostalgic twist.\n          </p>\n        </div>\n\n        {/* Default Buttons */}\n        <section>\n          <SectionTitle\n            title=\"Default Buttons\"\n            description=\"Primary action buttons with the signature retro styling and hard shadow effects\"\n          />\n          <DefaultButtons />\n        </section>\n\n        {/* Secondary Buttons */}\n        <section>\n          <SectionTitle\n            title=\"Secondary Buttons\"\n            description=\"Alternative styling for secondary actions with gray background\"\n          />\n          <SecondaryButtons />\n        </section>\n\n        {/* Outline Buttons */}\n        <section>\n          <SectionTitle\n            title=\"Outline Buttons\"\n            description=\"Transparent buttons with colored borders that fill on hover\"\n          />\n          <OutlineButtons />\n        </section>\n\n        {/* Icon Buttons */}\n        <section>\n          <SectionTitle\n            title=\"Icon Buttons\"\n            description=\"Square buttons designed specifically for icons and single actions\"\n          />\n          <IconButtons />\n        </section>\n\n        {/* Link Buttons */}\n        <section>\n          <SectionTitle\n            title=\"Link Buttons\"\n            description=\"Minimal styling for text-based actions and navigation\"\n          />\n          <LinkButtons />\n        </section>\n\n        {/* Loading States */}\n        <section>\n          <SectionTitle\n            title=\"Loading States\"\n            description=\"Interactive buttons with loading spinners and disabled states during async operations\"\n          />\n          <LoadingButtons />\n        </section>\n\n        {/* Button with Icons and Text */}\n        <section>\n          <SectionTitle\n            title=\"Buttons with Icons\"\n            description=\"Combining icons with text for enhanced user experience and visual clarity\"\n          />\n          <ButtonsWithIcons />\n        </section>\n\n        {/* Form Buttons */}\n        <section>\n          <SectionTitle\n            title=\"Form Actions\"\n            description=\"Common button combinations used in forms and dialogs\"\n          />\n          <FormButtons />\n        </section>\n\n        {/* Size Comparison */}\n        <section>\n          <SectionTitle\n            title=\"Size Comparison\"\n            description=\"All available button sizes side by side for easy comparison\"\n          />\n          <SizeComparison />\n        </section>\n\n        {/* Interactive Demo */}\n        <section>\n          <SectionTitle\n            title=\"Interactive Demo\"\n            description=\"Try clicking these buttons to see the retro hover and click animations in action\"\n          />\n          <InteractiveDemo />\n        </section>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}