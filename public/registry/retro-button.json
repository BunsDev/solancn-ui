{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "retro-button",
  "title": "Retro Button",
  "description": "A minimalistic retro button component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "retro-button.tsx",
      "content": "\"use client\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport React from \"react\";\n\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n\treturn classes.filter(Boolean).join(\" \");\n};\n\nconst buttonVariants = cva(\n\t\"font-sans transition-all outline-none cursor-pointer duration-200 font-medium flex items-center justify-center disabled:cursor-not-allowed disabled:opacity-60\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault:\n\t\t\t\t\t\"bg-[#00ff84] text-[#000000] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#00ff84] dark:text-[#000000] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n\t\t\t\tsecondary:\n\t\t\t\t\t\"bg-[#374151] text-[#ffffff] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#374151] dark:text-[#ffffff] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n\t\t\t\toutline:\n\t\t\t\t\t\"bg-transparent text-[#00ff84] border-2 border-[#00ff84] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 hover:bg-[#00ff84] hover:text-[#000000] disabled:hover:bg-transparent disabled:hover:text-[#00ff84] disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-transparent dark:text-[#00ff84] dark:border-[#00ff84] dark:shadow-[4px_4px_0px_0px_#ffffff] dark:hover:bg-[#00ff84] dark:hover:text-[#000000]\",\n\t\t\t\tlink: \"bg-transparent text-[#00ff84] hover:underline dark:text-[#00ff84]\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tsm: \"px-4 py-2 text-sm\",\n\t\t\t\tmd: \"px-6 py-2.5 text-base\",\n\t\t\t\tlg: \"px-8 py-4 text-lg\",\n\t\t\t\ticon: \"h-12 w-12\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"md\",\n\t\t},\n\t},\n);\n\nexport interface IButtonProps\n\textends React.ButtonHTMLAttributes<HTMLButtonElement>,\n\t\tVariantProps<typeof buttonVariants> {\n\tloading?: boolean;\n}\n\nconst Spinner: React.FC = () => (\n\t<svg\n\t\tclassName=\"animate-spin h-6 w-6 text-current\"\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\tfill=\"none\"\n\t\tviewBox=\"0 0 24 24\"\n\t>\n\t\t<circle\n\t\t\tclassName=\"opacity-25\"\n\t\t\tcx=\"12\"\n\t\t\tcy=\"12\"\n\t\t\tr=\"10\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"4\"\n\t\t></circle>\n\t\t<path\n\t\t\tclassName=\"opacity-75\"\n\t\t\tfill=\"currentColor\"\n\t\t\td=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n\t\t></path>\n\t</svg>\n);\n\nconst Button = React.forwardRef<HTMLButtonElement, IButtonProps>(\n\t({ className, variant, size, children, loading = false, ...props }, ref) => {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tclassName={cn(buttonVariants({ variant, size, className }))}\n\t\t\t\tref={ref}\n\t\t\t\tdisabled={loading || props.disabled}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{loading ? <Spinner /> : children}\n\t\t\t</button>\n\t\t);\n\t},\n);\nButton.displayName = \"Button\";\n\nexport default Button;\n",
      "type": "registry:ui"
    },
    {
      "path": "retro-btn.tsx",
      "content": "\"use client\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport React from \"react\";\n\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n\treturn classes.filter(Boolean).join(\" \");\n};\n\nconst buttonVariants = cva(\n\t\"font-sans transition-all outline-none cursor-pointer duration-200 font-medium flex items-center justify-center disabled:cursor-not-allowed disabled:opacity-60\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault:\n\t\t\t\t\t\"bg-[#00ff84] text-[#000000] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#00ff84] dark:text-[#000000] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n\t\t\t\tsecondary:\n\t\t\t\t\t\"bg-[#374151] text-[#ffffff] border-2 border-[#000000] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-[#374151] dark:text-[#ffffff] dark:border-[#000000] dark:shadow-[4px_4px_0px_0px_#ffffff]\",\n\t\t\t\toutline:\n\t\t\t\t\t\"bg-transparent text-[#00ff84] border-2 border-[#00ff84] shadow-[4px_4px_0px_0px_#000000] hover:shadow-none hover:translate-x-1 hover:translate-y-1 hover:bg-[#00ff84] hover:text-[#000000] disabled:hover:bg-transparent disabled:hover:text-[#00ff84] disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0px_0px_#000000] dark:bg-transparent dark:text-[#00ff84] dark:border-[#00ff84] dark:shadow-[4px_4px_0px_0px_#ffffff] dark:hover:bg-[#00ff84] dark:hover:text-[#000000]\",\n\t\t\t\tlink: \"bg-transparent text-[#00ff84] hover:underline dark:text-[#00ff84]\",\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tsm: \"px-4 py-2 text-sm\",\n\t\t\t\tmd: \"px-6 py-2.5 text-base\",\n\t\t\t\tlg: \"px-8 py-4 text-lg\",\n\t\t\t\ticon: \"h-12 w-12\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t\tsize: \"md\",\n\t\t},\n\t},\n);\n\nexport interface IButtonProps\n\textends React.ButtonHTMLAttributes<HTMLButtonElement>,\n\t\tVariantProps<typeof buttonVariants> {\n\tloading?: boolean;\n}\n\nconst Spinner: React.FC = () => (\n\t<svg\n\t\tclassName=\"animate-spin h-6 w-6 text-current\"\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\tfill=\"none\"\n\t\tviewBox=\"0 0 24 24\"\n\t>\n\t\t<circle\n\t\t\tclassName=\"opacity-25\"\n\t\t\tcx=\"12\"\n\t\t\tcy=\"12\"\n\t\t\tr=\"10\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"4\"\n\t\t></circle>\n\t\t<path\n\t\t\tclassName=\"opacity-75\"\n\t\t\tfill=\"currentColor\"\n\t\t\td=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n\t\t></path>\n\t</svg>\n);\n\nconst Button = React.forwardRef<HTMLButtonElement, IButtonProps>(\n\t({ className, variant, size, children, loading = false, ...props }, ref) => {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tclassName={cn(buttonVariants({ variant, size, className }))}\n\t\t\t\tref={ref}\n\t\t\t\tdisabled={loading || props.disabled}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{loading ? <Spinner /> : children}\n\t\t\t</button>\n\t\t);\n\t},\n);\nButton.displayName = \"Button\";\n\nexport default Button;\n",
      "type": "registry:ui"
    },
    {
      "path": "retro-view.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport ButtonsWithIcons from \"./components/ButtonsWithIcons\";\nimport DefaultButtons from \"./components/DefaultButtons\";\nimport FormButtons from \"./components/FormButtons\";\nimport IconButtons from \"./components/IconButtons\";\nimport InteractiveDemo from \"./components/InteractiveDemo\";\nimport LinkButtons from \"./components/LinkButtons\";\nimport LoadingButtons from \"./components/LoadingButtons\";\nimport OutlineButtons from \"./components/OutlineButtons\";\nimport SecondaryButtons from \"./components/SecondaryButtons\";\nimport SizeComparison from \"./components/SizeComparison\";\n\nexport default function RetroButtonView() {\n\t// Section Title Helper Component\n\tinterface SectionTitleProps {\n\t\ttitle: string;\n\t\tdescription?: string;\n\t}\n\n\tconst SectionTitle: React.FC<SectionTitleProps> = ({\n\t\ttitle,\n\t\tdescription,\n\t}) => (\n\t\t<div className=\"mb-8 text-center\">\n\t\t\t<h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n\t\t\t\t{title}\n\t\t\t</h2>\n\t\t\t{description && (\n\t\t\t\t<p className=\"text-gray-600 dark:text-gray-400 text-sm max-w-2xl mx-auto\">\n\t\t\t\t\t{description}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<div className=\"py-12 px-4\">\n\t\t\t<div className=\"max-w-6xl mx-auto space-y-16\">\n\t\t\t\t{/* Header */}\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<h1 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n\t\t\t\t\t\tRetro Button Components\n\t\t\t\t\t</h1>\n\t\t\t\t\t<p className=\"text-lg text-gray-600 dark:text-gray-400 max-w-3xl mx-auto\">\n\t\t\t\t\t\tA comprehensive showcase of retro-styled button components with hard\n\t\t\t\t\t\tshadows, vibrant colors, and smooth hover animations. Perfect for\n\t\t\t\t\t\tmodern applications with a nostalgic twist.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Default Buttons */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Default Buttons\"\n\t\t\t\t\t\tdescription=\"Primary action buttons with the signature retro styling and hard shadow effects\"\n\t\t\t\t\t/>\n\t\t\t\t\t<DefaultButtons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Secondary Buttons */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Secondary Buttons\"\n\t\t\t\t\t\tdescription=\"Alternative styling for secondary actions with gray background\"\n\t\t\t\t\t/>\n\t\t\t\t\t<SecondaryButtons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Outline Buttons */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Outline Buttons\"\n\t\t\t\t\t\tdescription=\"Transparent buttons with colored borders that fill on hover\"\n\t\t\t\t\t/>\n\t\t\t\t\t<OutlineButtons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Icon Buttons */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Icon Buttons\"\n\t\t\t\t\t\tdescription=\"Square buttons designed specifically for icons and single actions\"\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButtons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Link Buttons */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Link Buttons\"\n\t\t\t\t\t\tdescription=\"Minimal styling for text-based actions and navigation\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LinkButtons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Loading States */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Loading States\"\n\t\t\t\t\t\tdescription=\"Interactive buttons with loading spinners and disabled states during async operations\"\n\t\t\t\t\t/>\n\t\t\t\t\t<LoadingButtons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Button with Icons and Text */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Buttons with Icons\"\n\t\t\t\t\t\tdescription=\"Combining icons with text for enhanced user experience and visual clarity\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ButtonsWithIcons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Form Buttons */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Form Actions\"\n\t\t\t\t\t\tdescription=\"Common button combinations used in forms and dialogs\"\n\t\t\t\t\t/>\n\t\t\t\t\t<FormButtons />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Size Comparison */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Size Comparison\"\n\t\t\t\t\t\tdescription=\"All available button sizes side by side for easy comparison\"\n\t\t\t\t\t/>\n\t\t\t\t\t<SizeComparison />\n\t\t\t\t</section>\n\n\t\t\t\t{/* Interactive Demo */}\n\t\t\t\t<section>\n\t\t\t\t\t<SectionTitle\n\t\t\t\t\t\ttitle=\"Interactive Demo\"\n\t\t\t\t\t\tdescription=\"Try clicking these buttons to see the retro hover and click animations in action\"\n\t\t\t\t\t/>\n\t\t\t\t\t<InteractiveDemo />\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}