{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown",
  "title": "Dropdown",
  "description": "A minimalistic dropdown component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:component",
  "dependencies": [],
  "files": [
    {
      "path": "dropdown.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { type ReactNode, useEffect, useRef, useState } from \"react\";\n\nconst User = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n\t\t<circle cx=\"12\" cy=\"7\" r=\"4\" />\n\t</svg>\n);\n\nconst Community = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\" />\n\t</svg>\n);\n\nconst Subscription = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n\t\t<line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n\t</svg>\n);\n\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n\t\t<path d=\"M4 6h8\" />\n\t\t<path d=\"M16 6h4\" />\n\t\t<path d=\"M10 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n\t\t<path d=\"M4 18h4\" />\n\t\t<path d=\"M12 18h8\" />\n\t\t<path d=\"M10 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n\t\t<path d=\"M4 12h4\" />\n\t\t<path d=\"M12 12h8\" />\n\t</svg>\n);\n\nconst HelpCenter = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<circle cx=\"12\" cy=\"12\" r=\"10\" />\n\t\t<path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\n\t\t<line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\" />\n\t</svg>\n);\n\nconst SignOut = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n\t\t<polyline points=\"16 17 21 12 16 7\" />\n\t\t<line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\n\t</svg>\n);\n\ninterface DropdownMenuProps {\n\tchildren: ReactNode;\n\ttrigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst dropdownRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\tdropdownRef.current &&\n\t\t\t\t!dropdownRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, []);\n\n\tconst handleTriggerClick = (e: React.MouseEvent) => {\n\t\te.stopPropagation();\n\t\tsetIsOpen(!isOpen);\n\t};\n\n\treturn (\n\t\t<div className=\"relative inline-block text-left\" ref={dropdownRef}>\n\t\t\t<div onClick={handleTriggerClick} className=\"cursor-pointer\">\n\t\t\t\t{trigger}\n\t\t\t</div>\n\t\t\t{isOpen && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"origin-top-right absolute right-0 mt-2 w-64 rounded-2xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-2\"\n\t\t\t\t\trole=\"menu\"\n\t\t\t\t\taria-orientation=\"vertical\"\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\ninterface DropdownMenuItemProps {\n\tchildren: ReactNode;\n\tonClick?: () => void;\n\tactive?: boolean;\n}\n\nconst DropdownMenuItem = ({\n\tchildren,\n\tonClick,\n\tactive = false,\n}: DropdownMenuItemProps) => (\n\t<a\n\t\thref=\"#\"\n\t\tonClick={(e: React.MouseEvent) => {\n\t\t\te.preventDefault();\n\t\t\tif (onClick) onClick();\n\t\t}}\n\t\tclassName={`\n      text-zinc-800 dark:text-zinc-200 font-medium group flex items-center \n      px-3 py-2.5 text-sm rounded-lg transition-colors duration-150\n      ${\n\t\t\t\tactive\n\t\t\t\t\t? \"bg-zinc-100 dark:bg-zinc-800\"\n\t\t\t\t\t: \"hover:bg-zinc-100 dark:hover:bg-zinc-800\"\n\t\t\t}\n    `}\n\t\trole=\"menuitem\"\n\t>\n\t\t{children}\n\t</a>\n);\n\nconst DropdownMenuSeparator = () => (\n\t<div className=\"my-2 h-px bg-zinc-200 dark:bg-zinc-700\" />\n);\n\nexport default function Dropdown() {\n\treturn (\n\t\t<div className=\" flex items-center justify-center font-sans p-8\">\n\t\t\t<DropdownMenu\n\t\t\t\ttrigger={\n\t\t\t\t\t<button className=\"px-5 py-2 text-sm font-semibold text-zinc-800 dark:text-zinc-100 bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-lg shadow-sm hover:bg-zinc-100 dark:hover:bg-zinc-700 transition-colors\">\n\t\t\t\t\t\tOpen Menu\n\t\t\t\t\t</button>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t<DropdownMenuItem\n\t\t\t\t\t\tonClick={() => console.log(\"Profile clicked\")}\n\t\t\t\t\t\tactive={true}\n\t\t\t\t\t>\n\t\t\t\t\t\t<User className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Profile</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Community clicked\")}>\n\t\t\t\t\t\t<Community className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Community</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Subscription clicked\")}>\n\t\t\t\t\t\t<Subscription className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Subscription</span>\n\t\t\t\t\t\t<span className=\"ml-auto text-xs font-bold text-white bg-gradient-to-r from-pink-500 to-purple-500 rounded-full px-2 py-0.5\">\n\t\t\t\t\t\t\tPRO\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Settings clicked\")}>\n\t\t\t\t\t\t<Settings className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Settings</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</div>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Help Center clicked\")}>\n\t\t\t\t\t\t<HelpCenter className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Help center</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Sign Out clicked\")}>\n\t\t\t\t\t\t<SignOut className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Sign out</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</div>\n\t\t\t</DropdownMenu>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "notification-dropdown.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { type ReactNode, useEffect, useRef, useState } from \"react\";\n\nconst Bell = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"20\"\n\t\theight=\"20\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9\" />\n\t\t<path d=\"M13.73 21a2 2 0 0 1-3.46 0\" />\n\t</svg>\n);\n\nconst Check = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<polyline points=\"20 6 9 17 4 12\" />\n\t</svg>\n);\n\nconst X = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n\t\t<line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n\t</svg>\n);\n\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<circle cx=\"12\" cy=\"12\" r=\"3\" />\n\t\t<path d=\"M12 1v6m0 6v6\" />\n\t\t<path d=\"M1 12h6m6 0h6\" />\n\t</svg>\n);\n\ninterface DropdownMenuProps {\n\tchildren: ReactNode;\n\ttrigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst dropdownRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\tdropdownRef.current &&\n\t\t\t\t!dropdownRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, []);\n\n\tconst handleTriggerClick = (e: React.MouseEvent) => {\n\t\te.stopPropagation();\n\t\tsetIsOpen(!isOpen);\n\t};\n\n\treturn (\n\t\t<div className=\"relative inline-block text-left\" ref={dropdownRef}>\n\t\t\t<div onClick={handleTriggerClick} className=\"cursor-pointer\">\n\t\t\t\t{trigger}\n\t\t\t</div>\n\t\t\t{isOpen && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"origin-top-right absolute right-0 mt-2 w-80 rounded-xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95\"\n\t\t\t\t\trole=\"menu\"\n\t\t\t\t\taria-orientation=\"vertical\"\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\ninterface NotificationItemProps {\n\ttitle: string;\n\tmessage: string;\n\ttime: string;\n\tunread?: boolean;\n\tonMarkRead?: () => void;\n\tonDismiss?: () => void;\n}\n\nconst NotificationItem = ({\n\ttitle,\n\tmessage,\n\ttime,\n\tunread = false,\n\tonMarkRead,\n\tonDismiss,\n}: NotificationItemProps) => (\n\t<div\n\t\tclassName={`p-4 border-b border-zinc-200 dark:border-zinc-700 last:border-b-0 ${unread ? \"bg-blue-50 dark:bg-blue-950/20\" : \"\"}`}\n\t>\n\t\t<div className=\"flex items-start justify-between\">\n\t\t\t<div className=\"flex-1 min-w-0\">\n\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t<h4 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</h4>\n\t\t\t\t\t{unread && <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>}\n\t\t\t\t</div>\n\t\t\t\t<p className=\"text-sm text-zinc-600 dark:text-zinc-400 mt-1\">\n\t\t\t\t\t{message}\n\t\t\t\t</p>\n\t\t\t\t<p className=\"text-xs text-zinc-500 dark:text-zinc-500 mt-2\">{time}</p>\n\t\t\t</div>\n\t\t\t<div className=\"flex items-center space-x-1 ml-2\">\n\t\t\t\t{unread && onMarkRead && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={onMarkRead}\n\t\t\t\t\t\tclassName=\"p-1 text-zinc-400 hover:text-green-600 transition-colors\"\n\t\t\t\t\t\ttitle=\"Mark as read\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Check className=\"w-4 h-4\" />\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t\t{onDismiss && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={onDismiss}\n\t\t\t\t\t\tclassName=\"p-1 text-zinc-400 hover:text-red-600 transition-colors\"\n\t\t\t\t\t\ttitle=\"Dismiss\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<X className=\"w-4 h-4\" />\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\nexport default function NotificationDropdown() {\n\tconst [notifications, setNotifications] = useState([\n\t\t{\n\t\t\tid: 1,\n\t\t\ttitle: \"New message\",\n\t\t\tmessage: \"You have a new message from Sarah\",\n\t\t\ttime: \"2 min ago\",\n\t\t\tunread: true,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttitle: \"System update\",\n\t\t\tmessage: \"Your system has been updated successfully\",\n\t\t\ttime: \"1 hour ago\",\n\t\t\tunread: true,\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\ttitle: \"Payment received\",\n\t\t\tmessage: \"Payment of $99.00 has been processed\",\n\t\t\ttime: \"3 hours ago\",\n\t\t\tunread: false,\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\ttitle: \"Welcome!\",\n\t\t\tmessage: \"Welcome to our platform. Get started with your first project.\",\n\t\t\ttime: \"1 day ago\",\n\t\t\tunread: false,\n\t\t},\n\t]);\n\n\tconst unreadCount = notifications.filter((n) => n.unread).length;\n\n\tconst markAsRead = (id: number) => {\n\t\tsetNotifications((prev) =>\n\t\t\tprev.map((n) => (n.id === id ? { ...n, unread: false } : n)),\n\t\t);\n\t};\n\n\tconst dismissNotification = (id: number) => {\n\t\tsetNotifications((prev) => prev.filter((n) => n.id !== id));\n\t};\n\n\tconst markAllAsRead = () => {\n\t\tsetNotifications((prev) => prev.map((n) => ({ ...n, unread: false })));\n\t};\n\n\treturn (\n\t\t<div className=\"flex items-center justify-center font-sans p-8\">\n\t\t\t<DropdownMenu\n\t\t\t\ttrigger={\n\t\t\t\t\t<button className=\"relative p-2 text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-lg transition-colors\">\n\t\t\t\t\t\t<Bell className=\"w-6 h-6\" />\n\t\t\t\t\t\t{unreadCount > 0 && (\n\t\t\t\t\t\t\t<span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center\">\n\t\t\t\t\t\t\t\t{unreadCount > 9 ? \"9+\" : unreadCount}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div className=\"px-4 py-3 border-b border-zinc-200 dark:border-zinc-700\">\n\t\t\t\t\t<div className=\"flex items-center justify-between\">\n\t\t\t\t\t\t<h3 className=\"text-lg font-semibold text-zinc-900 dark:text-zinc-100\">\n\t\t\t\t\t\t\tNotifications\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t{unreadCount > 0 && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={markAllAsRead}\n\t\t\t\t\t\t\t\tclassName=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tMark all read\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t{unreadCount > 0 && (\n\t\t\t\t\t\t<p className=\"text-sm text-zinc-500 dark:text-zinc-400 mt-1\">\n\t\t\t\t\t\t\tYou have {unreadCount} unread notification\n\t\t\t\t\t\t\t{unreadCount !== 1 ? \"s\" : \"\"}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"max-h-96 overflow-y-auto\">\n\t\t\t\t\t{notifications.length > 0 ? (\n\t\t\t\t\t\tnotifications.map((notification) => (\n\t\t\t\t\t\t\t<NotificationItem\n\t\t\t\t\t\t\t\tkey={notification.id}\n\t\t\t\t\t\t\t\ttitle={notification.title}\n\t\t\t\t\t\t\t\tmessage={notification.message}\n\t\t\t\t\t\t\t\ttime={notification.time}\n\t\t\t\t\t\t\t\tunread={notification.unread}\n\t\t\t\t\t\t\t\tonMarkRead={() => markAsRead(notification.id)}\n\t\t\t\t\t\t\t\tonDismiss={() => dismissNotification(notification.id)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className=\"p-8 text-center\">\n\t\t\t\t\t\t\t<Bell className=\"w-12 h-12 text-zinc-300 dark:text-zinc-600 mx-auto mb-3\" />\n\t\t\t\t\t\t\t<p className=\"text-zinc-500 dark:text-zinc-400\">\n\t\t\t\t\t\t\t\tNo notifications\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t{notifications.length > 0 && (\n\t\t\t\t\t<div className=\"px-4 py-3 border-t border-zinc-200 dark:border-zinc-700\">\n\t\t\t\t\t\t<button className=\"w-full flex items-center justify-center space-x-2 text-sm text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors\">\n\t\t\t\t\t\t\t<Settings className=\"w-4 h-4\" />\n\t\t\t\t\t\t\t<span>Notification Settings</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</DropdownMenu>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "simple-dropdown.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { type ReactNode, useEffect, useRef, useState } from \"react\";\n\nconst ChevronDown = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<polyline points=\"6 9 12 15 18 9\" />\n\t</svg>\n);\n\nconst File = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n\t\t<polyline points=\"14 2 14 8 20 8\" />\n\t</svg>\n);\n\nconst Edit = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n\t\t<path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n\t</svg>\n);\n\nconst Trash = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<polyline points=\"3 6 5 6 21 6\" />\n\t\t<path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n\t</svg>\n);\n\ninterface DropdownMenuProps {\n\tchildren: ReactNode;\n\ttrigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst dropdownRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\tdropdownRef.current &&\n\t\t\t\t!dropdownRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, []);\n\n\tconst handleTriggerClick = (e: React.MouseEvent) => {\n\t\te.stopPropagation();\n\t\tsetIsOpen(!isOpen);\n\t};\n\n\treturn (\n\t\t<div className=\"relative inline-block text-left\" ref={dropdownRef}>\n\t\t\t<div onClick={handleTriggerClick} className=\"cursor-pointer\">\n\t\t\t\t{trigger}\n\t\t\t</div>\n\t\t\t{isOpen && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"origin-top-right absolute right-0 mt-2 w-48 rounded-lg shadow-lg bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-1\"\n\t\t\t\t\trole=\"menu\"\n\t\t\t\t\taria-orientation=\"vertical\"\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\ninterface DropdownMenuItemProps {\n\tchildren: ReactNode;\n\tonClick?: () => void;\n}\n\nconst DropdownMenuItem = ({ children, onClick }: DropdownMenuItemProps) => (\n\t<a\n\t\thref=\"#\"\n\t\tonClick={(e: React.MouseEvent) => {\n\t\t\te.preventDefault();\n\t\t\tif (onClick) onClick();\n\t\t}}\n\t\tclassName=\"text-zinc-700 dark:text-zinc-300 group flex items-center px-3 py-2 text-sm rounded-md hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors duration-150\"\n\t\trole=\"menuitem\"\n\t>\n\t\t{children}\n\t</a>\n);\n\nconst DropdownMenuSeparator = () => (\n\t<div className=\"my-1 h-px bg-zinc-200 dark:bg-zinc-700\" />\n);\n\nexport default function SimpleDropdown() {\n\treturn (\n\t\t<div className=\"flex items-center justify-center font-sans p-8\">\n\t\t\t<DropdownMenu\n\t\t\t\ttrigger={\n\t\t\t\t\t<button className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 bg-white dark:bg-zinc-800 border border-zinc-300 dark:border-zinc-600 rounded-md shadow-sm hover:bg-zinc-50 dark:hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\">\n\t\t\t\t\t\tActions\n\t\t\t\t\t\t<ChevronDown className=\"ml-2 h-4 w-4\" />\n\t\t\t\t\t</button>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"New file\")}>\n\t\t\t\t\t<File className=\"mr-3 h-4 w-4 text-zinc-500\" />\n\t\t\t\t\tNew File\n\t\t\t\t</DropdownMenuItem>\n\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Edit\")}>\n\t\t\t\t\t<Edit className=\"mr-3 h-4 w-4 text-zinc-500\" />\n\t\t\t\t\tEdit\n\t\t\t\t</DropdownMenuItem>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Delete\")}>\n\t\t\t\t\t<Trash className=\"mr-3 h-4 w-4 text-red-500\" />\n\t\t\t\t\t<span className=\"text-red-600 dark:text-red-400\">Delete</span>\n\t\t\t\t</DropdownMenuItem>\n\t\t\t</DropdownMenu>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "user-profile-dropdown.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { type ReactNode, useEffect, useRef, useState } from \"react\";\n\nconst User = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n\t\t<circle cx=\"12\" cy=\"7\" r=\"4\" />\n\t</svg>\n);\n\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<circle cx=\"12\" cy=\"12\" r=\"3\" />\n\t\t<path d=\"M12 1v6m0 6v6\" />\n\t\t<path d=\"M1 12h6m6 0h6\" />\n\t</svg>\n);\n\nconst CreditCard = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n\t\t<line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n\t</svg>\n);\n\nconst HelpCircle = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<circle cx=\"12\" cy=\"12\" r=\"10\" />\n\t\t<path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\n\t\t<line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\" />\n\t</svg>\n);\n\nconst LogOut = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"16\"\n\t\theight=\"16\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n\t\t<polyline points=\"16 17 21 12 16 7\" />\n\t\t<line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\n\t</svg>\n);\n\ninterface DropdownMenuProps {\n\tchildren: ReactNode;\n\ttrigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst dropdownRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\tdropdownRef.current &&\n\t\t\t\t!dropdownRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, []);\n\n\tconst handleTriggerClick = (e: React.MouseEvent) => {\n\t\te.stopPropagation();\n\t\tsetIsOpen(!isOpen);\n\t};\n\n\treturn (\n\t\t<div className=\"relative inline-block text-left\" ref={dropdownRef}>\n\t\t\t<div onClick={handleTriggerClick} className=\"cursor-pointer\">\n\t\t\t\t{trigger}\n\t\t\t</div>\n\t\t\t{isOpen && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"origin-top-right absolute right-0 mt-2 w-72 rounded-xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-2\"\n\t\t\t\t\trole=\"menu\"\n\t\t\t\t\taria-orientation=\"vertical\"\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\ninterface DropdownMenuItemProps {\n\tchildren: ReactNode;\n\tonClick?: () => void;\n}\n\nconst DropdownMenuItem = ({ children, onClick }: DropdownMenuItemProps) => (\n\t<a\n\t\thref=\"#\"\n\t\tonClick={(e: React.MouseEvent) => {\n\t\t\te.preventDefault();\n\t\t\tif (onClick) onClick();\n\t\t}}\n\t\tclassName=\"text-zinc-700 dark:text-zinc-300 group flex items-center px-3 py-2.5 text-sm rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors duration-150\"\n\t\trole=\"menuitem\"\n\t>\n\t\t{children}\n\t</a>\n);\n\nconst DropdownMenuSeparator = () => (\n\t<div className=\"my-2 h-px bg-zinc-200 dark:bg-zinc-700\" />\n);\n\nexport default function UserProfileDropdown() {\n\treturn (\n\t\t<div className=\"flex items-center justify-center font-sans p-8\">\n\t\t\t<DropdownMenu\n\t\t\t\ttrigger={\n\t\t\t\t\t<button className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors\">\n\t\t\t\t\t\t<div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-sm\">\n\t\t\t\t\t\t\tJD\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"text-left\">\n\t\t\t\t\t\t\t<div className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n\t\t\t\t\t\t\t\tJohn Doe\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n\t\t\t\t\t\t\t\tjohn@example.com\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</button>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div className=\"px-3 py-3 border-b border-zinc-200 dark:border-zinc-700\">\n\t\t\t\t\t<div className=\"flex items-center space-x-3\">\n\t\t\t\t\t\t<div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\n\t\t\t\t\t\t\tJD\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div className=\"text-sm font-semibold text-zinc-900 dark:text-zinc-100\">\n\t\t\t\t\t\t\t\tJohn Doe\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n\t\t\t\t\t\t\t\tjohn@example.com\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"text-xs text-blue-600 dark:text-blue-400 font-medium\">\n\t\t\t\t\t\t\t\tPro Plan\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"py-1\">\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Profile\")}>\n\t\t\t\t\t\t<User className=\"mr-3 h-4 w-4 text-zinc-500\" />\n\t\t\t\t\t\tYour Profile\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Settings\")}>\n\t\t\t\t\t\t<Settings className=\"mr-3 h-4 w-4 text-zinc-500\" />\n\t\t\t\t\t\tSettings\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Billing\")}>\n\t\t\t\t\t\t<CreditCard className=\"mr-3 h-4 w-4 text-zinc-500\" />\n\t\t\t\t\t\tBilling & Plans\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</div>\n\n\t\t\t\t<DropdownMenuSeparator />\n\n\t\t\t\t<div className=\"py-1\">\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Help\")}>\n\t\t\t\t\t\t<HelpCircle className=\"mr-3 h-4 w-4 text-zinc-500\" />\n\t\t\t\t\t\tHelp & Support\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Sign out\")}>\n\t\t\t\t\t\t<LogOut className=\"mr-3 h-4 w-4 text-zinc-500\" />\n\t\t\t\t\t\tSign Out\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</div>\n\t\t\t</DropdownMenu>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "dropdown",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { type ReactNode, useEffect, useRef, useState } from \"react\";\n\nconst User = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n\t\t<circle cx=\"12\" cy=\"7\" r=\"4\" />\n\t</svg>\n);\n\nconst Community = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\" />\n\t</svg>\n);\n\nconst Subscription = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n\t\t<line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n\t</svg>\n);\n\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n\t\t<path d=\"M4 6h8\" />\n\t\t<path d=\"M16 6h4\" />\n\t\t<path d=\"M10 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n\t\t<path d=\"M4 18h4\" />\n\t\t<path d=\"M12 18h8\" />\n\t\t<path d=\"M10 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n\t\t<path d=\"M4 12h4\" />\n\t\t<path d=\"M12 12h8\" />\n\t</svg>\n);\n\nconst HelpCenter = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<circle cx=\"12\" cy=\"12\" r=\"10\" />\n\t\t<path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\n\t\t<line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\" />\n\t</svg>\n);\n\nconst SignOut = (props: React.SVGProps<SVGSVGElement>) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\t{...props}\n\t>\n\t\t<path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n\t\t<polyline points=\"16 17 21 12 16 7\" />\n\t\t<line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\n\t</svg>\n);\n\ninterface DropdownMenuProps {\n\tchildren: ReactNode;\n\ttrigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst dropdownRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\tdropdownRef.current &&\n\t\t\t\t!dropdownRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"mousedown\", handleClickOutside);\n\t\t};\n\t}, []);\n\n\tconst handleTriggerClick = (e: React.MouseEvent) => {\n\t\te.stopPropagation();\n\t\tsetIsOpen(!isOpen);\n\t};\n\n\treturn (\n\t\t<div className=\"relative inline-block text-left\" ref={dropdownRef}>\n\t\t\t<div onClick={handleTriggerClick} className=\"cursor-pointer\">\n\t\t\t\t{trigger}\n\t\t\t</div>\n\t\t\t{isOpen && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"origin-top-right absolute right-0 mt-2 w-64 rounded-2xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-2\"\n\t\t\t\t\trole=\"menu\"\n\t\t\t\t\taria-orientation=\"vertical\"\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\ninterface DropdownMenuItemProps {\n\tchildren: ReactNode;\n\tonClick?: () => void;\n\tactive?: boolean;\n}\n\nconst DropdownMenuItem = ({\n\tchildren,\n\tonClick,\n\tactive = false,\n}: DropdownMenuItemProps) => (\n\t<a\n\t\thref=\"#\"\n\t\tonClick={(e: React.MouseEvent) => {\n\t\t\te.preventDefault();\n\t\t\tif (onClick) onClick();\n\t\t}}\n\t\tclassName={`\n      text-zinc-800 dark:text-zinc-200 font-medium group flex items-center \n      px-3 py-2.5 text-sm rounded-lg transition-colors duration-150\n      ${\n\t\t\t\tactive\n\t\t\t\t\t? \"bg-zinc-100 dark:bg-zinc-800\"\n\t\t\t\t\t: \"hover:bg-zinc-100 dark:hover:bg-zinc-800\"\n\t\t\t}\n    `}\n\t\trole=\"menuitem\"\n\t>\n\t\t{children}\n\t</a>\n);\n\nconst DropdownMenuSeparator = () => (\n\t<div className=\"my-2 h-px bg-zinc-200 dark:bg-zinc-700\" />\n);\n\nexport default function Dropdown() {\n\treturn (\n\t\t<div className=\" flex items-center justify-center font-sans p-8\">\n\t\t\t<DropdownMenu\n\t\t\t\ttrigger={\n\t\t\t\t\t<button className=\"px-5 py-2 text-sm font-semibold text-zinc-800 dark:text-zinc-100 bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-lg shadow-sm hover:bg-zinc-100 dark:hover:bg-zinc-700 transition-colors\">\n\t\t\t\t\t\tOpen Menu\n\t\t\t\t\t</button>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t<DropdownMenuItem\n\t\t\t\t\t\tonClick={() => console.log(\"Profile clicked\")}\n\t\t\t\t\t\tactive={true}\n\t\t\t\t\t>\n\t\t\t\t\t\t<User className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Profile</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Community clicked\")}>\n\t\t\t\t\t\t<Community className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Community</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Subscription clicked\")}>\n\t\t\t\t\t\t<Subscription className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Subscription</span>\n\t\t\t\t\t\t<span className=\"ml-auto text-xs font-bold text-white bg-gradient-to-r from-pink-500 to-purple-500 rounded-full px-2 py-0.5\">\n\t\t\t\t\t\t\tPRO\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Settings clicked\")}>\n\t\t\t\t\t\t<Settings className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Settings</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</div>\n\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t<div className=\"flex flex-col space-y-1\">\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Help Center clicked\")}>\n\t\t\t\t\t\t<HelpCenter className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Help center</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t<DropdownMenuItem onClick={() => console.log(\"Sign Out clicked\")}>\n\t\t\t\t\t\t<SignOut className=\"mr-3 h-5 w-5 text-zinc-500\" />\n\t\t\t\t\t\t<span>Sign out</span>\n\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t</div>\n\t\t\t</DropdownMenu>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  }
}