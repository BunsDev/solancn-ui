{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown",
  "title": "Dropdown",
  "description": "A minimalistic dropdown component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "dropdown.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\n\nconst User = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"12\" cy=\"7\" r=\"4\" />\n  </svg>\n);\n\nconst Community = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\" />\n  </svg>\n);\n\nconst Subscription = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n    <line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n  </svg>\n);\n\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n    <path d=\"M4 6h8\" />\n    <path d=\"M16 6h4\" />\n    <path d=\"M10 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n    <path d=\"M4 18h4\" />\n    <path d=\"M12 18h8\" />\n    <path d=\"M10 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0-4 0\" />\n    <path d=\"M4 12h4\" />\n    <path d=\"M12 12h8\" />\n  </svg>\n);\n\nconst HelpCenter = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\n    <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\" />\n  </svg>\n);\n\nconst SignOut = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n    <polyline points=\"16 17 21 12 16 7\" />\n    <line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\n  </svg>\n);\n\ninterface DropdownMenuProps {\n  children: ReactNode;\n  trigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleTriggerClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\n        {trigger}\n      </div>\n      {isOpen && (\n        <div\n          className=\"origin-top-right absolute right-0 mt-2 w-64 rounded-2xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-2\"\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface DropdownMenuItemProps {\n  children: ReactNode;\n  onClick?: () => void;\n  active?: boolean;\n}\n\nconst DropdownMenuItem = ({\n  children,\n  onClick,\n  active = false,\n}: DropdownMenuItemProps) => (\n  <a\n    href=\"#\"\n    onClick={(e: React.MouseEvent) => {\n      e.preventDefault();\n      if (onClick) onClick();\n    }}\n    className={`\n      text-zinc-800 dark:text-zinc-200 font-medium group flex items-center \n      px-3 py-2.5 text-sm rounded-lg transition-colors duration-150\n      ${\n        active\n          ? \"bg-zinc-100 dark:bg-zinc-800\"\n          : \"hover:bg-zinc-100 dark:hover:bg-zinc-800\"\n      }\n    `}\n    role=\"menuitem\"\n  >\n    {children}\n  </a>\n);\n\nconst DropdownMenuSeparator = () => (\n  <div className=\"my-2 h-px bg-zinc-200 dark:bg-zinc-700\" />\n);\n\nexport default function Dropdown() {\n  return (\n    <div className=\" flex items-center justify-center font-sans p-8\">\n      <DropdownMenu\n        trigger={\n          <button className=\"px-5 py-2 text-sm font-semibold text-zinc-800 dark:text-zinc-100 bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 rounded-lg shadow-sm hover:bg-zinc-100 dark:hover:bg-zinc-700 transition-colors\">\n            Open Menu\n          </button>\n        }\n      >\n        <div className=\"flex flex-col space-y-1\">\n          <DropdownMenuItem\n            onClick={() => console.log(\"Profile clicked\")}\n            active={true}\n          >\n            <User className=\"mr-3 h-5 w-5 text-zinc-500\" />\n            <span>Profile</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => console.log(\"Community clicked\")}>\n            <Community className=\"mr-3 h-5 w-5 text-zinc-500\" />\n            <span>Community</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => console.log(\"Subscription clicked\")}>\n            <Subscription className=\"mr-3 h-5 w-5 text-zinc-500\" />\n            <span>Subscription</span>\n            <span className=\"ml-auto text-xs font-bold text-white bg-gradient-to-r from-pink-500 to-purple-500 rounded-full px-2 py-0.5\">\n              PRO\n            </span>\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => console.log(\"Settings clicked\")}>\n            <Settings className=\"mr-3 h-5 w-5 text-zinc-500\" />\n            <span>Settings</span>\n          </DropdownMenuItem>\n        </div>\n        <DropdownMenuSeparator />\n        <div className=\"flex flex-col space-y-1\">\n          <DropdownMenuItem onClick={() => console.log(\"Help Center clicked\")}>\n            <HelpCenter className=\"mr-3 h-5 w-5 text-zinc-500\" />\n            <span>Help center</span>\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => console.log(\"Sign Out clicked\")}>\n            <SignOut className=\"mr-3 h-5 w-5 text-zinc-500\" />\n            <span>Sign out</span>\n          </DropdownMenuItem>\n        </div>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "notification-dropdown.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\n\nconst Bell = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"20\"\n    height=\"20\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9\" />\n    <path d=\"M13.73 21a2 2 0 0 1-3.46 0\" />\n  </svg>\n);\n\nconst Check = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"20 6 9 17 4 12\" />\n  </svg>\n);\n\nconst X = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n  </svg>\n);\n\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\n    <path d=\"M12 1v6m0 6v6\" />\n    <path d=\"M1 12h6m6 0h6\" />\n  </svg>\n);\n\ninterface DropdownMenuProps {\n  children: ReactNode;\n  trigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleTriggerClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\n        {trigger}\n      </div>\n      {isOpen && (\n        <div\n          className=\"origin-top-right absolute right-0 mt-2 w-80 rounded-xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95\"\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface NotificationItemProps {\n  title: string;\n  message: string;\n  time: string;\n  unread?: boolean;\n  onMarkRead?: () => void;\n  onDismiss?: () => void;\n}\n\nconst NotificationItem = ({\n  title,\n  message,\n  time,\n  unread = false,\n  onMarkRead,\n  onDismiss,\n}: NotificationItemProps) => (\n  <div\n    className={`p-4 border-b border-zinc-200 dark:border-zinc-700 last:border-b-0 ${unread ? \"bg-blue-50 dark:bg-blue-950/20\" : \"\"}`}\n  >\n    <div className=\"flex items-start justify-between\">\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-center space-x-2\">\n          <h4 className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n            {title}\n          </h4>\n          {unread && <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>}\n        </div>\n        <p className=\"text-sm text-zinc-600 dark:text-zinc-400 mt-1\">\n          {message}\n        </p>\n        <p className=\"text-xs text-zinc-500 dark:text-zinc-500 mt-2\">{time}</p>\n      </div>\n      <div className=\"flex items-center space-x-1 ml-2\">\n        {unread && onMarkRead && (\n          <button\n            onClick={onMarkRead}\n            className=\"p-1 text-zinc-400 hover:text-green-600 transition-colors\"\n            title=\"Mark as read\"\n          >\n            <Check className=\"w-4 h-4\" />\n          </button>\n        )}\n        {onDismiss && (\n          <button\n            onClick={onDismiss}\n            className=\"p-1 text-zinc-400 hover:text-red-600 transition-colors\"\n            title=\"Dismiss\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        )}\n      </div>\n    </div>\n  </div>\n);\n\nexport default function NotificationDropdown() {\n  const [notifications, setNotifications] = useState([\n    {\n      id: 1,\n      title: \"New message\",\n      message: \"You have a new message from Sarah\",\n      time: \"2 min ago\",\n      unread: true,\n    },\n    {\n      id: 2,\n      title: \"System update\",\n      message: \"Your system has been updated successfully\",\n      time: \"1 hour ago\",\n      unread: true,\n    },\n    {\n      id: 3,\n      title: \"Payment received\",\n      message: \"Payment of $99.00 has been processed\",\n      time: \"3 hours ago\",\n      unread: false,\n    },\n    {\n      id: 4,\n      title: \"Welcome!\",\n      message: \"Welcome to our platform. Get started with your first project.\",\n      time: \"1 day ago\",\n      unread: false,\n    },\n  ]);\n\n  const unreadCount = notifications.filter((n) => n.unread).length;\n\n  const markAsRead = (id: number) => {\n    setNotifications((prev) =>\n      prev.map((n) => (n.id === id ? { ...n, unread: false } : n))\n    );\n  };\n\n  const dismissNotification = (id: number) => {\n    setNotifications((prev) => prev.filter((n) => n.id !== id));\n  };\n\n  const markAllAsRead = () => {\n    setNotifications((prev) => prev.map((n) => ({ ...n, unread: false })));\n  };\n\n  return (\n    <div className=\"flex items-center justify-center font-sans p-8\">\n      <DropdownMenu\n        trigger={\n          <button className=\"relative p-2 text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded-lg transition-colors\">\n            <Bell className=\"w-6 h-6\" />\n            {unreadCount > 0 && (\n              <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center\">\n                {unreadCount > 9 ? \"9+\" : unreadCount}\n              </span>\n            )}\n          </button>\n        }\n      >\n        <div className=\"px-4 py-3 border-b border-zinc-200 dark:border-zinc-700\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-zinc-900 dark:text-zinc-100\">\n              Notifications\n            </h3>\n            {unreadCount > 0 && (\n              <button\n                onClick={markAllAsRead}\n                className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium\"\n              >\n                Mark all read\n              </button>\n            )}\n          </div>\n          {unreadCount > 0 && (\n            <p className=\"text-sm text-zinc-500 dark:text-zinc-400 mt-1\">\n              You have {unreadCount} unread notification\n              {unreadCount !== 1 ? \"s\" : \"\"}\n            </p>\n          )}\n        </div>\n\n        <div className=\"max-h-96 overflow-y-auto\">\n          {notifications.length > 0 ? (\n            notifications.map((notification) => (\n              <NotificationItem\n                key={notification.id}\n                title={notification.title}\n                message={notification.message}\n                time={notification.time}\n                unread={notification.unread}\n                onMarkRead={() => markAsRead(notification.id)}\n                onDismiss={() => dismissNotification(notification.id)}\n              />\n            ))\n          ) : (\n            <div className=\"p-8 text-center\">\n              <Bell className=\"w-12 h-12 text-zinc-300 dark:text-zinc-600 mx-auto mb-3\" />\n              <p className=\"text-zinc-500 dark:text-zinc-400\">\n                No notifications\n              </p>\n            </div>\n          )}\n        </div>\n\n        {notifications.length > 0 && (\n          <div className=\"px-4 py-3 border-t border-zinc-200 dark:border-zinc-700\">\n            <button className=\"w-full flex items-center justify-center space-x-2 text-sm text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors\">\n              <Settings className=\"w-4 h-4\" />\n              <span>Notification Settings</span>\n            </button>\n          </div>\n        )}\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "simple-dropdown.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\n\nconst ChevronDown = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"6 9 12 15 18 9\" />\n  </svg>\n);\n\nconst File = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\" />\n    <polyline points=\"14 2 14 8 20 8\" />\n  </svg>\n);\n\nconst Edit = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n  </svg>\n);\n\nconst Trash = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"3 6 5 6 21 6\" />\n    <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n  </svg>\n);\n\ninterface DropdownMenuProps {\n  children: ReactNode;\n  trigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleTriggerClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\n        {trigger}\n      </div>\n      {isOpen && (\n        <div\n          className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-lg shadow-lg bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-1\"\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface DropdownMenuItemProps {\n  children: ReactNode;\n  onClick?: () => void;\n}\n\nconst DropdownMenuItem = ({ children, onClick }: DropdownMenuItemProps) => (\n  <a\n    href=\"#\"\n    onClick={(e: React.MouseEvent) => {\n      e.preventDefault();\n      if (onClick) onClick();\n    }}\n    className=\"text-zinc-700 dark:text-zinc-300 group flex items-center px-3 py-2 text-sm rounded-md hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors duration-150\"\n    role=\"menuitem\"\n  >\n    {children}\n  </a>\n);\n\nconst DropdownMenuSeparator = () => (\n  <div className=\"my-1 h-px bg-zinc-200 dark:bg-zinc-700\" />\n);\n\nexport default function SimpleDropdown() {\n  return (\n    <div className=\"flex items-center justify-center font-sans p-8\">\n      <DropdownMenu\n        trigger={\n          <button className=\"inline-flex items-center px-4 py-2 text-sm font-medium text-zinc-700 dark:text-zinc-300 bg-white dark:bg-zinc-800 border border-zinc-300 dark:border-zinc-600 rounded-md shadow-sm hover:bg-zinc-50 dark:hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors\">\n            Actions\n            <ChevronDown className=\"ml-2 h-4 w-4\" />\n          </button>\n        }\n      >\n        <DropdownMenuItem onClick={() => console.log(\"New file\")}>\n          <File className=\"mr-3 h-4 w-4 text-zinc-500\" />\n          New File\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => console.log(\"Edit\")}>\n          <Edit className=\"mr-3 h-4 w-4 text-zinc-500\" />\n          Edit\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={() => console.log(\"Delete\")}>\n          <Trash className=\"mr-3 h-4 w-4 text-red-500\" />\n          <span className=\"text-red-600 dark:text-red-400\">Delete</span>\n        </DropdownMenuItem>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "user-profile-dropdown.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef, ReactNode } from \"react\";\n\nconst User = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"12\" cy=\"7\" r=\"4\" />\n  </svg>\n);\n\nconst Settings = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\n    <path d=\"M12 1v6m0 6v6\" />\n    <path d=\"M1 12h6m6 0h6\" />\n  </svg>\n);\n\nconst CreditCard = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <rect width=\"20\" height=\"14\" x=\"2\" y=\"5\" rx=\"2\" />\n    <line x1=\"2\" x2=\"22\" y1=\"10\" y2=\"10\" />\n  </svg>\n);\n\nconst HelpCircle = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\" />\n    <line x1=\"12\" x2=\"12.01\" y1=\"17\" y2=\"17\" />\n  </svg>\n);\n\nconst LogOut = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n    <polyline points=\"16 17 21 12 16 7\" />\n    <line x1=\"21\" x2=\"9\" y1=\"12\" y2=\"12\" />\n  </svg>\n);\n\ninterface DropdownMenuProps {\n  children: ReactNode;\n  trigger: ReactNode;\n}\n\nconst DropdownMenu = ({ children, trigger }: DropdownMenuProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  const handleTriggerClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"relative inline-block text-left\" ref={dropdownRef}>\n      <div onClick={handleTriggerClick} className=\"cursor-pointer\">\n        {trigger}\n      </div>\n      {isOpen && (\n        <div\n          className=\"origin-top-right absolute right-0 mt-2 w-72 rounded-xl shadow-xl bg-white dark:bg-zinc-900 ring-1 ring-black ring-opacity-5 focus:outline-none z-50 animate-in fade-in-0 zoom-in-95 p-2\"\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface DropdownMenuItemProps {\n  children: ReactNode;\n  onClick?: () => void;\n}\n\nconst DropdownMenuItem = ({ children, onClick }: DropdownMenuItemProps) => (\n  <a\n    href=\"#\"\n    onClick={(e: React.MouseEvent) => {\n      e.preventDefault();\n      if (onClick) onClick();\n    }}\n    className=\"text-zinc-700 dark:text-zinc-300 group flex items-center px-3 py-2.5 text-sm rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors duration-150\"\n    role=\"menuitem\"\n  >\n    {children}\n  </a>\n);\n\nconst DropdownMenuSeparator = () => (\n  <div className=\"my-2 h-px bg-zinc-200 dark:bg-zinc-700\" />\n);\n\nexport default function UserProfileDropdown() {\n  return (\n    <div className=\"flex items-center justify-center font-sans p-8\">\n      <DropdownMenu\n        trigger={\n          <button className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-sm\">\n              JD\n            </div>\n            <div className=\"text-left\">\n              <div className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n                John Doe\n              </div>\n              <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                john@example.com\n              </div>\n            </div>\n          </button>\n        }\n      >\n        <div className=\"px-3 py-3 border-b border-zinc-200 dark:border-zinc-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\n              JD\n            </div>\n            <div>\n              <div className=\"text-sm font-semibold text-zinc-900 dark:text-zinc-100\">\n                John Doe\n              </div>\n              <div className=\"text-xs text-zinc-500 dark:text-zinc-400\">\n                john@example.com\n              </div>\n              <div className=\"text-xs text-blue-600 dark:text-blue-400 font-medium\">\n                Pro Plan\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"py-1\">\n          <DropdownMenuItem onClick={() => console.log(\"Profile\")}>\n            <User className=\"mr-3 h-4 w-4 text-zinc-500\" />\n            Your Profile\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => console.log(\"Settings\")}>\n            <Settings className=\"mr-3 h-4 w-4 text-zinc-500\" />\n            Settings\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => console.log(\"Billing\")}>\n            <CreditCard className=\"mr-3 h-4 w-4 text-zinc-500\" />\n            Billing & Plans\n          </DropdownMenuItem>\n        </div>\n\n        <DropdownMenuSeparator />\n\n        <div className=\"py-1\">\n          <DropdownMenuItem onClick={() => console.log(\"Help\")}>\n            <HelpCircle className=\"mr-3 h-4 w-4 text-zinc-500\" />\n            Help & Support\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => console.log(\"Sign out\")}>\n            <LogOut className=\"mr-3 h-4 w-4 text-zinc-500\" />\n            Sign Out\n          </DropdownMenuItem>\n        </div>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}