{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "imageswiper",
  "title": "Imageswiper",
  "description": "A minimalistic imageswiper component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "imageswiper.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\n// --- DATA STRUCTURE INTERFACE ---\ninterface CardData {\n\tid: number;\n\timageUrl: string;\n\ttitle: string;\n}\n\n// --- PROPS INTERFACE ---\n// Updated to accept an array of CardData objects.\ninterface ImageSwiperProps {\n\tcards: CardData[];\n\tcardWidth?: number;\n\tcardHeight?: number;\n\tclassName?: string;\n}\n\nexport const ImageSwiper: React.FC<ImageSwiperProps> = ({\n\tcards,\n\tcardWidth = 256, // 16rem = 256px\n\tcardHeight = 352, // 22rem = 352px\n\tclassName = \"\",\n}) => {\n\t// --- STATE AND REFS ---\n\tconst cardStackRef = useRef<HTMLDivElement>(null);\n\tconst isSwiping = useRef(false);\n\tconst startX = useRef(0);\n\tconst currentX = useRef(0);\n\tconst animationFrameId = useRef<number | null>(null);\n\n\t// The cardOrder state tracks the visual order of the cards in the stack.\n\tconst [cardOrder, setCardOrder] = useState<number[]>(() =>\n\t\tArray.from({ length: cards.length }, (_, i) => i),\n\t);\n\n\t// --- HELPER FUNCTIONS (MEMOIZED) ---\n\n\t// Gets all card elements from the DOM.\n\tconst getCards = useCallback((): HTMLElement[] => {\n\t\tif (!cardStackRef.current) return [];\n\t\treturn Array.from(cardStackRef.current.querySelectorAll(\".image-card\"));\n\t}, []);\n\n\t// Gets the topmost card element.\n\tconst getActiveCard = useCallback((): HTMLElement | null => {\n\t\treturn getCards()[0] || null;\n\t}, [getCards]);\n\n\t// Updates CSS custom properties for all cards to position them in a stack.\n\tconst updateCardPositions = useCallback(() => {\n\t\tgetCards().forEach((card, i) => {\n\t\t\tcard.style.setProperty(\"--i\", i.toString());\n\t\t\tcard.style.setProperty(\"--swipe-x\", \"0px\");\n\t\t\tcard.style.setProperty(\"--swipe-rotate\", \"0deg\");\n\t\t\tcard.style.opacity = \"1\";\n\t\t\tcard.style.transition = \"transform 0.5s ease, opacity 0.5s ease\";\n\t\t});\n\t}, [getCards]);\n\n\t// Applies instantaneous swipe styles to the active card during a drag.\n\tconst applySwipeStyles = useCallback(\n\t\t(deltaX: number) => {\n\t\t\tconst card = getActiveCard();\n\t\t\tif (!card) return;\n\t\t\tconst rotation = deltaX * 0.1; // Rotation based on horizontal movement\n\t\t\tconst opacity = 1 - Math.abs(deltaX) / (cardWidth * 1.5); // Fade out as it moves\n\t\t\tcard.style.setProperty(\"--swipe-x\", `${deltaX}px`);\n\t\t\tcard.style.setProperty(\"--swipe-rotate\", `${rotation}deg`);\n\t\t\tcard.style.opacity = opacity.toString();\n\t\t},\n\t\t[getActiveCard, cardWidth],\n\t);\n\n\t// --- INTERACTION HANDLERS (MEMOIZED) ---\n\n\t// Called on pointerdown: captures starting position and disables card transition.\n\tconst handleStart = useCallback(\n\t\t(clientX: number) => {\n\t\t\tif (isSwiping.current) return;\n\t\t\tisSwiping.current = true;\n\t\t\tstartX.current = clientX;\n\t\t\tcurrentX.current = clientX;\n\n\t\t\tconst card = getActiveCard();\n\t\t\tif (card) {\n\t\t\t\tcard.style.transition = \"none\"; // Allow direct manipulation\n\t\t\t}\n\n\t\t\tif (animationFrameId.current) {\n\t\t\t\tcancelAnimationFrame(animationFrameId.current);\n\t\t\t}\n\t\t},\n\t\t[getActiveCard],\n\t);\n\n\t// Called on pointermove: calculates drag distance and applies styles via rAF.\n\tconst handleMove = useCallback(\n\t\t(clientX: number) => {\n\t\t\tif (!isSwiping.current) return;\n\t\t\tcurrentX.current = clientX;\n\n\t\t\tanimationFrameId.current = requestAnimationFrame(() => {\n\t\t\t\tconst deltaX = currentX.current - startX.current;\n\t\t\t\tapplySwipeStyles(deltaX);\n\t\t\t});\n\t\t},\n\t\t[applySwipeStyles],\n\t);\n\n\t// Called on pointerup: determines whether to swipe away or snap back.\n\tconst handleEnd = useCallback(() => {\n\t\tif (!isSwiping.current) return;\n\t\tisSwiping.current = false;\n\n\t\tif (animationFrameId.current) {\n\t\t\tcancelAnimationFrame(animationFrameId.current);\n\t\t}\n\n\t\tconst deltaX = currentX.current - startX.current;\n\t\tconst threshold = cardWidth / 3; // Swipe threshold is 1/3 of the card's width\n\t\tconst card = getActiveCard();\n\t\tif (!card) return;\n\n\t\t// Re-enable transition for the swipe or snap-back animation.\n\t\tcard.style.transition = \"transform 0.3s ease, opacity 0.3s ease\";\n\n\t\tif (Math.abs(deltaX) > threshold) {\n\t\t\t// --- SWIPE AWAY ---\n\t\t\tconst direction = Math.sign(deltaX);\n\t\t\tconst swipeOutX = direction * (cardWidth * 1.5);\n\t\t\tcard.style.setProperty(\"--swipe-x\", `${swipeOutX}px`);\n\t\t\tcard.style.setProperty(\"--swipe-rotate\", `${direction * 15}deg`);\n\t\t\tcard.style.opacity = \"0\";\n\n\t\t\t// After animation, move the card to the back of the stack.\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetCardOrder((prev) => [...prev.slice(1), prev[0]]);\n\t\t\t}, 300); // Must match transition duration\n\t\t} else {\n\t\t\t// --- SNAP BACK ---\n\t\t\tapplySwipeStyles(0); // Resets to initial state with animation\n\t\t}\n\t}, [getActiveCard, applySwipeStyles, cardWidth]);\n\n\t// --- LIFECYCLE HOOKS ---\n\n\t// Effect to add and clean up pointer event listeners.\n\tuseEffect(() => {\n\t\tconst element = cardStackRef.current;\n\t\tif (!element) return;\n\n\t\tconst onPointerDown = (e: PointerEvent) => handleStart(e.clientX);\n\t\tconst onPointerMove = (e: PointerEvent) => handleMove(e.clientX);\n\t\tconst onPointerUp = () => handleEnd();\n\t\tconst onPointerLeave = () => handleEnd(); // Also end swipe if cursor leaves element\n\n\t\telement.addEventListener(\"pointerdown\", onPointerDown);\n\t\telement.addEventListener(\"pointermove\", onPointerMove);\n\t\telement.addEventListener(\"pointerup\", onPointerUp);\n\t\telement.addEventListener(\"pointerleave\", onPointerLeave);\n\n\t\treturn () => {\n\t\t\telement.removeEventListener(\"pointerdown\", onPointerDown);\n\t\t\telement.removeEventListener(\"pointermove\", onPointerMove);\n\t\t\telement.removeEventListener(\"pointerup\", onPointerUp);\n\t\t\telement.removeEventListener(\"pointerleave\", onPointerLeave);\n\t\t\tif (animationFrameId.current) {\n\t\t\t\tcancelAnimationFrame(animationFrameId.current);\n\t\t\t}\n\t\t};\n\t}, [handleStart, handleMove, handleEnd]);\n\n\t// Effect to update card positions whenever the order changes.\n\tuseEffect(() => {\n\t\tupdateCardPositions();\n\t}, [cardOrder, updateCardPositions]);\n\n\t// --- RENDER ---\n\treturn (\n\t\t<section\n\t\t\tref={cardStackRef}\n\t\t\tclassName={`relative grid place-content-center select-none ${className}`}\n\t\t\tstyle={\n\t\t\t\t{\n\t\t\t\t\twidth: cardWidth + 32,\n\t\t\t\t\theight: cardHeight + 32,\n\t\t\t\t\tperspective: \"1000px\",\n\t\t\t\t\ttouchAction: \"none\", // Disables default touch actions like scrolling\n\t\t\t\t} as React.CSSProperties\n\t\t\t}\n\t\t>\n\t\t\t{cardOrder.map((originalIndex, displayIndex) => {\n\t\t\t\tconst card = cards[originalIndex];\n\t\t\t\treturn (\n\t\t\t\t\t<article\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tclassName=\"image-card absolute cursor-grab active:cursor-grabbing\n                         place-self-center border-2 border-slate-700 rounded-2xl\n                         shadow-lg overflow-hidden will-change-transform bg-slate-800\"\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"--i\": displayIndex.toString(), // The card's current position in the stack (0 = top)\n\t\t\t\t\t\t\t\t\"--swipe-x\": \"0px\", // Managed by JS for horizontal swipe\n\t\t\t\t\t\t\t\t\"--swipe-rotate\": \"0deg\", // Managed by JS for rotation\n\t\t\t\t\t\t\t\twidth: cardWidth,\n\t\t\t\t\t\t\t\theight: cardHeight,\n\t\t\t\t\t\t\t\tzIndex: cards.length - displayIndex,\n\t\t\t\t\t\t\t\ttransform: `\n                translateY(calc(var(--i) * 10px))\n                translateZ(calc(var(--i) * -45px))\n                translateX(var(--swipe-x))\n                rotate(var(--swipe-rotate))\n              `,\n\t\t\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={card.imageUrl}\n\t\t\t\t\t\t\talt={card.title}\n\t\t\t\t\t\t\tclassName=\"w-full h-full object-cover pointer-events-none\"\n\t\t\t\t\t\t\tdraggable={false}\n\t\t\t\t\t\t\t// Add a fallback for broken image links\n\t\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\t\ttarget.onerror = null;\n\t\t\t\t\t\t\t\ttarget.src = `https://placehold.co/${cardWidth}x${cardHeight}/2d3748/e2e8f0?text=Image+Not+Found`;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent\">\n\t\t\t\t\t\t\t<h3 className=\"font-bold text-xl text-white drop-shadow-lg\">\n\t\t\t\t\t\t\t\t{card.title}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</article>\n\t\t\t\t);\n\t\t\t})}\n\t\t</section>\n\t);\n};\n\n// --- Main App Component to run the ImageSwiper ---\nfunction ImageSwiperPage() {\n\t// Data for the cards, including image URLs and titles\n\tconst cardData: CardData[] = [\n\t\t{\n\t\t\tid: 1,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/736x/d6/8a/12/d68a121e960094f99ad8acd37505fb7d.jpg\",\n\t\t\ttitle: \"Crimson Forest\",\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/736x/21/16/f7/2116f71f9d51d875e44d809f074ff079.jpg\",\n\t\t\ttitle: \"Misty Mountains\",\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/1200x/fe/c2/0d/fec20d2958059b8463bffb138d4eaac6.jpg\",\n\t\t\ttitle: \"Floating Islands\",\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/736x/84/dc/62/84dc62de850a34a9d420c97f3a2d58f4.jpg\",\n\t\t\ttitle: \"Crystal Cave\",\n\t\t},\n\t\t{\n\t\t\tid: 5,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/1200x/be/c3/7e/bec37e2c43e703f922f887db2578ce2e.jpg\",\n\t\t\ttitle: \"Sunset Peaks\",\n\t\t},\n\t\t{\n\t\t\tid: 6,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/736x/47/dd/47/47dd47b0d66c2fa641e03e370bcb5433.jpg\",\n\t\t\ttitle: \"Night Sky\",\n\t\t},\n\t\t{\n\t\t\tid: 7,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/736x/05/01/bc/0501bcd327d9df915e83154bbf9456e3.jpg\",\n\t\t\ttitle: \"Ancient Ruins\",\n\t\t},\n\t\t{\n\t\t\tid: 8,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/736x/c1/46/be/c146bebffca026d2c4fa76cc85aac917.jpg\",\n\t\t\ttitle: \"Magical Tree\",\n\t\t},\n\t\t{\n\t\t\tid: 9,\n\t\t\timageUrl:\n\t\t\t\t\"https://i.pinimg.com/736x/91/7a/51/917a51df0d444def3cade8d626305a67.jpg\",\n\t\t\ttitle: \"Celestial Waters\",\n\t\t},\n\t];\n\n\treturn (\n\t\t<div className=\"text-white w-full flex flex-col items-center justify-center p-4 font-sans overflow-hidden\">\n\t\t\t<ImageSwiper cards={cardData} />\n\t\t</div>\n\t);\n}\n\nexport default ImageSwiperPage;\n",
      "type": "registry:ui"
    }
  ]
}