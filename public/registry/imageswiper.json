{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "imageswiper",
  "title": "Imageswiper",
  "description": "A minimalistic imageswiper component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "imageswiper.tsx",
      "content": "'use client'\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\n\n// --- DATA STRUCTURE INTERFACE ---\ninterface CardData {\n  id: number;\n  imageUrl: string;\n  title: string;\n}\n\n// --- PROPS INTERFACE ---\n// Updated to accept an array of CardData objects.\ninterface ImageSwiperProps {\n  cards: CardData[];\n  cardWidth?: number;\n  cardHeight?: number;\n  className?: string;\n}\n\nexport const ImageSwiper: React.FC<ImageSwiperProps> = ({\n  cards,\n  cardWidth = 256,  // 16rem = 256px\n  cardHeight = 352, // 22rem = 352px\n  className = ''\n}) => {\n  // --- STATE AND REFS ---\n  const cardStackRef = useRef<HTMLDivElement>(null);\n  const isSwiping = useRef(false);\n  const startX = useRef(0);\n  const currentX = useRef(0);\n  const animationFrameId = useRef<number | null>(null);\n\n  // The cardOrder state tracks the visual order of the cards in the stack.\n  const [cardOrder, setCardOrder] = useState<number[]>(() =>\n    Array.from({ length: cards.length }, (_, i) => i)\n  );\n\n  // --- HELPER FUNCTIONS (MEMOIZED) ---\n\n  // Gets all card elements from the DOM.\n  const getCards = useCallback((): HTMLElement[] => {\n    if (!cardStackRef.current) return [];\n    return Array.from(cardStackRef.current.querySelectorAll('.image-card'));\n  }, []);\n\n  // Gets the topmost card element.\n  const getActiveCard = useCallback((): HTMLElement | null => {\n    return getCards()[0] || null;\n  }, [getCards]);\n\n  // Updates CSS custom properties for all cards to position them in a stack.\n  const updateCardPositions = useCallback(() => {\n    getCards().forEach((card, i) => {\n      card.style.setProperty('--i', i.toString());\n      card.style.setProperty('--swipe-x', '0px');\n      card.style.setProperty('--swipe-rotate', '0deg');\n      card.style.opacity = '1';\n      card.style.transition = 'transform 0.5s ease, opacity 0.5s ease';\n    });\n  }, [getCards]);\n\n  // Applies instantaneous swipe styles to the active card during a drag.\n  const applySwipeStyles = useCallback((deltaX: number) => {\n    const card = getActiveCard();\n    if (!card) return;\n    const rotation = deltaX * 0.1; // Rotation based on horizontal movement\n    const opacity = 1 - Math.abs(deltaX) / (cardWidth * 1.5); // Fade out as it moves\n    card.style.setProperty('--swipe-x', `${deltaX}px`);\n    card.style.setProperty('--swipe-rotate', `${rotation}deg`);\n    card.style.opacity = opacity.toString();\n  }, [getActiveCard, cardWidth]);\n\n\n  // --- INTERACTION HANDLERS (MEMOIZED) ---\n\n  // Called on pointerdown: captures starting position and disables card transition.\n  const handleStart = useCallback((clientX: number) => {\n    if (isSwiping.current) return;\n    isSwiping.current = true;\n    startX.current = clientX;\n    currentX.current = clientX;\n\n    const card = getActiveCard();\n    if (card) {\n      card.style.transition = 'none'; // Allow direct manipulation\n    }\n\n    if (animationFrameId.current) {\n      cancelAnimationFrame(animationFrameId.current);\n    }\n  }, [getActiveCard]);\n\n  // Called on pointermove: calculates drag distance and applies styles via rAF.\n  const handleMove = useCallback((clientX: number) => {\n    if (!isSwiping.current) return;\n    currentX.current = clientX;\n\n    animationFrameId.current = requestAnimationFrame(() => {\n      const deltaX = currentX.current - startX.current;\n      applySwipeStyles(deltaX);\n    });\n  }, [applySwipeStyles]);\n\n  // Called on pointerup: determines whether to swipe away or snap back.\n  const handleEnd = useCallback(() => {\n    if (!isSwiping.current) return;\n    isSwiping.current = false;\n\n    if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n    }\n\n    const deltaX = currentX.current - startX.current;\n    const threshold = cardWidth / 3; // Swipe threshold is 1/3 of the card's width\n    const card = getActiveCard();\n    if (!card) return;\n\n    // Re-enable transition for the swipe or snap-back animation.\n    card.style.transition = 'transform 0.3s ease, opacity 0.3s ease';\n\n    if (Math.abs(deltaX) > threshold) {\n      // --- SWIPE AWAY ---\n      const direction = Math.sign(deltaX);\n      const swipeOutX = direction * (cardWidth * 1.5);\n      card.style.setProperty('--swipe-x', `${swipeOutX}px`);\n      card.style.setProperty('--swipe-rotate', `${direction * 15}deg`);\n      card.style.opacity = '0';\n\n      // After animation, move the card to the back of the stack.\n      setTimeout(() => {\n        setCardOrder(prev => [...prev.slice(1), prev[0]]);\n      }, 300); // Must match transition duration\n\n    } else {\n      // --- SNAP BACK ---\n      applySwipeStyles(0); // Resets to initial state with animation\n    }\n  }, [getActiveCard, applySwipeStyles, cardWidth]);\n\n\n  // --- LIFECYCLE HOOKS ---\n\n  // Effect to add and clean up pointer event listeners.\n  useEffect(() => {\n    const element = cardStackRef.current;\n    if (!element) return;\n\n    const onPointerDown = (e: PointerEvent) => handleStart(e.clientX);\n    const onPointerMove = (e: PointerEvent) => handleMove(e.clientX);\n    const onPointerUp = () => handleEnd();\n    const onPointerLeave = () => handleEnd(); // Also end swipe if cursor leaves element\n\n    element.addEventListener('pointerdown', onPointerDown);\n    element.addEventListener('pointermove', onPointerMove);\n    element.addEventListener('pointerup', onPointerUp);\n    element.addEventListener('pointerleave', onPointerLeave);\n\n    return () => {\n      element.removeEventListener('pointerdown', onPointerDown);\n      element.removeEventListener('pointermove', onPointerMove);\n      element.removeEventListener('pointerup', onPointerUp);\n      element.removeEventListener('pointerleave', onPointerLeave);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [handleStart, handleMove, handleEnd]);\n\n  // Effect to update card positions whenever the order changes.\n  useEffect(() => {\n    updateCardPositions();\n  }, [cardOrder, updateCardPositions]);\n\n\n  // --- RENDER ---\n  return (\n    <section\n      ref={cardStackRef}\n      className={`relative grid place-content-center select-none ${className}`}\n      style={{\n        width: cardWidth + 32,\n        height: cardHeight + 32,\n        perspective: '1000px',\n        touchAction: 'none', // Disables default touch actions like scrolling\n      } as React.CSSProperties}\n    >\n      {cardOrder.map((originalIndex, displayIndex) => {\n        const card = cards[originalIndex];\n        return (\n          <article\n            key={card.id}\n            className=\"image-card absolute cursor-grab active:cursor-grabbing\n                         place-self-center border-2 border-slate-700 rounded-2xl\n                         shadow-lg overflow-hidden will-change-transform bg-slate-800\"\n            style={{\n              '--i': displayIndex.toString(), // The card's current position in the stack (0 = top)\n              '--swipe-x': '0px', // Managed by JS for horizontal swipe\n              '--swipe-rotate': '0deg', // Managed by JS for rotation\n              width: cardWidth,\n              height: cardHeight,\n              zIndex: cards.length - displayIndex,\n              transform: `\n                translateY(calc(var(--i) * 10px))\n                translateZ(calc(var(--i) * -45px))\n                translateX(var(--swipe-x))\n                rotate(var(--swipe-rotate))\n              `,\n            } as React.CSSProperties}\n          >\n            <img\n              src={card.imageUrl}\n              alt={card.title}\n              className=\"w-full h-full object-cover pointer-events-none\"\n              draggable={false}\n              // Add a fallback for broken image links\n              onError={(e) => {\n                const target = e.target as HTMLImageElement;\n                target.onerror = null; \n                target.src=`https://placehold.co/${cardWidth}x${cardHeight}/2d3748/e2e8f0?text=Image+Not+Found`;\n              }}\n            />\n            <div className=\"absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent\">\n                <h3 className=\"font-bold text-xl text-white drop-shadow-lg\">{card.title}</h3>\n            </div>\n          </article>\n        )\n      })}\n    </section>\n  );\n};\n\n\n// --- Main App Component to run the ImageSwiper ---\nfunction ImageSwiperPage() {\n  // Data for the cards, including image URLs and titles\n  const cardData: CardData[] = [\n    { id: 1, imageUrl: 'https://i.pinimg.com/736x/d6/8a/12/d68a121e960094f99ad8acd37505fb7d.jpg', title: 'Crimson Forest' },\n    { id: 2, imageUrl: 'https://i.pinimg.com/736x/21/16/f7/2116f71f9d51d875e44d809f074ff079.jpg', title: 'Misty Mountains' },\n    { id: 3, imageUrl: 'https://i.pinimg.com/1200x/fe/c2/0d/fec20d2958059b8463bffb138d4eaac6.jpg', title: 'Floating Islands' },\n    { id: 4, imageUrl: 'https://i.pinimg.com/736x/84/dc/62/84dc62de850a34a9d420c97f3a2d58f4.jpg', title: 'Crystal Cave' },\n    { id: 5, imageUrl: 'https://i.pinimg.com/1200x/be/c3/7e/bec37e2c43e703f922f887db2578ce2e.jpg', title: 'Sunset Peaks' },\n    { id: 6, imageUrl: 'https://i.pinimg.com/736x/47/dd/47/47dd47b0d66c2fa641e03e370bcb5433.jpg', title: 'Night Sky' },\n    { id: 7, imageUrl: 'https://i.pinimg.com/736x/05/01/bc/0501bcd327d9df915e83154bbf9456e3.jpg', title: 'Ancient Ruins' },\n    { id: 8, imageUrl: 'https://i.pinimg.com/736x/c1/46/be/c146bebffca026d2c4fa76cc85aac917.jpg', title: 'Magical Tree' },\n    { id: 9, imageUrl: 'https://i.pinimg.com/736x/91/7a/51/917a51df0d444def3cade8d626305a67.jpg', title: 'Celestial Waters' },\n  ];\n\n  return (\n    <div className=\"text-white w-full flex flex-col items-center justify-center p-4 font-sans overflow-hidden\">\n        <ImageSwiper cards={cardData} />\n    </div>\n  );\n}\n\nexport default ImageSwiperPage;\n",
      "type": "registry:ui"
    }
  ]
}