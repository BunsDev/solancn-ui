{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text",
  "title": "Text",
  "description": "A minimalistic text component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "text.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\n\nconst BlurInText = ({ text = \"Blur In Effect\" }: { text?: string }) => {\n\treturn (\n\t\t<h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n\t\t\t{text.split(\"\").map((char, i) => (\n\t\t\t\t<motion.span\n\t\t\t\t\tkey={i}\n\t\t\t\t\tinitial={{\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\tfilter: \"blur(10px)\",\n\t\t\t\t\t}}\n\t\t\t\t\tanimate={{\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tfilter: \"blur(0px)\",\n\t\t\t\t\t}}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tdelay: i * 0.05,\n\t\t\t\t\t\tduration: 0.8,\n\t\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"inline-block\"\n\t\t\t\t>\n\t\t\t\t\t{char === \" \" ? \"\\u00A0\" : char}\n\t\t\t\t</motion.span>\n\t\t\t))}\n\t\t</h2>\n\t);\n};\n\nconst BlurInView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4\">\n\t\t\t<BlurInText text=\"Sharp Focus Ahead\" />\n\t\t</div>\n\t);\n};\n\nexport default BlurInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "blurin.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\n\nconst BlurInText = ({ text = \"Blur In Effect\" }: { text?: string }) => {\n\treturn (\n\t\t<h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n\t\t\t{text.split(\"\").map((char, i) => (\n\t\t\t\t<motion.span\n\t\t\t\t\tkey={i}\n\t\t\t\t\tinitial={{\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\tfilter: \"blur(10px)\",\n\t\t\t\t\t}}\n\t\t\t\t\tanimate={{\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tfilter: \"blur(0px)\",\n\t\t\t\t\t}}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tdelay: i * 0.05,\n\t\t\t\t\t\tduration: 0.8,\n\t\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"inline-block\"\n\t\t\t\t>\n\t\t\t\t\t{char === \" \" ? \"\\u00A0\" : char}\n\t\t\t\t</motion.span>\n\t\t\t))}\n\t\t</h2>\n\t);\n};\n\nconst BlurInView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4\">\n\t\t\t<BlurInText text=\"Sharp Focus Ahead\" />\n\t\t</div>\n\t);\n};\n\nexport default BlurInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "bouncy.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\n\nconst BouncyText = ({ text = \"Bouncy Animation\" }: { text?: string }) => {\n\treturn (\n\t\t<h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n\t\t\t{text.split(\"\").map((char, i) => (\n\t\t\t\t<motion.span\n\t\t\t\t\tkey={i}\n\t\t\t\t\tinitial={{ y: 0 }}\n\t\t\t\t\tanimate={{\n\t\t\t\t\t\ty: [0, -20, 0],\n\t\t\t\t\t\ttransition: {\n\t\t\t\t\t\t\tdelay: i * 0.1,\n\t\t\t\t\t\t\tduration: 0.6,\n\t\t\t\t\t\t\trepeat: Infinity,\n\t\t\t\t\t\t\trepeatDelay: 2,\n\t\t\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"inline-block\"\n\t\t\t\t>\n\t\t\t\t\t{char === \" \" ? \"\\u00A0\" : char}\n\t\t\t\t</motion.span>\n\t\t\t))}\n\t\t</h2>\n\t);\n};\n\nconst BouncyView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4\">\n\t\t\t<BouncyText text=\"Creative Bouncy Text\" />\n\t\t</div>\n\t);\n};\n\nexport default BouncyView;\n",
      "type": "registry:ui"
    },
    {
      "path": "glitch.tsx",
      "content": "\"use client\";\nimport type { CSSProperties, FC } from \"react\";\n\ninterface GlitchTextProps {\n\tchildren: string;\n\tspeed?: number;\n\tenableShadows?: boolean;\n\tenableOnHover?: boolean;\n\tclassName?: string;\n}\n\ninterface CustomCSSProperties extends CSSProperties {\n\t\"--after-duration\": string;\n\t\"--before-duration\": string;\n\t\"--after-shadow\": string;\n\t\"--before-shadow\": string;\n}\n\n// CSS styles as a string\nconst glitchStyles = `\n.glitch {\n  color: #fff;\n  font-size: clamp(2rem, 10vw, 8rem);\n  white-space: nowrap;\n  font-weight: 900;\n  position: relative;\n  margin: 0 auto;\n  user-select: none;\n  cursor: pointer;\n}\n\n.glitch::after,\n.glitch::before {\n  content: attr(data-text);\n  position: absolute;\n  top: 0;\n  color: #fff;\n  background-color: #060010;\n  overflow: hidden;\n  clip-path: inset(0 0 0 0);\n}\n\n.glitch:not(.enable-on-hover)::after {\n  left: 10px;\n  text-shadow: var(--after-shadow, -10px 0 red);\n  animation: animate-glitch var(--after-duration, 3s) infinite linear alternate-reverse;\n}\n.glitch:not(.enable-on-hover)::before {\n  left: -10px;\n  text-shadow: var(--before-shadow, 10px 0 cyan);\n  animation: animate-glitch var(--before-duration, 2s) infinite linear alternate-reverse;\n}\n\n.glitch.enable-on-hover::after,\n.glitch.enable-on-hover::before {\n  content: '';\n  opacity: 0;\n  animation: none;\n}\n\n.glitch.enable-on-hover:hover::after {\n  content: attr(data-text);\n  opacity: 1;\n  left: 10px;\n  text-shadow: var(--after-shadow, -10px 0 red);\n  animation: animate-glitch var(--after-duration, 3s) infinite linear alternate-reverse;\n}\n.glitch.enable-on-hover:hover::before {\n  content: attr(data-text);\n  opacity: 1;\n  left: -10px;\n  text-shadow: var(--before-shadow, 10px 0 cyan);\n  animation: animate-glitch var(--before-duration, 2s) infinite linear alternate-reverse;\n}\n\n@keyframes animate-glitch {\n  0%   { clip-path: inset(20% 0 50% 0); }\n  5%   { clip-path: inset(10% 0 60% 0); }\n  10%  { clip-path: inset(15% 0 55% 0); }\n  15%  { clip-path: inset(25% 0 35% 0); }\n  20%  { clip-path: inset(30% 0 40% 0); }\n  25%  { clip-path: inset(40% 0 20% 0); }\n  30%  { clip-path: inset(10% 0 60% 0); }\n  35%  { clip-path: inset(15% 0 55% 0); }\n  40%  { clip-path: inset(25% 0 35% 0); }\n  45%  { clip-path: inset(30% 0 40% 0); }\n  50%  { clip-path: inset(20% 0 50% 0); }\n  55%  { clip-path: inset(10% 0 60% 0); }\n  60%  { clip-path: inset(15% 0 55% 0); }\n  65%  { clip-path: inset(25% 0 35% 0); }\n  70%  { clip-path: inset(30% 0 40% 0); }\n  75%  { clip-path: inset(40% 0 20% 0); }\n  80%  { clip-path: inset(20% 0 50% 0); }\n  85%  { clip-path: inset(10% 0 60% 0); }\n  90%  { clip-path: inset(15% 0 55% 0); }\n  95%  { clip-path: inset(25% 0 35% 0); }\n  100% { clip-path: inset(30% 0 40% 0); }\n}\n`;\n\nconst GlitchText: FC<GlitchTextProps> = ({\n\tchildren,\n\tspeed = 0.5,\n\tenableShadows = true,\n\tenableOnHover = false,\n\tclassName = \"\",\n}) => {\n\tconst inlineStyles: CustomCSSProperties = {\n\t\t\"--after-duration\": `${speed * 3}s`,\n\t\t\"--before-duration\": `${speed * 2}s`,\n\t\t\"--after-shadow\": enableShadows ? \"-5px 0 red\" : \"none\",\n\t\t\"--before-shadow\": enableShadows ? \"5px 0 cyan\" : \"none\",\n\t};\n\n\tconst hoverClass = enableOnHover ? \"enable-on-hover\" : \"\";\n\n\treturn (\n\t\t<>\n\t\t\t{/* Inject CSS styles */}\n\t\t\t<style dangerouslySetInnerHTML={{ __html: glitchStyles }} />\n\t\t\t<div\n\t\t\t\tclassName={`glitch ${hoverClass} ${className}`}\n\t\t\t\tstyle={inlineStyles}\n\t\t\t\tdata-text={children}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nconst GlitchView = () => {\n\treturn (\n\t\t<div className=\"font-sans p-4 space-y-8 overflow-hidden\">\n\t\t\t<GlitchText speed={3.4}>GLITCH EFFECT</GlitchText>\n\n\t\t\t<GlitchText speed={0.3} enableOnHover={true} className=\"text-2xl\">\n\t\t\t\tHOVER ME\n\t\t\t</GlitchText>\n\n\t\t\t<GlitchText speed={0.8} enableShadows={false} className=\"text-xl\">\n\t\t\t\tNO SHADOWS\n\t\t\t</GlitchText>\n\t\t</div>\n\t);\n};\n\nexport default GlitchView;\n",
      "type": "registry:ui"
    },
    {
      "path": "gradient.tsx",
      "content": "\"use client\";\nimport React, { type ReactNode } from \"react\";\n\ninterface GradientTextProps {\n\tchildren: ReactNode;\n\tclassName?: string;\n\tcolors?: string[];\n\tanimationSpeed?: number;\n\tshowBorder?: boolean;\n}\n\n// Add the keyframes styles\nconst gradientKeyframes = `\n@keyframes gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n.animate-gradient {\n  animation: gradient 8s linear infinite;\n}\n`;\n\nfunction GradientText({\n\tchildren,\n\tclassName = \"\",\n\tcolors = [\"#ffaa40\", \"#9c40ff\", \"#ffaa40\"],\n\tanimationSpeed = 8,\n\tshowBorder = false,\n}: GradientTextProps) {\n\tconst gradientStyle = {\n\t\tbackgroundImage: `linear-gradient(to right, ${colors.join(\", \")})`,\n\t\tbackgroundSize: \"300% 100%\",\n\t\tanimation: `gradient ${animationSpeed}s linear infinite`,\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{/* Inject keyframes styles */}\n\t\t\t<style dangerouslySetInnerHTML={{ __html: gradientKeyframes }} />\n\t\t\t<div\n\t\t\t\tclassName={`relative mx-auto flex max-w-fit flex-row items-center justify-center rounded-[1.25rem] font-medium backdrop-blur transition-shadow duration-500 overflow-hidden cursor-pointer ${className}`}\n\t\t\t>\n\t\t\t\t{showBorder && (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"absolute inset-0 bg-cover z-0 pointer-events-none\"\n\t\t\t\t\t\tstyle={gradientStyle}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"absolute inset-0 bg-black rounded-[1.25rem] z-[-1]\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\twidth: \"calc(100% - 2px)\",\n\t\t\t\t\t\t\t\theight: \"calc(100% - 2px)\",\n\t\t\t\t\t\t\t\tleft: \"50%\",\n\t\t\t\t\t\t\t\ttop: \"50%\",\n\t\t\t\t\t\t\t\ttransform: \"translate(-50%, -50%)\",\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t></div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"inline-block relative z-2 text-transparent bg-cover\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\t...gradientStyle,\n\t\t\t\t\t\tbackgroundClip: \"text\",\n\t\t\t\t\t\tWebkitBackgroundClip: \"text\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nconst GradientView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4 space-y-8\">\n\t\t\t<GradientText className=\"text-4xl md:text-6xl font-bold\">\n\t\t\t\tGradient Animation\n\t\t\t</GradientText>\n\t\t</div>\n\t);\n};\n\nexport default GradientView;\n",
      "type": "registry:ui"
    },
    {
      "path": "morphing.tsx",
      "content": "\"use client\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport type React from \"react\";\nimport { useEffect, useState } from \"react\";\n\ninterface MorphingTextProps {\n\twords?: string[];\n\tduration?: number;\n\tclassName?: string;\n}\n\nconst MorphingText: React.FC<MorphingTextProps> = ({\n\twords = [\"Innovation\", \"Excellence\", \"Creativity\", \"Future\", \"Success\"],\n\tduration = 3000,\n\tclassName = \"\",\n}) => {\n\tconst [currentIndex, setCurrentIndex] = useState(0);\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetCurrentIndex((prev) => (prev + 1) % words.length);\n\t\t}, duration);\n\n\t\treturn () => clearInterval(interval);\n\t}, [words.length, duration]);\n\n\treturn (\n\t\t<div className={`relative inline-block ${className}`}>\n\t\t\t<AnimatePresence mode=\"wait\">\n\t\t\t\t<motion.div\n\t\t\t\t\tkey={currentIndex}\n\t\t\t\t\tinitial={{\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\tfilter: \"blur(10px)\",\n\t\t\t\t\t\tscale: 0.8,\n\t\t\t\t\t\trotateX: -90,\n\t\t\t\t\t}}\n\t\t\t\t\tanimate={{\n\t\t\t\t\t\topacity: 1,\n\t\t\t\t\t\tfilter: \"blur(0px)\",\n\t\t\t\t\t\tscale: 1,\n\t\t\t\t\t\trotateX: 0,\n\t\t\t\t\t}}\n\t\t\t\t\texit={{\n\t\t\t\t\t\topacity: 0,\n\t\t\t\t\t\tfilter: \"blur(10px)\",\n\t\t\t\t\t\tscale: 1.2,\n\t\t\t\t\t\trotateX: 90,\n\t\t\t\t\t}}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tduration: 0.8,\n\t\t\t\t\t\tease: [0.25, 0.46, 0.45, 0.94],\n\t\t\t\t\t\tfilter: { duration: 0.6 },\n\t\t\t\t\t\tscale: { duration: 0.6 },\n\t\t\t\t\t\trotateX: { duration: 0.8 },\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent\"\n\t\t\t\t\tstyle={{ transformStyle: \"preserve-3d\" }}\n\t\t\t\t>\n\t\t\t\t\t{words[currentIndex]}\n\t\t\t\t</motion.div>\n\t\t\t</AnimatePresence>\n\t\t</div>\n\t);\n};\n\nexport default function MorphingView() {\n\treturn <MorphingText />;\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "particle.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\nimport type React from \"react\";\nimport { useEffect, useRef } from \"react\";\n\ninterface ParticleTextProps {\n\ttext?: string;\n\tclassName?: string;\n\tparticleCount?: number;\n\tparticleColor?: string;\n}\n\nconst ParticleText: React.FC<ParticleTextProps> = ({\n\ttext = \"PARTICLES\",\n\tclassName = \"\",\n\tparticleCount = 50,\n\tparticleColor = \"#3b82f6\",\n}) => {\n\tconst containerRef = useRef<HTMLDivElement>(null);\n\t// Removed unused particlesRef\n\n\tuseEffect(() => {\n\t\tconst container = containerRef.current;\n\t\tif (!container) return;\n\n\t\tconst particles: HTMLDivElement[] = [];\n\n\t\t// Create particles\n\t\tfor (let i = 0; i < particleCount; i++) {\n\t\t\tconst particle = document.createElement(\"div\");\n\t\t\tparticle.className = \"absolute w-1 h-1 rounded-full pointer-events-none\";\n\t\t\tparticle.style.backgroundColor = particleColor;\n\t\t\tparticle.style.opacity = Math.random().toString();\n\n\t\t\t// Random position around the text\n\t\t\tconst x = Math.random() * container.offsetWidth;\n\t\t\tconst y = Math.random() * container.offsetHeight;\n\t\t\tparticle.style.left = `${x}px`;\n\t\t\tparticle.style.top = `${y}px`;\n\n\t\t\tcontainer.appendChild(particle);\n\t\t\tparticles.push(particle);\n\t\t}\n\n\t\t// Animate particles\n\t\tconst animateParticles = () => {\n\t\t\tparticles.forEach((particle, index) => {\n\t\t\t\tconst time = Date.now() * 0.001 + index;\n\t\t\t\tconst x = Math.sin(time * 0.5) * 20 + Math.cos(time * 0.3) * 30;\n\t\t\t\tconst y = Math.cos(time * 0.4) * 15 + Math.sin(time * 0.6) * 25;\n\n\t\t\t\tparticle.style.transform = `translate(${x}px, ${y}px)`;\n\t\t\t\tparticle.style.opacity = (Math.sin(time * 2) * 0.5 + 0.5).toString();\n\t\t\t});\n\n\t\t\trequestAnimationFrame(animateParticles);\n\t\t};\n\n\t\tanimateParticles();\n\n\t\treturn () => {\n\t\t\tparticles.forEach((particle) => {\n\t\t\t\tif (particle.parentNode) {\n\t\t\t\t\tparticle.parentNode.removeChild(particle);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t}, [particleCount, particleColor]);\n\n\treturn (\n\t\t<div ref={containerRef} className={`relative inline-block ${className}`}>\n\t\t\t<motion.div\n\t\t\t\tinitial={{ opacity: 0, scale: 0.8 }}\n\t\t\t\tanimate={{ opacity: 1, scale: 1 }}\n\t\t\t\ttransition={{ duration: 1, ease: \"easeOut\" }}\n\t\t\t\tclassName=\"text-4xl md:text-6xl font-bold text-slate-800 dark:text-slate-200 relative z-10\"\n\t\t\t\tstyle={{\n\t\t\t\t\ttextShadow: `0 0 20px ${particleColor}40`,\n\t\t\t\t\tfilter: `drop-shadow(0 0 10px ${particleColor}60)`,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{text}\n\t\t\t</motion.div>\n\t\t</div>\n\t);\n};\n\nexport default function ParticleView() {\n\treturn <ParticleText />;\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "scalein.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\n\nconst ScaleInText = ({ text = \"Think Different\" }: { text?: string }) => {\n\treturn (\n\t\t<h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n\t\t\t{text.split(\"\").map((char, i) => (\n\t\t\t\t<motion.span\n\t\t\t\t\tkey={i}\n\t\t\t\t\tinitial={{ scale: 0, opacity: 0 }}\n\t\t\t\t\tanimate={{ scale: 1, opacity: 1 }}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tdelay: i * 0.08,\n\t\t\t\t\t\ttype: \"spring\",\n\t\t\t\t\t\tstiffness: 150,\n\t\t\t\t\t\tdamping: 10,\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"inline-block\"\n\t\t\t\t>\n\t\t\t\t\t{char === \" \" ? \"\\u00A0\" : char}\n\t\t\t\t</motion.span>\n\t\t\t))}\n\t\t</h2>\n\t);\n};\n\nconst ScaleInView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4 \">\n\t\t\t<ScaleInText text=\"Simplicity is the ultimate sophistication.\" />\n\t\t</div>\n\t);\n};\n\nexport default ScaleInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "shiny.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\n\ninterface ShinyTextProps {\n\ttext: string;\n\tdisabled?: boolean;\n\tspeed?: number;\n\tclassName?: string;\n}\n\nconst ShinyText: React.FC<ShinyTextProps> = ({\n\ttext,\n\tdisabled = false,\n\tspeed = 5,\n\tclassName = \"\",\n}) => {\n\tconst animationDuration = `${speed}s`;\n\n\treturn (\n\t\t<div\n\t\t\tclassName={`text-[#b5b5b5a4] bg-clip-text inline-block ${disabled ? \"\" : \"animate-shine\"} ${className}`}\n\t\t\tstyle={{\n\t\t\t\tbackgroundImage:\n\t\t\t\t\t\"linear-gradient(120deg, rgba(255, 255, 255, 0) 40%, rgba(255, 255, 255, 0.8) 50%, rgba(255, 255, 255, 0) 60%)\",\n\t\t\t\tbackgroundSize: \"200% 100%\",\n\t\t\t\tWebkitBackgroundClip: \"text\",\n\t\t\t\tanimationDuration: animationDuration,\n\t\t\t}}\n\t\t>\n\t\t\t{text}\n\t\t</div>\n\t);\n};\n\nconst ShinyView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4\">\n\t\t\t<ShinyText\n\t\t\t\ttext=\"Shiny Glowing Text\"\n\t\t\t\tclassName=\"text-4xl md:text-6xl font-bold text-center\"\n\t\t\t\tspeed={3}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ShinyView;\n",
      "type": "registry:ui"
    },
    {
      "path": "slideIn.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\n\nconst SlideInText = ({\n\ttext = \"Simplicity is the ultimate sophistication.\",\n}: {\n\ttext?: string;\n}) => {\n\treturn (\n\t\t<h2 className=\"text-2xl md:text-4xl font-bold text-center\">\n\t\t\t{text.split(\"\").map((char, i) => (\n\t\t\t\t<motion.span\n\t\t\t\t\tkey={i}\n\t\t\t\t\tinitial={{ x: -50, opacity: 0 }}\n\t\t\t\t\tanimate={{ x: 0, opacity: 1 }}\n\t\t\t\t\ttransition={{ delay: i * 0.03, ease: \"easeOut\" }}\n\t\t\t\t\tclassName=\"inline-block\"\n\t\t\t\t>\n\t\t\t\t\t{char === \" \" ? \"\\u00A0\" : char}\n\t\t\t\t</motion.span>\n\t\t\t))}\n\t\t</h2>\n\t);\n};\n\nconst SlideInView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4\">\n\t\t\t<SlideInText text=\"Simplicity is the ultimate sophistication.\" />\n\t\t</div>\n\t);\n};\n\nexport default SlideInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "staggeredpopin.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\n\nconst StaggeredPopInText = ({ text = \"Pop!\" }: { text?: string }) => {\n\treturn (\n\t\t<h2 className=\"text-6xl md:text-8xl font-bold flex justify-center\">\n\t\t\t{text.split(\"\").map((char, i) => (\n\t\t\t\t<motion.span\n\t\t\t\t\tkey={i}\n\t\t\t\t\tcustom={i}\n\t\t\t\t\tinitial={{ scale: 0, y: 20 }}\n\t\t\t\t\tanimate={{ scale: 1, y: 0 }}\n\t\t\t\t\ttransition={{\n\t\t\t\t\t\tdelay: i * 0.1,\n\t\t\t\t\t\ttype: \"spring\",\n\t\t\t\t\t\tstiffness: 200,\n\t\t\t\t\t\tdamping: 12,\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"inline-block\"\n\t\t\t\t>\n\t\t\t\t\t{char === \" \" ? \"\\u00A0\" : char}\n\t\t\t\t</motion.span>\n\t\t\t))}\n\t\t</h2>\n\t);\n};\n\nconst StaggeredPopInView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4\">\n\t\t\t<StaggeredPopInText text=\"Pop!\" />\n\t\t</div>\n\t);\n};\n\nexport default StaggeredPopInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "texturedmask.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\n\nconst TexturedMaskText = () => {\n\treturn (\n\t\t<motion.h2\n\t\t\tclassName=\"text-5xl md:text-8xl font-black uppercase text-transparent bg-clip-text\"\n\t\t\tstyle={{\n\t\t\t\tbackgroundImage:\n\t\t\t\t\t\"url(https://images.unsplash.com/photo-1501630834273-4b5604d2ee31?q=80&w=2070&auto=format&fit=crop)\",\n\t\t\t\tbackgroundSize: \"cover\",\n\t\t\t\tbackgroundPosition: \"center\",\n\t\t\t}}\n\t\t\tinitial={{ scale: 1.5 }}\n\t\t\tanimate={{ scale: 1 }}\n\t\t\ttransition={{\n\t\t\t\tduration: 10,\n\t\t\t\tease: \"linear\",\n\t\t\t\trepeat: Infinity,\n\t\t\t\trepeatType: \"reverse\",\n\t\t\t}}\n\t\t>\n\t\t\tExplore\n\t\t</motion.h2>\n\t);\n};\n\nconst TexturedMaskView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4 bg-black/5 dark:bg-white/5 rounded-lg\">\n\t\t\t<TexturedMaskText />\n\t\t</div>\n\t);\n};\n\nexport default TexturedMaskView;\n",
      "type": "registry:ui"
    },
    {
      "path": "typewriter.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\nimport type React from \"react\";\nimport { useEffect, useState } from \"react\";\n\ninterface TypewriterTextProps {\n\ttext?: string;\n\tspeed?: number;\n\tdeleteSpeed?: number;\n\tpauseDuration?: number;\n\tloop?: boolean;\n\tclassName?: string;\n\tshowCursor?: boolean;\n}\n\nconst TypewriterText: React.FC<TypewriterTextProps> = ({\n\ttext = \"Building the future, one line at a time...\",\n\tspeed = 100,\n\tdeleteSpeed = 50,\n\tpauseDuration = 2000,\n\tloop = true,\n\tclassName = \"\",\n\tshowCursor = true,\n}) => {\n\tconst [displayText, setDisplayText] = useState(\"\");\n\tconst [isDeleting, setIsDeleting] = useState(false);\n\tconst [isPaused, setIsPaused] = useState(false);\n\n\tuseEffect(() => {\n\t\tlet timeout: NodeJS.Timeout;\n\n\t\tif (isPaused) {\n\t\t\ttimeout = setTimeout(() => {\n\t\t\t\tsetIsPaused(false);\n\t\t\t\tif (loop) {\n\t\t\t\t\tsetIsDeleting(true);\n\t\t\t\t}\n\t\t\t}, pauseDuration);\n\t\t} else if (isDeleting) {\n\t\t\tif (displayText.length > 0) {\n\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\tsetDisplayText(text.substring(0, displayText.length - 1));\n\t\t\t\t}, deleteSpeed);\n\t\t\t} else {\n\t\t\t\tsetIsDeleting(false);\n\t\t\t}\n\t\t} else {\n\t\t\tif (displayText.length < text.length) {\n\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\tsetDisplayText(text.substring(0, displayText.length + 1));\n\t\t\t\t}, speed);\n\t\t\t} else if (loop) {\n\t\t\t\tsetIsPaused(true);\n\t\t\t}\n\t\t}\n\n\t\treturn () => clearTimeout(timeout);\n\t}, [\n\t\tdisplayText,\n\t\tisDeleting,\n\t\tisPaused,\n\t\ttext,\n\t\tspeed,\n\t\tdeleteSpeed,\n\t\tpauseDuration,\n\t\tloop,\n\t]);\n\n\treturn (\n\t\t<div className={`font-mono ${className}`}>\n\t\t\t<span className=\"text-2xl md:text-4xl font-bold text-slate-800 dark:text-slate-200\">\n\t\t\t\t{displayText}\n\t\t\t\t{showCursor && (\n\t\t\t\t\t<motion.span\n\t\t\t\t\t\tanimate={{ opacity: [1, 0] }}\n\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\tduration: 0.8,\n\t\t\t\t\t\t\trepeat: Infinity,\n\t\t\t\t\t\t\trepeatType: \"reverse\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"text-blue-500\"\n\t\t\t\t\t>\n\t\t\t\t\t\t|\n\t\t\t\t\t</motion.span>\n\t\t\t\t)}\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n\nexport default function TypewriterView() {\n\treturn <TypewriterText />;\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "wavy.tsx",
      "content": "\"use client\";\nimport { motion } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\n\nconst WavyText = ({ text = \"Wavy Motion\" }: { text?: string }) => {\n\tconst [animationTime, setAnimationTime] = useState(0);\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetAnimationTime((prev) => prev + 0.1);\n\t\t}, 50);\n\t\treturn () => clearInterval(interval);\n\t}, []);\n\n\treturn (\n\t\t<h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n\t\t\t{text.split(\"\").map((char, i) => {\n\t\t\t\tconst yOffset = Math.sin(animationTime + i * 0.3) * 10;\n\t\t\t\treturn (\n\t\t\t\t\t<motion.span\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\ty: yOffset,\n\t\t\t\t\t\t\ttransition: {\n\t\t\t\t\t\t\t\ttype: \"spring\",\n\t\t\t\t\t\t\t\tstiffness: 300,\n\t\t\t\t\t\t\t\tdamping: 30,\n\t\t\t\t\t\t\t\tmass: 0.8,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"inline-block\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{char === \" \" ? \"\\u00A0\" : char}\n\t\t\t\t\t</motion.span>\n\t\t\t\t);\n\t\t\t})}\n\t\t</h2>\n\t);\n};\n\nconst WavyView = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center font-sans p-4\">\n\t\t\t<WavyText text=\"Smooth Wave Flow\" />\n\t\t</div>\n\t);\n};\n\nexport default WavyView;\n",
      "type": "registry:ui"
    }
  ]
}