{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text",
  "title": "Text",
  "description": "A minimalistic text component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "text.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\n\nconst BlurInText = ({ text = \"Blur In Effect\" }: { text?: string }) => {\n    return (\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n            {text.split('').map((char, i) => (\n                <motion.span\n                    key={i}\n                    initial={{ \n                        opacity: 0,\n                        filter: \"blur(10px)\"\n                    }}\n                    animate={{ \n                        opacity: 1,\n                        filter: \"blur(0px)\"\n                    }}\n                    transition={{ \n                        delay: i * 0.05,\n                        duration: 0.8,\n                        ease: \"easeOut\"\n                    }}\n                    className=\"inline-block\"\n                >\n                    {char === ' ' ? '\\u00A0' : char}\n                </motion.span>\n            ))}\n        </h2>\n    );\n};\n\nconst BlurInView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\n            <BlurInText text=\"Sharp Focus Ahead\" />\n        </div>\n    );\n};\n\nexport default BlurInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "blurin.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\n\nconst BlurInText = ({ text = \"Blur In Effect\" }: { text?: string }) => {\n    return (\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n            {text.split('').map((char, i) => (\n                <motion.span\n                    key={i}\n                    initial={{ \n                        opacity: 0,\n                        filter: \"blur(10px)\"\n                    }}\n                    animate={{ \n                        opacity: 1,\n                        filter: \"blur(0px)\"\n                    }}\n                    transition={{ \n                        delay: i * 0.05,\n                        duration: 0.8,\n                        ease: \"easeOut\"\n                    }}\n                    className=\"inline-block\"\n                >\n                    {char === ' ' ? '\\u00A0' : char}\n                </motion.span>\n            ))}\n        </h2>\n    );\n};\n\nconst BlurInView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\n            <BlurInText text=\"Sharp Focus Ahead\" />\n        </div>\n    );\n};\n\nexport default BlurInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "bouncy.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\n\nconst BouncyText = ({ text = \"Bouncy Animation\" }: { text?: string }) => {\n    return (\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n            {text.split('').map((char, i) => (\n                <motion.span\n                    key={i}\n                    initial={{ y: 0 }}\n                    animate={{ \n                        y: [0, -20, 0],\n                        transition: {\n                            delay: i * 0.1,\n                            duration: 0.6,\n                            repeat: Infinity,\n                            repeatDelay: 2,\n                            ease: \"easeInOut\"\n                        }\n                    }}\n                    className=\"inline-block\"\n                >\n                    {char === ' ' ? '\\u00A0' : char}\n                </motion.span>\n            ))}\n        </h2>\n    );\n};\n\nconst BouncyView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\n            <BouncyText text=\"Creative Bouncy Text\" />\n        </div>\n    );\n};\n\nexport default BouncyView;\n",
      "type": "registry:ui"
    },
    {
      "path": "glitch.tsx",
      "content": "'use client';\nimport { FC, CSSProperties } from \"react\";\n\ninterface GlitchTextProps {\n  children: string;\n  speed?: number;\n  enableShadows?: boolean;\n  enableOnHover?: boolean;\n  className?: string;\n}\n\ninterface CustomCSSProperties extends CSSProperties {\n  \"--after-duration\": string;\n  \"--before-duration\": string;\n  \"--after-shadow\": string;\n  \"--before-shadow\": string;\n}\n\n// CSS styles as a string\nconst glitchStyles = `\n.glitch {\n  color: #fff;\n  font-size: clamp(2rem, 10vw, 8rem);\n  white-space: nowrap;\n  font-weight: 900;\n  position: relative;\n  margin: 0 auto;\n  user-select: none;\n  cursor: pointer;\n}\n\n.glitch::after,\n.glitch::before {\n  content: attr(data-text);\n  position: absolute;\n  top: 0;\n  color: #fff;\n  background-color: #060010;\n  overflow: hidden;\n  clip-path: inset(0 0 0 0);\n}\n\n.glitch:not(.enable-on-hover)::after {\n  left: 10px;\n  text-shadow: var(--after-shadow, -10px 0 red);\n  animation: animate-glitch var(--after-duration, 3s) infinite linear alternate-reverse;\n}\n.glitch:not(.enable-on-hover)::before {\n  left: -10px;\n  text-shadow: var(--before-shadow, 10px 0 cyan);\n  animation: animate-glitch var(--before-duration, 2s) infinite linear alternate-reverse;\n}\n\n.glitch.enable-on-hover::after,\n.glitch.enable-on-hover::before {\n  content: '';\n  opacity: 0;\n  animation: none;\n}\n\n.glitch.enable-on-hover:hover::after {\n  content: attr(data-text);\n  opacity: 1;\n  left: 10px;\n  text-shadow: var(--after-shadow, -10px 0 red);\n  animation: animate-glitch var(--after-duration, 3s) infinite linear alternate-reverse;\n}\n.glitch.enable-on-hover:hover::before {\n  content: attr(data-text);\n  opacity: 1;\n  left: -10px;\n  text-shadow: var(--before-shadow, 10px 0 cyan);\n  animation: animate-glitch var(--before-duration, 2s) infinite linear alternate-reverse;\n}\n\n@keyframes animate-glitch {\n  0%   { clip-path: inset(20% 0 50% 0); }\n  5%   { clip-path: inset(10% 0 60% 0); }\n  10%  { clip-path: inset(15% 0 55% 0); }\n  15%  { clip-path: inset(25% 0 35% 0); }\n  20%  { clip-path: inset(30% 0 40% 0); }\n  25%  { clip-path: inset(40% 0 20% 0); }\n  30%  { clip-path: inset(10% 0 60% 0); }\n  35%  { clip-path: inset(15% 0 55% 0); }\n  40%  { clip-path: inset(25% 0 35% 0); }\n  45%  { clip-path: inset(30% 0 40% 0); }\n  50%  { clip-path: inset(20% 0 50% 0); }\n  55%  { clip-path: inset(10% 0 60% 0); }\n  60%  { clip-path: inset(15% 0 55% 0); }\n  65%  { clip-path: inset(25% 0 35% 0); }\n  70%  { clip-path: inset(30% 0 40% 0); }\n  75%  { clip-path: inset(40% 0 20% 0); }\n  80%  { clip-path: inset(20% 0 50% 0); }\n  85%  { clip-path: inset(10% 0 60% 0); }\n  90%  { clip-path: inset(15% 0 55% 0); }\n  95%  { clip-path: inset(25% 0 35% 0); }\n  100% { clip-path: inset(30% 0 40% 0); }\n}\n`;\n\nconst GlitchText: FC<GlitchTextProps> = ({\n  children,\n  speed = 0.5,\n  enableShadows = true,\n  enableOnHover = false,\n  className = \"\",\n}) => {\n  const inlineStyles: CustomCSSProperties = {\n    \"--after-duration\": `${speed * 3}s`,\n    \"--before-duration\": `${speed * 2}s`,\n    \"--after-shadow\": enableShadows ? \"-5px 0 red\" : \"none\",\n    \"--before-shadow\": enableShadows ? \"5px 0 cyan\" : \"none\",\n  };\n\n  const hoverClass = enableOnHover ? \"enable-on-hover\" : \"\";\n\n  return (\n    <>\n      {/* Inject CSS styles */}\n      <style dangerouslySetInnerHTML={{ __html: glitchStyles }} />\n      <div\n        className={`glitch ${hoverClass} ${className}`}\n        style={inlineStyles}\n        data-text={children}\n      >\n        {children}\n      </div>\n    </>\n  );\n};\n\nconst GlitchView = () => {\n  return (\n    <div className=\"font-sans p-4 space-y-8 overflow-hidden\">\n      <GlitchText speed={3.4}>\n        GLITCH EFFECT\n      </GlitchText>\n      \n      <GlitchText \n        speed={0.3}\n        enableOnHover={true}\n        className=\"text-2xl\"\n      >\n        HOVER ME\n      </GlitchText>\n      \n      <GlitchText \n        speed={0.8}\n        enableShadows={false}\n        className=\"text-xl\"\n      >\n        NO SHADOWS\n      </GlitchText>\n    </div>\n  );\n};\n\nexport default GlitchView;\n",
      "type": "registry:ui"
    },
    {
      "path": "gradient.tsx",
      "content": "'use client';\nimport React, { ReactNode } from 'react';\n\ninterface GradientTextProps {\n    children: ReactNode;\n    className?: string;\n    colors?: string[];\n    animationSpeed?: number;\n    showBorder?: boolean;\n}\n\n// Add the keyframes styles\nconst gradientKeyframes = `\n@keyframes gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n.animate-gradient {\n  animation: gradient 8s linear infinite;\n}\n`;\n\nfunction GradientText({\n    children,\n    className = \"\",\n    colors = [\"#ffaa40\", \"#9c40ff\", \"#ffaa40\"],\n    animationSpeed = 8,\n    showBorder = false,\n}: GradientTextProps) {\n    const gradientStyle = {\n        backgroundImage: `linear-gradient(to right, ${colors.join(\", \")})`,\n        backgroundSize: \"300% 100%\",\n        animation: `gradient ${animationSpeed}s linear infinite`,\n    };\n\n    return (\n        <>\n            {/* Inject keyframes styles */}\n            <style dangerouslySetInnerHTML={{ __html: gradientKeyframes }} />\n            <div\n                className={`relative mx-auto flex max-w-fit flex-row items-center justify-center rounded-[1.25rem] font-medium backdrop-blur transition-shadow duration-500 overflow-hidden cursor-pointer ${className}`}\n            >\n            {showBorder && (\n                <div\n                    className=\"absolute inset-0 bg-cover z-0 pointer-events-none\"\n                    style={gradientStyle}\n                >\n                    <div\n                        className=\"absolute inset-0 bg-black rounded-[1.25rem] z-[-1]\"\n                        style={{\n                            width: \"calc(100% - 2px)\",\n                            height: \"calc(100% - 2px)\",\n                            left: \"50%\",\n                            top: \"50%\",\n                            transform: \"translate(-50%, -50%)\",\n                        }}\n                    ></div>\n                </div>\n            )}\n            <div\n                className=\"inline-block relative z-2 text-transparent bg-cover\"\n                style={{\n                    ...gradientStyle,\n                    backgroundClip: \"text\",\n                    WebkitBackgroundClip: \"text\",\n                }}\n            >\n                {children}\n            </div>\n        </div>\n        </>\n    );\n}\n\nconst GradientView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4 space-y-8\">\n            <GradientText className=\"text-4xl md:text-6xl font-bold\">\n                Gradient Animation\n            </GradientText>\n        </div>\n    );\n};\n\nexport default GradientView;\n",
      "type": "registry:ui"
    },
    {
      "path": "morphing.tsx",
      "content": "'use client'\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface MorphingTextProps {\n  words?: string[];\n  duration?: number;\n  className?: string;\n}\n\nconst MorphingText: React.FC<MorphingTextProps> = ({\n  words = [\"Innovation\", \"Excellence\", \"Creativity\", \"Future\", \"Success\"],\n  duration = 3000,\n  className = \"\"\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentIndex((prev) => (prev + 1) % words.length);\n    }, duration);\n\n    return () => clearInterval(interval);\n  }, [words.length, duration]);\n\n  return (\n    <div className={`relative inline-block ${className}`}>\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={currentIndex}\n          initial={{ \n            opacity: 0,\n            filter: \"blur(10px)\",\n            scale: 0.8,\n            rotateX: -90\n          }}\n          animate={{ \n            opacity: 1,\n            filter: \"blur(0px)\",\n            scale: 1,\n            rotateX: 0\n          }}\n          exit={{ \n            opacity: 0,\n            filter: \"blur(10px)\",\n            scale: 1.2,\n            rotateX: 90\n          }}\n          transition={{\n            duration: 0.8,\n            ease: [0.25, 0.46, 0.45, 0.94],\n            filter: { duration: 0.6 },\n            scale: { duration: 0.6 },\n            rotateX: { duration: 0.8 }\n          }}\n          className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent\"\n          style={{ transformStyle: 'preserve-3d' }}\n        >\n          {words[currentIndex]}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default function MorphingView() {\n  return (\n      <MorphingText />\n  );\n}",
      "type": "registry:ui"
    },
    {
      "path": "particle.tsx",
      "content": "'use client'\nimport React, { useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface ParticleTextProps {\n  text?: string;\n  className?: string;\n  particleCount?: number;\n  particleColor?: string;\n}\n\nconst ParticleText: React.FC<ParticleTextProps> = ({\n  text = \"PARTICLES\",\n  className = \"\",\n  particleCount = 50,\n  particleColor = \"#3b82f6\"\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  // Removed unused particlesRef\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const particles: HTMLDivElement[] = [];\n    \n    // Create particles\n    for (let i = 0; i < particleCount; i++) {\n      const particle = document.createElement('div');\n      particle.className = 'absolute w-1 h-1 rounded-full pointer-events-none';\n      particle.style.backgroundColor = particleColor;\n      particle.style.opacity = Math.random().toString();\n      \n      // Random position around the text\n      const x = Math.random() * container.offsetWidth;\n      const y = Math.random() * container.offsetHeight;\n      particle.style.left = `${x}px`;\n      particle.style.top = `${y}px`;\n      \n      container.appendChild(particle);\n      particles.push(particle);\n    }\n\n    // Animate particles\n    const animateParticles = () => {\n      particles.forEach((particle, index) => {\n        const time = Date.now() * 0.001 + index;\n        const x = Math.sin(time * 0.5) * 20 + Math.cos(time * 0.3) * 30;\n        const y = Math.cos(time * 0.4) * 15 + Math.sin(time * 0.6) * 25;\n        \n        particle.style.transform = `translate(${x}px, ${y}px)`;\n        particle.style.opacity = (Math.sin(time * 2) * 0.5 + 0.5).toString();\n      });\n      \n      requestAnimationFrame(animateParticles);\n    };\n\n    animateParticles();\n\n    return () => {\n      particles.forEach(particle => {\n        if (particle.parentNode) {\n          particle.parentNode.removeChild(particle);\n        }\n      });\n    };\n  }, [particleCount, particleColor]);\n\n  return (\n    <div \n      ref={containerRef}\n      className={`relative inline-block ${className}`}\n    >\n      <motion.div\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 1, ease: \"easeOut\" }}\n        className=\"text-4xl md:text-6xl font-bold text-slate-800 dark:text-slate-200 relative z-10\"\n        style={{\n          textShadow: `0 0 20px ${particleColor}40`,\n          filter: `drop-shadow(0 0 10px ${particleColor}60)`\n        }}\n      >\n        {text}\n      </motion.div>\n    </div>\n  );\n};\n\nexport default function ParticleView() {\n  return (\n      <ParticleText />\n  );\n}",
      "type": "registry:ui"
    },
    {
      "path": "scalein.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\n\nconst ScaleInText = ({ text = \"Think Different\" }: { text?: string }) => {\n    return (\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n            {text.split('').map((char, i) => (\n                <motion.span\n                    key={i}\n                    initial={{ scale: 0, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{ delay: i * 0.08, type: 'spring', stiffness: 150, damping: 10 }}\n                    className=\"inline-block\"\n                >\n                    {char === ' ' ? '\\u00A0' : char}\n                </motion.span>\n            ))}\n        </h2>\n    );\n};\n\nconst ScaleInView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4 \">\n            <ScaleInText text=\"Simplicity is the ultimate sophistication.\" />\n        </div>\n    );\n};\n\nexport default ScaleInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "shiny.tsx",
      "content": "'use client';\nimport React from 'react';\n\ninterface ShinyTextProps {\n    text: string;\n    disabled?: boolean;\n    speed?: number;\n    className?: string;\n}\n\nconst ShinyText: React.FC<ShinyTextProps> = ({ text, disabled = false, speed = 5, className = '' }) => {\n    const animationDuration = `${speed}s`;\n\n    return (\n        <div\n            className={`text-[#b5b5b5a4] bg-clip-text inline-block ${disabled ? '' : 'animate-shine'} ${className}`}\n            style={{\n                backgroundImage: 'linear-gradient(120deg, rgba(255, 255, 255, 0) 40%, rgba(255, 255, 255, 0.8) 50%, rgba(255, 255, 255, 0) 60%)',\n                backgroundSize: '200% 100%',\n                WebkitBackgroundClip: 'text',\n                animationDuration: animationDuration,\n            }}\n        >\n            {text}\n        </div>\n    );\n};\n\nconst ShinyView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\n            <ShinyText\n                text=\"Shiny Glowing Text\"\n                className=\"text-4xl md:text-6xl font-bold text-center\"\n                speed={3}\n            />\n        </div>\n    );\n};\n\nexport default ShinyView;\n",
      "type": "registry:ui"
    },
    {
      "path": "slideIn.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\n\nconst SlideInText = ({ text = \"Simplicity is the ultimate sophistication.\" }: { text?: string }) => {\n    return (\n        <h2 className=\"text-2xl md:text-4xl font-bold text-center\">\n            {text.split('').map((char, i) => (\n                <motion.span\n                    key={i}\n                    initial={{ x: -50, opacity: 0 }}\n                    animate={{ x: 0, opacity: 1 }}\n                    transition={{ delay: i * 0.03, ease: \"easeOut\" }}\n                    className=\"inline-block\"\n                >\n                    {char === ' ' ? '\\u00A0' : char}\n                </motion.span>\n            ))}\n        </h2>\n    );\n};\n\nconst SlideInView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\n            <SlideInText text=\"Simplicity is the ultimate sophistication.\" />\n        </div>\n    );\n};\n\nexport default SlideInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "staggeredpopin.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\n\nconst StaggeredPopInText = ({ text = \"Pop!\" }: { text?: string }) => {\n    return (\n        <h2 className=\"text-6xl md:text-8xl font-bold flex justify-center\">\n            {text.split('').map((char, i) => (\n                <motion.span\n                    key={i}\n                    custom={i}\n                    initial={{ scale: 0, y: 20 }}\n                    animate={{ scale: 1, y: 0 }}\n                    transition={{ delay: i * 0.1, type: 'spring', stiffness: 200, damping: 12 }}\n                    className=\"inline-block\"\n                >\n                    {char === ' ' ? '\\u00A0' : char}\n                </motion.span>\n            ))}\n        </h2>\n    );\n};\n\nconst StaggeredPopInView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\n            <StaggeredPopInText text=\"Pop!\" />\n        </div>\n    );\n};\n\nexport default StaggeredPopInView;\n",
      "type": "registry:ui"
    },
    {
      "path": "texturedmask.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\n\nconst TexturedMaskText = () => {\n    return (\n        <motion.h2\n            className=\"text-5xl md:text-8xl font-black uppercase text-transparent bg-clip-text\"\n            style={{\n                backgroundImage: 'url(https://images.unsplash.com/photo-1501630834273-4b5604d2ee31?q=80&w=2070&auto=format&fit=crop)',\n                backgroundSize: 'cover',\n                backgroundPosition: 'center',\n            }}\n            initial={{ scale: 1.5 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 10, ease: 'linear', repeat: Infinity, repeatType: 'reverse' }}\n        >\n            Explore\n        </motion.h2>\n    );\n};\n\nconst TexturedMaskView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4 bg-black/5 dark:bg-white/5 rounded-lg\">\n            <TexturedMaskText />\n        </div>\n    );\n};\n\nexport default TexturedMaskView;\n",
      "type": "registry:ui"
    },
    {
      "path": "typewriter.tsx",
      "content": "'use client'\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface TypewriterTextProps {\n  text?: string;\n  speed?: number;\n  deleteSpeed?: number;\n  pauseDuration?: number;\n  loop?: boolean;\n  className?: string;\n  showCursor?: boolean;\n}\n\nconst TypewriterText: React.FC<TypewriterTextProps> = ({\n  text = \"Building the future, one line at a time...\",\n  speed = 100,\n  deleteSpeed = 50,\n  pauseDuration = 2000,\n  loop = true,\n  className = \"\",\n  showCursor = true\n}) => {\n  const [displayText, setDisplayText] = useState('');\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n\n    if (isPaused) {\n      timeout = setTimeout(() => {\n        setIsPaused(false);\n        if (loop) {\n          setIsDeleting(true);\n        }\n      }, pauseDuration);\n    } else if (isDeleting) {\n      if (displayText.length > 0) {\n        timeout = setTimeout(() => {\n          setDisplayText(text.substring(0, displayText.length - 1));\n        }, deleteSpeed);\n      } else {\n        setIsDeleting(false);\n      }\n    } else {\n      if (displayText.length < text.length) {\n        timeout = setTimeout(() => {\n          setDisplayText(text.substring(0, displayText.length + 1));\n        }, speed);\n      } else if (loop) {\n        setIsPaused(true);\n      }\n    }\n\n    return () => clearTimeout(timeout);\n  }, [displayText, isDeleting, isPaused, text, speed, deleteSpeed, pauseDuration, loop]);\n\n  return (\n    <div className={`font-mono ${className}`}>\n      <span className=\"text-2xl md:text-4xl font-bold text-slate-800 dark:text-slate-200\">\n        {displayText}\n        {showCursor && (\n          <motion.span\n            animate={{ opacity: [1, 0] }}\n            transition={{ duration: 0.8, repeat: Infinity, repeatType: \"reverse\" }}\n            className=\"text-blue-500\"\n          >\n            |\n          </motion.span>\n        )}\n      </span>\n    </div>\n  );\n};\n\nexport default function TypewriterView() {\n  return (\n      <TypewriterText />\n  );\n}",
      "type": "registry:ui"
    },
    {
      "path": "wavy.tsx",
      "content": "'use client';\nimport { motion } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\n\nconst WavyText = ({ text = \"Wavy Motion\" }: { text?: string }) => {\n    const [animationTime, setAnimationTime] = useState(0);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setAnimationTime(prev => prev + 0.1);\n        }, 50);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <h2 className=\"text-4xl md:text-6xl font-bold text-center\">\n            {text.split('').map((char, i) => {\n                const yOffset = Math.sin(animationTime + i * 0.3) * 10;\n                return (\n                    <motion.span\n                        key={i}\n                        animate={{\n                            y: yOffset,\n                            transition: {\n                                type: \"spring\",\n                                stiffness: 300,\n                                damping: 30,\n                                mass: 0.8\n                            }\n                        }}\n                        className=\"inline-block\"\n                    >\n                        {char === ' ' ? '\\u00A0' : char}\n                    </motion.span>\n                );\n            })}\n        </h2>\n    );\n};\n\nconst WavyView = () => {\n    return (\n        <div className=\"flex flex-col items-center justify-center font-sans p-4\">\n            <WavyText text=\"Smooth Wave Flow\" />\n        </div>\n    );\n};\n\nexport default WavyView;\n",
      "type": "registry:ui"
    }
  ]
}