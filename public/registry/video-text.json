{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "video-text",
	"title": "Video Text",
	"description": "A minimalistic video text component designed with React and Tailwind CSS.",
	"author": "Reche Soares",
	"type": "registry:ui",
	"dependencies": [],
	"devDependencies": [],
	"registryDependencies": [],
	"cssVars": {
		"dark": {},
		"light": {}
	},
	"files": [
		{
			"path": "video-text.tsx",
			"content": "'use client'\nimport React, { ElementType, ReactNode, useEffect, useState, useRef, useMemo, useCallback } from \"react\";\n\n// Improved type-safe class name utility\nconst cn = (...inputs: (string | undefined | null | false)[]) => {\n  return inputs.filter(Boolean).join(\" \");\n};\n\n\nexport interface VideoTextProps {\n\n  src: string;\n  className?: string;\n  autoPlay?: boolean;\n  muted?: boolean;\n  loop?: boolean;\n  preload?: \"auto\" | \"metadata\" | \"none\";\n  children: ReactNode;\n  fontSize?: string | number;\n  fontWeight?: string | number;\n  textAnchor?: \"start\" | \"middle\" | \"end\";\n  dominantBaseline?: \"auto\" | \"middle\" | \"hanging\" | \"alphabetic\" | \"ideographic\" | \"text-bottom\" | \"text-top\";\n  fontFamily?: string;\n  as?: ElementType;\n  letterSpacing?: string | number;\n  lineHeight?: string | number;\n  textTransform?: \"none\" | \"uppercase\" | \"lowercase\" | \"capitalize\";\n  onVideoLoad?: () => void;\n  onVideoError?: (error: Event) => void;\n  sources?: Array<{ src: string; type: string }>;\n  poster?: string;\n}\n\nexport function VideoText({\n  src,\n  children,\n  className = \"\",\n  autoPlay = true,\n  muted = true,\n  loop = true,\n  preload = \"auto\",\n  fontSize = 18,\n  fontWeight = \"bold\",\n  textAnchor = \"middle\",\n  dominantBaseline = \"middle\",\n  fontFamily = \"sans-serif\",\n  as: Component = \"div\",\n  letterSpacing,\n  textTransform = \"none\",\n  onVideoLoad,\n  onVideoError,\n  sources = [],\n  poster,\n}: VideoTextProps) {\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  \n  // Memoize content conversion to avoid unnecessary recalculations\n  const content = useMemo(() => {\n    return React.Children.toArray(children)\n      .map(child => {\n        if (typeof child === 'string' || typeof child === 'number') {\n          return child;\n        }\n        return '';\n      })\n      .join('');\n  }, [children]);\n\n  // Memoize SVG generation\n  const svgMask = useMemo(() => {\n    const responsiveFontSize =\n      typeof fontSize === \"number\" ? `${fontSize}vw` : fontSize;\n    \n    // Escape special characters in content for SVG\n    const escapedContent = content\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;');\n    \n    const svgString = `\n      <svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%'>\n        <text \n          x='50%' \n          y='50%' \n          font-size='${responsiveFontSize}' \n          font-weight='${fontWeight}' \n          text-anchor='${textAnchor}' \n          dominant-baseline='${dominantBaseline}' \n          font-family='${fontFamily}'\n          ${letterSpacing ? `letter-spacing='${letterSpacing}'` : ''}\n          ${textTransform !== 'none' ? `text-transform='${textTransform}'` : ''}\n        >\n          ${escapedContent}\n        </text>\n      </svg>\n    `;\n    \n    return `url(\"data:image/svg+xml,${encodeURIComponent(svgString.trim())}\")`;\n  }, [content, fontSize, fontWeight, textAnchor, dominantBaseline, fontFamily, letterSpacing, textTransform]);\n\n  // Handle video load\n  const handleVideoLoad = useCallback(() => {\n    setIsVideoLoaded(true);\n    onVideoLoad?.();\n  }, [onVideoLoad]);\n\n  // Handle video error\n  const handleVideoError = useCallback((event: React.SyntheticEvent<HTMLVideoElement, Event>) => {\n    console.error('Video failed to load:', event);\n    onVideoError?.(event.nativeEvent);\n  }, [onVideoError]);\n\n  // Attempt to play video on mount (for browsers that block autoplay)\n  useEffect(() => {\n    if (videoRef.current && autoPlay) {\n      videoRef.current.play().catch(error => {\n        console.warn('Autoplay was prevented:', error);\n      });\n    }\n  }, [autoPlay]);\n\n  return (\n    <Component className={cn(\"relative w-full h-full overflow-hidden\", className)}>\n      {/* Video container with mask */}\n      <div\n        className={cn(\n          \"absolute inset-0 flex items-center justify-center\",\n          !isVideoLoaded && \"opacity-0 transition-opacity duration-500\"\n        )}\n        style={{\n          maskImage: svgMask,\n          WebkitMaskImage: svgMask,\n          maskSize: \"contain\",\n          WebkitMaskSize: \"contain\",\n          maskRepeat: \"no-repeat\",\n          WebkitMaskRepeat: \"no-repeat\",\n          maskPosition: \"center\",\n          WebkitMaskPosition: \"center\",\n          opacity: isVideoLoaded ? 1 : 0,\n          transition: \"opacity 0.5s ease-in-out\",\n        }}\n      >\n        <video\n          ref={videoRef}\n          className=\"w-full h-full object-cover\"\n          autoPlay={autoPlay}\n          muted={muted}\n          loop={loop}\n          preload={preload}\n          playsInline\n          poster={poster}\n          onLoadedData={handleVideoLoad}\n          onError={handleVideoError}\n        >\n          {/* Primary source */}\n          <source src={src} type=\"video/mp4\" />\n          \n          {/* Alternative sources */}\n          {sources.map((source, index) => (\n            <source key={index} src={source.src} type={source.type} />\n          ))}\n          \n          Your browser does not support the video tag.\n        </video>\n      </div>\n\n      {/* Loading state (optional) */}\n      {!isVideoLoaded && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-white text-opacity-50\">Loading...</div>\n        </div>\n      )}\n\n      {/* Screen reader text */}\n      <span className=\"sr-only\">{content}</span>\n    </Component>\n  );\n}\n\n// -----------------------------------------------------------------------------\n// Enhanced Example App\n// -----------------------------------------------------------------------------\nexport default function Videotext() {\n  return (\n    <main className=\"text-white flex items-center justify-center w-screen h-[400px] overflow-hidden\">\n      <div className=\"w-full h-1/2 max-w-4xl\">\n        <VideoText \n          src=\"https://ls29t3z55w.ufs.sh/f/JEKFIJDsOBct0vrmLYJRG8BKHmvZQkWJ9ElIVcNfzPg63Mbo\"\n          fontFamily=\"Helvetica, Arial, sans-serif\"\n          fontSize={20}\n          letterSpacing=\"0.05em\"\n          textTransform=\"uppercase\"\n          sources={[\n            { src: \"fallback.webm\", type: \"video/webm\" },\n            { src: \"fallback.ogv\", type: \"video/ogg\" }\n          ]}\n          onVideoLoad={() => console.log('Video loaded successfully')}\n          onVideoError={(error) => console.error('Video error:', error)}\n        >\n          Solancn UI\n        </VideoText>\n      </div>\n    </main>\n  );\n}",
			"type": "registry:ui"
		}
	]
}
