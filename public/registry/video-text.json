{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "video-text",
  "title": "Video Text",
  "description": "A minimalistic video text component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "video-text.tsx",
      "content": "\"use client\";\nimport React, {\n\ttype ElementType,\n\ttype ReactNode,\n\tuseCallback,\n\tuseEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from \"react\";\n\n// Improved type-safe class name utility\nconst cn = (...inputs: (string | undefined | null | false)[]) => {\n\treturn inputs.filter(Boolean).join(\" \");\n};\n\nexport interface VideoTextProps {\n\tsrc: string;\n\tclassName?: string;\n\tautoPlay?: boolean;\n\tmuted?: boolean;\n\tloop?: boolean;\n\tpreload?: \"auto\" | \"metadata\" | \"none\";\n\tchildren: ReactNode;\n\tfontSize?: string | number;\n\tfontWeight?: string | number;\n\ttextAnchor?: \"start\" | \"middle\" | \"end\";\n\tdominantBaseline?:\n\t\t| \"auto\"\n\t\t| \"middle\"\n\t\t| \"hanging\"\n\t\t| \"alphabetic\"\n\t\t| \"ideographic\"\n\t\t| \"text-bottom\"\n\t\t| \"text-top\";\n\tfontFamily?: string;\n\tas?: ElementType;\n\tletterSpacing?: string | number;\n\tlineHeight?: string | number;\n\ttextTransform?: \"none\" | \"uppercase\" | \"lowercase\" | \"capitalize\";\n\tonVideoLoad?: () => void;\n\tonVideoError?: (error: Event) => void;\n\tsources?: Array<{ src: string; type: string }>;\n\tposter?: string;\n}\n\nexport function VideoText({\n\tsrc,\n\tchildren,\n\tclassName = \"\",\n\tautoPlay = true,\n\tmuted = true,\n\tloop = true,\n\tpreload = \"auto\",\n\tfontSize = 18,\n\tfontWeight = \"bold\",\n\ttextAnchor = \"middle\",\n\tdominantBaseline = \"middle\",\n\tfontFamily = \"sans-serif\",\n\tas: Component = \"div\",\n\tletterSpacing,\n\ttextTransform = \"none\",\n\tonVideoLoad,\n\tonVideoError,\n\tsources = [],\n\tposter,\n}: VideoTextProps) {\n\tconst [isVideoLoaded, setIsVideoLoaded] = useState(false);\n\tconst videoRef = useRef<HTMLVideoElement>(null);\n\n\t// Memoize content conversion to avoid unnecessary recalculations\n\tconst content = useMemo(() => {\n\t\treturn React.Children.toArray(children)\n\t\t\t.map((child) => {\n\t\t\t\tif (typeof child === \"string\" || typeof child === \"number\") {\n\t\t\t\t\treturn child;\n\t\t\t\t}\n\t\t\t\treturn \"\";\n\t\t\t})\n\t\t\t.join(\"\");\n\t}, [children]);\n\n\t// Memoize SVG generation\n\tconst svgMask = useMemo(() => {\n\t\tconst responsiveFontSize =\n\t\t\ttypeof fontSize === \"number\" ? `${fontSize}vw` : fontSize;\n\n\t\t// Escape special characters in content for SVG\n\t\tconst escapedContent = content\n\t\t\t.replace(/&/g, \"&amp;\")\n\t\t\t.replace(/</g, \"&lt;\")\n\t\t\t.replace(/>/g, \"&gt;\")\n\t\t\t.replace(/\"/g, \"&quot;\")\n\t\t\t.replace(/'/g, \"&#39;\");\n\n\t\tconst svgString = `\n      <svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%'>\n        <text \n          x='50%' \n          y='50%' \n          font-size='${responsiveFontSize}' \n          font-weight='${fontWeight}' \n          text-anchor='${textAnchor}' \n          dominant-baseline='${dominantBaseline}' \n          font-family='${fontFamily}'\n          ${letterSpacing ? `letter-spacing='${letterSpacing}'` : \"\"}\n          ${textTransform !== \"none\" ? `text-transform='${textTransform}'` : \"\"}\n        >\n          ${escapedContent}\n        </text>\n      </svg>\n    `;\n\n\t\treturn `url(\"data:image/svg+xml,${encodeURIComponent(svgString.trim())}\")`;\n\t}, [\n\t\tcontent,\n\t\tfontSize,\n\t\tfontWeight,\n\t\ttextAnchor,\n\t\tdominantBaseline,\n\t\tfontFamily,\n\t\tletterSpacing,\n\t\ttextTransform,\n\t]);\n\n\t// Handle video load\n\tconst handleVideoLoad = useCallback(() => {\n\t\tsetIsVideoLoaded(true);\n\t\tonVideoLoad?.();\n\t}, [onVideoLoad]);\n\n\t// Handle video error\n\tconst handleVideoError = useCallback(\n\t\t(event: React.SyntheticEvent<HTMLVideoElement, Event>) => {\n\t\t\tconsole.error(\"Video failed to load:\", event);\n\t\t\tonVideoError?.(event.nativeEvent);\n\t\t},\n\t\t[onVideoError],\n\t);\n\n\t// Attempt to play video on mount (for browsers that block autoplay)\n\tuseEffect(() => {\n\t\tif (videoRef.current && autoPlay) {\n\t\t\tvideoRef.current.play().catch((error) => {\n\t\t\t\tconsole.warn(\"Autoplay was prevented:\", error);\n\t\t\t});\n\t\t}\n\t}, [autoPlay]);\n\n\treturn (\n\t\t<Component\n\t\t\tclassName={cn(\"relative w-full h-full overflow-hidden\", className)}\n\t\t>\n\t\t\t{/* Video container with mask */}\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"absolute inset-0 flex items-center justify-center\",\n\t\t\t\t\t!isVideoLoaded && \"opacity-0 transition-opacity duration-500\",\n\t\t\t\t)}\n\t\t\t\tstyle={{\n\t\t\t\t\tmaskImage: svgMask,\n\t\t\t\t\tWebkitMaskImage: svgMask,\n\t\t\t\t\tmaskSize: \"contain\",\n\t\t\t\t\tWebkitMaskSize: \"contain\",\n\t\t\t\t\tmaskRepeat: \"no-repeat\",\n\t\t\t\t\tWebkitMaskRepeat: \"no-repeat\",\n\t\t\t\t\tmaskPosition: \"center\",\n\t\t\t\t\tWebkitMaskPosition: \"center\",\n\t\t\t\t\topacity: isVideoLoaded ? 1 : 0,\n\t\t\t\t\ttransition: \"opacity 0.5s ease-in-out\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<video\n\t\t\t\t\tref={videoRef}\n\t\t\t\t\tclassName=\"w-full h-full object-cover\"\n\t\t\t\t\tautoPlay={autoPlay}\n\t\t\t\t\tmuted={muted}\n\t\t\t\t\tloop={loop}\n\t\t\t\t\tpreload={preload}\n\t\t\t\t\tplaysInline\n\t\t\t\t\tposter={poster}\n\t\t\t\t\tonLoadedData={handleVideoLoad}\n\t\t\t\t\tonError={handleVideoError}\n\t\t\t\t>\n\t\t\t\t\t{/* Primary source */}\n\t\t\t\t\t<source src={src} type=\"video/mp4\" />\n\t\t\t\t\t{/* Alternative sources */}\n\t\t\t\t\t{sources.map((source, index) => (\n\t\t\t\t\t\t<source key={index} src={source.src} type={source.type} />\n\t\t\t\t\t))}\n\t\t\t\t\tYour browser does not support the video tag.\n\t\t\t\t</video>\n\t\t\t</div>\n\n\t\t\t{/* Loading state (optional) */}\n\t\t\t{!isVideoLoaded && (\n\t\t\t\t<div className=\"absolute inset-0 flex items-center justify-center\">\n\t\t\t\t\t<div className=\"text-white text-opacity-50\">Loading...</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{/* Screen reader text */}\n\t\t\t<span className=\"sr-only\">{content}</span>\n\t\t</Component>\n\t);\n}\n\n// -----------------------------------------------------------------------------\n// Enhanced Example App\n// -----------------------------------------------------------------------------\nexport default function Videotext() {\n\treturn (\n\t\t<main className=\"text-white flex items-center justify-center w-screen h-[400px] overflow-hidden\">\n\t\t\t<div className=\"w-full h-1/2 max-w-4xl\">\n\t\t\t\t<VideoText\n\t\t\t\t\tsrc=\"https://ls29t3z55w.ufs.sh/f/JEKFIJDsOBct0vrmLYJRG8BKHmvZQkWJ9ElIVcNfzPg63Mbo\"\n\t\t\t\t\tfontFamily=\"Helvetica, Arial, sans-serif\"\n\t\t\t\t\tfontSize={20}\n\t\t\t\t\tletterSpacing=\"0.05em\"\n\t\t\t\t\ttextTransform=\"uppercase\"\n\t\t\t\t\tsources={[\n\t\t\t\t\t\t{ src: \"fallback.webm\", type: \"video/webm\" },\n\t\t\t\t\t\t{ src: \"fallback.ogv\", type: \"video/ogg\" },\n\t\t\t\t\t]}\n\t\t\t\t\tonVideoLoad={() => console.log(\"Video loaded successfully\")}\n\t\t\t\t\tonVideoError={(error) => console.error(\"Video error:\", error)}\n\t\t\t\t>\n\t\t\t\t\tSolancn UI\n\t\t\t\t</VideoText>\n\t\t\t</div>\n\t\t</main>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}