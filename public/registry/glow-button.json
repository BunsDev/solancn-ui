{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "glow-button",
	"title": "Glow Button",
	"description": "A minimalistic glow button component designed with React and Tailwind CSS.",
	"author": "Reche Soares",
	"type": "registry:ui",
	"dependencies": [],
	"devDependencies": [],
	"registryDependencies": [],
	"cssVars": {
		"dark": {},
		"light": {}
	},
	"files": [
		{
			"path": "glow-button.tsx",
			"content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\n\ninterface GlowButtonProps {\n  children: React.ReactNode;\n  variant?: \"blue\" | \"pink\" | \"green\";\n}\n\nconst variants = {\n  blue: {\n    light: {\n      outerGlow: \"rgba(59, 130, 246, 0.4)\",\n      blobGlow: \"rgba(59, 130, 246, 0.6)\",\n      blobHighlight: \"#60a5fa\",\n      blobShadow: \"rgba(59, 130, 246, 0.25)\",\n      innerGlow: \"rgba(59, 130, 246, 0.1)\",\n      innerHighlight: \"rgba(147, 197, 253, 0.15)\",\n      outerBg: \"linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)\",\n      innerBg: \"linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%)\",\n      textColor: \"#1e293b\",\n    },\n    dark: {\n      outerGlow: \"rgba(255, 255, 255, 0.35)\",\n      blobGlow: \"rgba(0, 0, 255, 0.5)\",\n      blobHighlight: \"#3fe9ff\",\n      blobShadow: \"rgba(0, 81, 255, 0.18)\",\n      innerGlow: \"rgba(0, 0, 255, 0.07)\",\n      innerHighlight: \"rgba(0, 225, 255, 0.1)\",\n      outerBg: \"radial-gradient(circle 80px at 80% -10%, #ffffff, #181b1b)\",\n      innerBg: \"radial-gradient(circle 80px at 80% -50%, #777777, #0f1111)\",\n      textColor: \"#ffffff\",\n    },\n  },\n  pink: {\n    light: {\n      outerGlow: \"rgba(236, 72, 153, 0.4)\",\n      blobGlow: \"rgba(236, 72, 153, 0.6)\",\n      blobHighlight: \"#f472b6\",\n      blobShadow: \"rgba(236, 72, 153, 0.25)\",\n      innerGlow: \"rgba(236, 72, 153, 0.1)\",\n      innerHighlight: \"rgba(251, 207, 232, 0.15)\",\n      outerBg: \"linear-gradient(135deg, #fdf2f8 0%, #fce7f3 100%)\",\n      innerBg: \"linear-gradient(135deg, #ffffff 0%, #fdf2f8 100%)\",\n      textColor: \"#831843\",\n    },\n    dark: {\n      outerGlow: \"rgba(255, 230, 255, 0.4)\",\n      blobGlow: \"rgba(255, 0, 150, 0.5)\",\n      blobHighlight: \"#ff66cc\",\n      blobShadow: \"rgba(255, 0, 150, 0.18)\",\n      innerGlow: \"rgba(255, 0, 150, 0.07)\",\n      innerHighlight: \"rgba(255, 102, 204, 0.1)\",\n      outerBg: \"radial-gradient(circle 80px at 80% -10%, #ffffff, #181b1b)\",\n      innerBg: \"radial-gradient(circle 80px at 80% -50%, #777777, #0f1111)\",\n      textColor: \"#ffffff\",\n    },\n  },\n  green: {\n    light: {\n      outerGlow: \"rgba(34, 197, 94, 0.4)\",\n      blobGlow: \"rgba(34, 197, 94, 0.6)\",\n      blobHighlight: \"#4ade80\",\n      blobShadow: \"rgba(34, 197, 94, 0.25)\",\n      innerGlow: \"rgba(34, 197, 94, 0.1)\",\n      innerHighlight: \"rgba(187, 247, 208, 0.15)\",\n      outerBg: \"linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%)\",\n      innerBg: \"linear-gradient(135deg, #ffffff 0%, #f0fdf4 100%)\",\n      textColor: \"#14532d\",\n    },\n    dark: {\n      outerGlow: \"rgba(230, 255, 230, 0.4)\",\n      blobGlow: \"rgba(0, 255, 100, 0.5)\",\n      blobHighlight: \"#adff2f\",\n      blobShadow: \"rgba(0, 255, 100, 0.18)\",\n      innerGlow: \"rgba(0, 255, 100, 0.07)\",\n      innerHighlight: \"rgba(173, 255, 47, 0.1)\",\n      outerBg: \"radial-gradient(circle 80px at 80% -10%, #ffffff, #181b1b)\",\n      innerBg: \"radial-gradient(circle 80px at 80% -50%, #777777, #0f1111)\",\n      textColor: \"#ffffff\",\n    },\n  },\n};\n\n// Custom hook to detect theme\nconst useTheme = () => {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const checkTheme = () => {\n      const isDarkMode =\n        document.documentElement.classList.contains(\"dark\") ||\n        window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n      setIsDark(isDarkMode);\n    };\n\n    checkTheme();\n\n    // Listen for theme changes\n    const observer = new MutationObserver(checkTheme);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    mediaQuery.addEventListener(\"change\", checkTheme);\n\n    return () => {\n      observer.disconnect();\n      mediaQuery.removeEventListener(\"change\", checkTheme);\n    };\n  }, []);\n\n  return isDark;\n};\n\nconst GlowButton: React.FC<GlowButtonProps> = ({\n  children,\n  variant = \"blue\",\n}) => {\n  const isDark = useTheme();\n  const variantColors = variants[variant] || variants.blue;\n  const colors = isDark ? variantColors.dark : variantColors.light;\n\n  return (\n    <button\n      className=\"relative cursor-pointer rounded-2xl border-none p-0.5 transition-transform duration-300 ease-in-out hover:scale-105 active:scale-95\"\n      style={{\n        background: colors.outerBg,\n      }}\n    >\n      <div\n        className=\"absolute top-0 right-0 h-[60%] w-[65%] rounded-[120px] -z-10\"\n        style={{ boxShadow: `0 0 30px ${colors.outerGlow}` }}\n      ></div>\n\n      <div\n        className=\"absolute bottom-0 left-0 h-full w-[70px] rounded-2xl\"\n        style={{\n          boxShadow: `-10px 10px 30px ${colors.blobShadow}`,\n          background: `radial-gradient(circle 60px at 0% 100%, ${colors.blobHighlight}, ${colors.blobGlow}, transparent)`,\n        }}\n      ></div>\n\n      <div\n        className=\"relative z-20 flex h-11 items-center justify-center overflow-hidden rounded-[14px] px-8\"\n        style={{\n          background: colors.innerBg,\n          color: colors.textColor,\n        }}\n      >\n        <div\n          className=\"absolute top-0 left-0 h-full w-full rounded-[14px]\"\n          style={{\n            background: `radial-gradient(circle 60px at 0% 100%, ${colors.innerHighlight}, ${colors.innerGlow}, transparent)`,\n          }}\n        ></div>\n\n        <span className=\"relative z-10 whitespace-nowrap text-lg font-semibold\">\n          {children}\n        </span>\n      </div>\n    </button>\n  );\n};\n\nexport default function SolancnButtonView() {\n  return (\n    <div className=\"flex gap-5\">\n      <GlowButton variant=\"blue\">Blue Glow</GlowButton>\n      <GlowButton variant=\"pink\">Pink Glow</GlowButton>\n      <GlowButton variant=\"green\">Green Glow</GlowButton>\n    </div>\n  );\n}\n",
			"type": "registry:ui"
		}
	]
}
