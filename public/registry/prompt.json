{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "prompt",
  "title": "Prompt",
  "description": "A minimalistic prompt component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "prompt.tsx",
      "content": "\"use client\"\nimport React, { useState, useEffect, useRef } from 'react';\n\n// Icons for the component\nimport { Plus, ChevronDown, Mic, ArrowUp, Image as ImageIcon, Box, FileText, Brain } from 'lucide-react';\n\nconst PromptComponent = () => {\n  const [prompt, setPrompt] = useState('');\n\n  // State to manage the visibility of popups and dropdowns\n  const [isAddPopupOpen, setAddPopupOpen] = useState(false);\n  const [isModelOpen, setModelOpen] = useState(false);\n\n  // State for the selected model\n  const [selectedModel, setSelectedModel] = useState('Brainwave 2.5');\n  const models = ['Brainwave 2.5', 'Creative Fusion', 'Visionary AI 3.0'];\n\n  // Refs for the popups to detect outside clicks\n  const addPopupRef = useRef<HTMLDivElement>(null);\n  const modelRef = useRef<HTMLDivElement>(null);\n  \n  // Effect to handle clicks outside of the popups/dropdowns\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (addPopupRef.current && !addPopupRef.current.contains(event.target as Node)) {\n        setAddPopupOpen(false);\n      }\n      if (modelRef.current && !modelRef.current.contains(event.target as Node)) {\n        setModelOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleModelSelect = (model: string) => {\n    setSelectedModel(model);\n    setModelOpen(false);\n  };\n  \n  const handleUpload = () => {\n    if(!prompt.trim()) {\n        // Using console.error instead of alert\n        console.error(\"Please describe your 3D object or scene first!\");\n        return;\n    }\n    console.log(`Uploading prompt: \"${prompt}\" with model: ${selectedModel}`);\n    // Add your upload logic here\n  }\n\n  const addMenuItems = [\n    { icon: <ImageIcon size={20} className=\"text-gray-500 dark:text-gray-400\" />, text: \"Add photos or videos\" },\n    { icon: <Box size={20} className=\"text-gray-500 dark:text-gray-400\" />, text: \"Add 3D objects\" },\n    { icon: <FileText size={20} className=\"text-gray-500 dark:text-gray-400\" />, text: \"Add files (docs, txt...)\" },\n  ];\n\n  return (\n    <div className=\"w-full max-w-2xl p-4\">\n      <div className=\"bg-white/80 backdrop-blur-xl dark:bg-black/90 rounded-3xl shadow-2xl border border-gray-200/50 dark:border-gray-800/50 p-6 transition-all duration-300 hover:shadow-3xl\">\n        <textarea\n          className=\"w-full p-3 bg-transparent text-gray-800 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none resize-none text-base font-medium leading-relaxed\"\n          rows={2}\n          placeholder=\"Describe your 3D object or scene...\"\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n        />\n        {/* Responsive container for controls */}\n        <div className=\"flex flex-col md:flex-row items-center justify-between mt-4 gap-4 md:gap-0\">\n          {/* Left side controls */}\n          <div className=\"flex flex-wrap items-center gap-3\">\n            {/* Add Button and Popup */}\n            <div className=\"relative\" ref={addPopupRef}>\n              <button \n                onClick={() => setAddPopupOpen(!isAddPopupOpen)}\n                className=\"flex items-center justify-center w-12 h-12 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 hover:from-gray-100 hover:to-gray-200 dark:hover:from-gray-800 dark:hover:to-gray-700 text-gray-600 dark:text-gray-300 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl border border-gray-200/50 dark:border-gray-700/50\"\n              >\n                <Plus size={22} />\n              </button>\n              {isAddPopupOpen && (\n                <div className=\"absolute bottom-full left-0 mb-3 w-72 bg-white/95 backdrop-blur-xl dark:bg-gray-900/95 rounded-2xl shadow-2xl border border-gray-200/50 dark:border-gray-700/50 z-10\">\n                  <ul>\n                    {addMenuItems.map((item, index) => (\n                       <li key={index} className=\"flex items-center gap-4 p-4 hover:bg-gray-50/80 dark:hover:bg-gray-800/80 cursor-pointer rounded-xl transition-colors duration-200 first:rounded-t-2xl last:rounded-b-2xl\">\n                         {item.icon}\n                         <span className=\"font-medium text-gray-700 dark:text-gray-200\">{item.text}</span>\n                       </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n            \n            {/* Model Selection Button and Dropdown */}\n            <div className=\"relative\" ref={modelRef}>\n              <button onClick={() => setModelOpen(!isModelOpen)} className=\"flex items-center justify-center h-12 px-4 lg:px-5 bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/30 dark:to-indigo-800/30 hover:from-blue-100 hover:to-indigo-200 dark:hover:from-blue-800/40 dark:hover:to-indigo-700/40 text-gray-800 dark:text-gray-200 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl border border-blue-200/50 dark:border-blue-700/30\">\n                <Brain size={18} className=\"text-blue-600 dark:text-blue-400\" />\n                <span className=\"font-semibold ml-2 hidden lg:block\">{selectedModel}</span>\n                <ChevronDown size={16} className=\"ml-2 hidden lg:block\" />\n              </button>\n               {isModelOpen && (\n                 <div className=\"absolute bottom-full left-0 mb-3 w-64 bg-white/95 backdrop-blur-xl dark:bg-gray-900/95 rounded-2xl shadow-2xl border border-gray-200/50 dark:border-gray-700/50 z-10\">\n                  <ul>\n                    {models.map((model) => (\n                       <li key={model} onClick={() => handleModelSelect(model)} className=\"p-4 hover:bg-gray-50/80 dark:hover:bg-gray-800/80 cursor-pointer font-medium text-gray-700 dark:text-gray-200 rounded-xl transition-colors duration-200 first:rounded-t-2xl last:rounded-b-2xl\">\n                         {model}\n                       </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          </div>\n          {/* Right side controls */}\n          <div className=\"flex items-center gap-3\">\n            <button onClick={() => console.log(\"Mic clicked\")} className=\"flex items-center justify-center w-12 h-12 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 hover:from-gray-100 hover:to-gray-200 dark:hover:from-gray-800 dark:hover:to-gray-700 text-gray-600 dark:text-gray-300 rounded-full transition-all duration-200 shadow-lg hover:shadow-xl border border-gray-200/50 dark:border-gray-700/50\">\n                <Mic size={22} />\n            </button>\n            <button onClick={handleUpload} className={`flex items-center justify-center w-12 h-12 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl ${\n              prompt.trim() \n                ? 'bg-gradient-to-br from-gray-800 to-gray-900 hover:from-gray-900 hover:to-black dark:from-blue-600 dark:to-blue-700 dark:hover:from-blue-500 dark:hover:to-blue-600 text-white' \n                : 'bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-800 dark:to-gray-700 text-gray-400 dark:text-gray-500 cursor-not-allowed'\n            }`}>\n              <ArrowUp size={22} />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PromptComponent;",
      "type": "registry:ui"
    },
    {
      "path": "prompt2.tsx",
      "content": "import React from 'react';\nimport { Zap, Code, FileText, Paperclip, Globe, Bell, ArrowRight } from 'lucide-react';\n\n// Define types for component props for better type checking\ninterface SuggestionButtonProps {\n  icon: React.ReactNode;\n  text: string;\n}\n\n// New SVG Icon Component for the logo\nconst CoolStarIcon = () => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 200 200\" className=\"w-16 h-16\">\n        <g clipPath=\"url(#cs_clip_1_star-8)\">\n            <mask id=\"cs_mask_1_star-8\" style={{ maskType: 'alpha' }} width=\"200\" height=\"200\" x=\"0\" y=\"0\" maskUnits=\"userSpaceOnUse\">\n                <path fill=\"#fff\" d=\"M100 0c12.424 62.382 37.256 87.456 100 100-62.759 12.544-87.591 37.618-100 100-12.424-62.382-37.256-87.471-100-100C62.758 87.456 87.591 62.382 100 0z\"></path>\n            </mask>\n            <g mask=\"url(#cs_mask_1_star-8)\">\n                <path fill=\"#fff\" d=\"M200 0H0v200h200V0z\"></path>\n                <path fill=\"url(#paint0_linear_star-8)\" fillOpacity=\"0.55\" d=\"M200 0H0v200h200V0z\"></path>\n                <g filter=\"url(#filter0_f_748_star-8)\">\n                    <path fill=\"#06F\" d=\"M213 69H93v141h120V69z\"></path>\n                </g>\n            </g>\n        </g>\n        <defs>\n            <filter id=\"filter0_f_748_star-8\" width=\"245\" height=\"266\" x=\"30.5\" y=\"6.5\" colorInterpolationFilters=\"sRGB\" filterUnits=\"userSpaceOnUse\">\n                <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"></feFlood>\n                <feBlend in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"></feBlend>\n                <feGaussianBlur result=\"effect1_foregroundBlur_748_star-8\" stdDeviation=\"31.25\"></feGaussianBlur>\n            </filter>\n            <linearGradient id=\"paint0_linear_star-8\" x1=\"162\" x2=\"49.5\" y1=\"38\" y2=\"150.5\" gradientUnits=\"userSpaceOnUse\">\n                <stop stopColor=\"#FF1F00\"></stop>\n                <stop offset=\"1\" stopColor=\"#FF58E4\"></stop>\n            </linearGradient>\n            <clipPath id=\"cs_clip_1_star-8\">\n                <path fill=\"#fff\" d=\"M0 0H200V200H0z\"></path>\n            </clipPath>\n        </defs>\n        <g style={{ mixBlendMode: 'overlay' }} mask=\"url(#cs_mask_1_star-8)\">\n            <path fill=\"gray\" stroke=\"transparent\" d=\"M200 0H0v200h200V0z\" filter=\"url(#cs_noise_1_star-8)\"></path>\n        </g>\n        <defs>\n            <filter id=\"cs_noise_1_star-8\" width=\"100%\" height=\"100%\" x=\"0%\" y=\"0%\" filterUnits=\"objectBoundingBox\">\n                <feTurbulence baseFrequency=\"0.6\" numOctaves=\"5\" result=\"out1\" seed=\"4\"></feTurbulence>\n                <feComposite in=\"out1\" in2=\"SourceGraphic\" operator=\"in\" result=\"out2\"></feComposite>\n                <feBlend in=\"SourceGraphic\" in2=\"out2\" mode=\"overlay\" result=\"out3\"></feBlend>\n            </filter>\n        </defs>\n    </svg>\n);\n\n\n// Reusable button component for the suggestions\nconst SuggestionButton: React.FC<SuggestionButtonProps> = ({ icon, text }) => (\n  <button className=\"flex items-center justify-center bg-white dark:bg-zinc-800 hover:bg-gray-50 dark:hover:bg-zinc-700 border border-gray-200 dark:border-zinc-700 rounded-lg px-3 py-2 sm:px-4 text-sm text-gray-700 dark:text-zinc-300 transition-colors duration-200 ease-in-out\">\n    {icon}\n    <span>{text}</span>\n  </button>\n);\n\nconst Prompting: React.FC = () => {\n  return (\n    <div className=\"font-sans text-gray-900 dark:text-zinc-100 bg-white dark:bg-zinc-950\">\n      <div className=\"p-4\">\n        <main className=\"w-full max-w-3xl mx-auto flex flex-col items-center text-center\">\n\n          {/* Logo */}\n          <div className=\"mb-6\">\n             <CoolStarIcon />\n          </div>\n\n          {/* Main Heading */}\n          <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold tracking-tight text-black dark:text-white\">\n            Unleash Your\n          </h1>\n          <p className=\"text-4xl sm:text-5xl lg:text-6xl font-light tracking-tight text-gray-500 dark:text-zinc-400 mt-1 sm:mt-2\">\n            Creativity.\n          </p>\n\n          {/* Suggestion Buttons */}\n          <div className=\"flex flex-wrap items-center justify-center gap-2 sm:gap-3 mt-8 sm:mt-10\">\n            <SuggestionButton icon={<Zap className=\"h-5 w-5 mr-2 text-blue-500 dark:text-blue-400\" />} text=\"Generate rest API\" />\n            <SuggestionButton icon={<Code className=\"h-5 w-5 mr-2 text-blue-500 dark:text-blue-400\" />} text=\"Debug Python code\" />\n            <SuggestionButton icon={<FileText className=\"h-5 w-5 mr-2 text-blue-500 dark:text-blue-400\" />} text=\"Explain React hooks\" />\n          </div>\n\n          {/* Command Input Area */}\n          <div className=\"w-full max-w-2xl mt-10 sm:mt-12\">\n            <div className=\"bg-gray-100 dark:bg-zinc-800 rounded-xl p-2 sm:p-3\">\n                {/* Top part with input */}\n                <div className=\"relative\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"Type / for command\"\n                        className=\"w-full bg-transparent py-2 px-3 text-gray-800 dark:text-zinc-200 placeholder-gray-500 dark:placeholder-zinc-400 focus:outline-none text-sm\"\n                        aria-label=\"Command input\"\n                    />\n                </div>\n\n                {/* Bottom part with actions */}\n                <div className=\"flex justify-between items-center mt-2\">\n                    {/* Left-side action buttons */}\n                    <div className=\"flex items-center gap-1 sm:gap-2 text-gray-600 dark:text-zinc-400 text-sm\">\n                        <button className=\"flex items-center gap-1.5 p-1.5 rounded-md hover:bg-gray-200 dark:hover:bg-zinc-700 transition-colors\">\n                            <Paperclip className=\"h-5 w-5\" strokeWidth={1.5} />\n                            <span className=\"hidden sm:inline\">Tools</span>\n                        </button>\n                        <button className=\"flex items-center gap-1.5 p-1.5 rounded-md hover:bg-gray-200 dark:hover:bg-zinc-700 transition-colors\">\n                            <Globe className=\"h-5 w-5\" strokeWidth={1.5} />\n                            <span className=\"hidden sm:inline\">Search</span>\n                        </button>\n                    </div>\n\n                    {/* Right-side icons */}\n                    <div className=\"flex items-center gap-1 text-gray-500 dark:text-zinc-400\">\n                        <button className=\"p-2 rounded-full hover:bg-gray-200 dark:hover:bg-zinc-700 transition-colors\">\n                            <Bell className=\"h-5 w-5\" strokeWidth={1.5} />\n                        </button>\n                        <button className=\"bg-blue-500 hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700 text-white w-8 h-8 rounded-lg flex items-center justify-center transition-colors duration-200\">\n                           <ArrowRight className=\"h-5 w-5\" />\n                        </button>\n                    </div>\n                </div>\n            </div>\n             {/* Footer */}\n            <footer className=\"mt-4 text-xs text-gray-500 dark:text-zinc-400 text-center px-2\">\n                <p>\n                Noera may make mistakes. We recommend checking important information.{' '}\n                <a href=\"#\" className=\"text-gray-600 dark:text-zinc-300 underline hover:text-gray-800 dark:hover:text-zinc-100\">\n                    Privacy Notice\n                </a>\n                </p>\n            </footer>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default Prompting;\n",
      "type": "registry:ui"
    },
    {
      "path": "v0.tsx",
      "content": "\"use client\"\nimport { useState, useRef, useEffect, useCallback, useMemo } from 'react';\n\n// Utility function to join class names (replaces `cn`)\nconst classNames = (...classes: (string | undefined | null | false)[]): string => {\n  return classes.filter(Boolean).join(' ');\n};\n\n// Custom hook for auto-resizing textarea (replaces `useAutoResizeTextarea`)\nconst useAutoResizeTextarea = ({ minHeight, maxHeight }: { minHeight?: number; maxHeight?: number }) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const adjustHeight = useCallback((forceShrink = false) => {\n    if (textareaRef.current) {\n      // Temporarily set height to auto to calculate scrollHeight correctly\n      textareaRef.current.style.height = 'auto';\n      let newHeight = textareaRef.current.scrollHeight;\n\n      // Apply min and max height constraints\n      if (minHeight && newHeight < minHeight) {\n        newHeight = minHeight;\n      }\n      if (maxHeight && newHeight > maxHeight) {\n        newHeight = maxHeight;\n      }\n\n      // If forceShrink is true, reset to minHeight\n      if (forceShrink && minHeight) {\n        newHeight = minHeight;\n      }\n\n      textareaRef.current.style.height = `${newHeight}px`;\n    }\n  }, [minHeight, maxHeight]);\n\n  // Adjust height on initial render and when value changes\n  useEffect(() => {\n    adjustHeight();\n  }, [adjustHeight]); // Include adjustHeight in dependencies\n\n  return { textareaRef, adjustHeight };\n};\n\n// Inline SVG Icons (replaces lucide-react components)\nconst Paperclip = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48\" />\n  </svg>\n);\n\nconst PlusIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M12 5v14\" />\n    <path d=\"M5 12h14\" />\n  </svg>\n);\n\nconst ArrowUpIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"m5 12 7-7 7 7\" />\n    <path d=\"M12 19V5\" />\n  </svg>\n);\n\n// Recreated Button component\ninterface ButtonProps {\n  children: React.ReactNode;\n  className?: string;\n  type?: 'button' | 'submit' | 'reset';\n  onClick?: () => void;\n  variant?: 'default' | 'outline' | 'secondary' | 'ghost' | 'link' | 'destructive';\n  disabled?: boolean;\n  size?: string; // Adding size prop to fix the error\n}\n\nconst Button = ({ children, className, type = 'button', onClick, variant = 'default', disabled = false }: ButtonProps) => {\n  const baseClasses = 'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50';\n  let variantClasses = '';\n\n  switch (variant) {\n    case 'outline':\n      variantClasses = 'border border-gray-200 bg-white hover:bg-gray-100 hover:text-gray-900 dark:border-gray-700 dark:bg-black dark:hover:bg-gray-900 dark:hover:text-white dark:text-gray-100';\n      break;\n    case 'secondary':\n      variantClasses = 'bg-gray-100 text-gray-900 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-100 dark:hover:bg-gray-700';\n      break;\n    case 'ghost':\n      variantClasses = 'hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-gray-800 dark:hover:text-gray-100 dark:text-gray-300';\n      break;\n    case 'link':\n      variantClasses = 'text-blue-600 underline-offset-4 hover:underline dark:text-blue-400';\n      break;\n    case 'destructive':\n      variantClasses = 'bg-red-600 text-white hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800';\n      break;\n    default: // 'default'\n      variantClasses = 'bg-black text-white hover:bg-gray-800 dark:bg-white dark:text-black dark:hover:bg-gray-200';\n      break;\n  }\n\n  return (\n    <button type={type} className={classNames(baseClasses, variantClasses, className)} onClick={onClick} disabled={disabled}>\n      {children}\n    </button>\n  );\n};\n\nexport function VercelV0Chat() {\n  const [value, setValue] = useState('');\n  const [selectedModel, setSelectedModel] = useState('GPT-4'); // State for selected model\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n    minHeight: 60,\n    maxHeight: 200,\n  });\n\n  // Placeholder animation state\n  const placeholderTexts = useMemo(() => [\n    \"Ask v0 a question...\",\n    \"Generate a component...\",\n    \"Create a new page...\",\n    \"Design a landing page...\",\n    \"Build a full stack app...\"\n  ], []);\n\n  const [displayedPlaceholder, setDisplayedPlaceholder] = useState('');\n  const [showCursor, setShowCursor] = useState(true); // For blinking cursor\n  const animationState = useRef<{\n    currentTextIndex: number;\n    charIndex: number;\n    isDeleting: boolean;\n    timeoutId: NodeJS.Timeout | null;\n  }>({\n    currentTextIndex: 0,\n    charIndex: 0,\n    isDeleting: false,\n    timeoutId: null,\n  });\n\n  const typingSpeed = 70;\n  const deletingSpeed = 40;\n  const pauseBeforeDelete = 1500;\n  const pauseBeforeType = 500;\n\n  // Animation logic\n  useEffect(() => {\n    const state = animationState.current;\n\n    const animate = () => {\n      const fullText = placeholderTexts[state.currentTextIndex];\n\n      if (!state.isDeleting) {\n        // Typing phase\n        if (state.charIndex < fullText.length) {\n          setDisplayedPlaceholder(fullText.substring(0, state.charIndex + 1));\n          state.charIndex++;\n          state.timeoutId = setTimeout(animate, typingSpeed);\n        } else {\n          // Finished typing\n          state.isDeleting = true;\n          state.timeoutId = setTimeout(animate, pauseBeforeDelete);\n        }\n      } else {\n        // Deleting phase\n        if (state.charIndex > 0) {\n          setDisplayedPlaceholder(fullText.substring(0, state.charIndex - 1));\n          state.charIndex--;\n          state.timeoutId = setTimeout(animate, deletingSpeed);\n        } else {\n          // Finished deleting\n          state.isDeleting = false;\n          state.currentTextIndex = (state.currentTextIndex + 1) % placeholderTexts.length;\n          state.charIndex = 0; // Reset charIndex for next phrase\n          state.timeoutId = setTimeout(animate, pauseBeforeType);\n        }\n      }\n    };\n\n    // Start the animation loop\n    state.timeoutId = setTimeout(animate, pauseBeforeType);\n\n    // Cursor blinking effect\n    const cursorInterval = setInterval(() => {\n      setShowCursor(prev => !prev);\n    }, 500); // Blinks every 500ms\n\n    return () => {\n      if (state.timeoutId) {\n        clearTimeout(state.timeoutId);\n      }\n      clearInterval(cursorInterval);\n    };\n  }, [placeholderTexts]); // Include placeholderTexts in dependencies\n\n  const handleSend = () => {\n    if (value.trim()) {\n      console.log(\"Sending message:\", value.trim());\n      console.log(\"Using model:\", selectedModel); // Log the selected model\n      setValue('');\n      adjustHeight(true); // Force shrink after sending\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  // Adjust height on value change\n  useEffect(() => {\n    adjustHeight();\n  }, [value, adjustHeight]);\n\n  return (\n    <div className={classNames(\n      \"mx-auto flex w-full max-w-4xl flex-col items-center space-y-4 p-4 py-24 sm:space-y-8 font-sans\",\n    )}>\n      {/* Note: For production, add Inter font to _document.js or use a proper font loading strategy */}\n\n      <h1 className=\"text-center text-2xl font-bold sm:text-4xl text-gray-900 dark:text-white\">\n        What can I help you ship?\n      </h1>\n\n      <div className=\"w-full flex flex-col items-center space-y-4\">\n        {/* Main Input area */}\n        <div className=\"relative w-full rounded-xl border border-gray-200 bg-gray-50/20 shadow-lg dark:border-gray-700 dark:bg-gray-900/20 dark:shadow-gray-900/20\">\n          <div className=\"overflow-y-auto\">\n            <textarea\n              ref={textareaRef}\n              value={value}\n              onChange={(e) => {\n                setValue(e.target.value);\n              }}\n              onKeyDown={handleKeyDown}\n              placeholder={displayedPlaceholder + (showCursor && value.length === 0 ? '|' : '')} // Blinking cursor only when input is empty\n              className={classNames(\n                'w-full px-4 py-3',\n                'resize-none',\n                'bg-transparent',\n                'border-none',\n                'text-sm',\n                'focus:outline-none',\n                'focus-visible:ring-0 focus-visible:ring-offset-0',\n                'placeholder:text-sm placeholder:text-gray-500 dark:placeholder:text-gray-400',\n                'text-gray-900 dark:text-white',\n                'min-h-[60px]',\n                'rounded-xl'\n              )}\n              style={{\n                overflow: 'hidden',\n              }}\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"group flex items-center gap-1 rounded-lg p-2\"\n              >\n                <Paperclip className=\"h-4 w-4\" />\n                <span className=\"hidden text-xs transition-opacity group-hover:inline\">\n                  Attach\n                </span>\n              </Button>\n\n              {/* Model Selection Dropdown */}\n              <select\n                id=\"model-select\"\n                value={selectedModel}\n                onChange={(e) => setSelectedModel(e.target.value)}\n                className={classNames(\n                  'px-3 py-2 rounded-md border border-gray-300 bg-white text-sm text-gray-900',\n                  'dark:border-gray-600 dark:bg-gray-800 dark:text-gray-100',\n                  'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500',\n                  'dark:focus:ring-blue-400 dark:focus:border-blue-400'\n                )}\n              >\n                <option value=\"GPT-4\">GPT-4</option>\n                <option value=\"DeepSak-R1\">DeepSak-R1</option>\n                <option value=\"Gemini Pro\">Gemini Pro</option>\n                <option value=\"Claude 3 Opus\">Claude 3 Opus</option>\n                <option value=\"Llama 3\">Llama 3</option>\n              </select>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Button\n                type=\"button\"\n                size=\"sm\"\n                variant=\"secondary\"\n                className=\"flex items-center justify-between gap-1 rounded-lg border border-dashed px-2 py-1 text-sm border-gray-300 dark:border-gray-600\"\n              >\n                <PlusIcon className=\"h-4 w-4\" />\n                Project\n              </Button>\n              <Button\n                type=\"button\"\n                onClick={handleSend}\n                disabled={!value.trim()}\n                className={classNames(\n                  'flex items-center justify-between gap-1 rounded-lg px-2.5 py-2.5 text-sm',\n                  value.trim()\n                    ? 'bg-black text-white dark:bg-white dark:text-black'\n                    : 'bg-gray-100 text-gray-400 dark:bg-gray-800 dark:text-gray-500'\n                )}\n              >\n                <ArrowUpIcon\n                  className={classNames(\n                    'h-4 w-4',\n                    value.trim()\n                      ? 'text-white dark:text-black'\n                      : 'text-gray-400 dark:text-gray-500'\n                  )}\n                />\n                <span className=\"sr-only\">Send</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default VercelV0Chat;\n",
      "type": "registry:ui"
    }
  ]
}