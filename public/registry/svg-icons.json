{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "svg-icons",
  "title": "Svg Icons",
  "description": "A minimalistic svg icons component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "svg-icons.tsx",
      "content": "\"use client\";\nimport React from \"react\";\n\n// --- Caching Mechanism ---\n// Use a Map to cache API results for the duration of the session.\nconst apiCache = new Map<string, { data: Icon[]; pages: number }>();\n\n// --- Custom Hook for Dark Mode ---\nfunction useDarkMode() {\n  const [theme, setTheme] = React.useState<\"light\" | \"dark\">(() => {\n    if (typeof window === \"undefined\") return \"dark\";\n    const stored = localStorage.getItem(\"theme\");\n    if (stored === \"light\" || stored === \"dark\") return stored;\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      ? \"dark\"\n      : \"light\";\n  });\n\n  const toggleTheme = React.useCallback(() => {\n    setTheme((prev) => (prev === \"dark\" ? \"light\" : \"dark\"));\n  }, []);\n\n  React.useEffect(() => {\n    if (typeof window === \"undefined\") return;\n\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return { theme, toggleTheme };\n}\n\n// --- Types ---\ninterface Icon {\n  id: string;\n  title: string;\n  text: string;\n}\n\n// --- Main App Component ---\nexport default function Svgicons() {\n  const { theme } = useDarkMode();\n  // State management for icons, search, loading, and pagination\n  const [icons, setIcons] = React.useState<Icon[]>([]);\n  const [searchTerm, setSearchTerm] = React.useState(\"\"); // Current input value, starts empty\n  const [activeQuery, setActiveQuery] = React.useState(\"\"); // The submitted query, starts empty for random load\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [totalPages, setTotalPages] = React.useState(0);\n\n  // --- API Fetching with Caching ---\n  const fetchIcons = React.useCallback(async (query: string, page: number) => {\n    setLoading(true);\n    setError(null);\n    let cacheKey, url;\n\n    // If there's no active search query, fetch random icons. Otherwise, search for the query.\n    if (!query) {\n      url = `https://svg-fetch0.vercel.app/api/search?page=${page - 1}&limit=48&random=true`;\n      cacheKey = `random-page-${page}`;\n    } else {\n      url = `https://svg-fetch0.vercel.app/api/search?search=${encodeURIComponent(query)}&page=${page - 1}&limit=48`;\n      cacheKey = `${query}-page-${page}`;\n    }\n\n    // Check cache first\n    if (apiCache.has(cacheKey)) {\n      const cachedData = apiCache.get(cacheKey);\n      if (cachedData) {\n        setIcons(cachedData.data);\n        setTotalPages(cachedData.pages);\n        setLoading(false);\n        return;\n      }\n    }\n\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      if (data && data.data) {\n        const responseData = { data: data.data, pages: data.pages };\n        apiCache.set(cacheKey, responseData); // Cache the response\n        setIcons(responseData.data);\n        setTotalPages(responseData.pages);\n      } else {\n        setIcons([]);\n        setTotalPages(0);\n      }\n    } catch (err) {\n      setError(\"Could not fetch icons. The API might be down.\");\n      console.error(err);\n      setIcons([]);\n      setTotalPages(0);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch icons when the component mounts and when the active query or page changes.\n  React.useEffect(() => {\n    fetchIcons(activeQuery, currentPage);\n  }, [activeQuery, currentPage, fetchIcons]);\n\n  // --- Event Handlers ---\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleSearchSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    // Only trigger a new search if the term changes\n    if (searchTerm.trim() !== activeQuery) {\n      setActiveQuery(searchTerm.trim());\n      setCurrentPage(1); // Reset to first page on new search\n    }\n  };\n\n  const handlePageChange = (page: number) => {\n    if (page > 0 && page <= totalPages) {\n      setCurrentPage(page);\n      window.scrollTo(0, 0); // Scroll to top on page change\n    }\n  };\n\n  // --- Rendering ---\n  return (\n    <div className=\"bg-white dark:bg-black min-h-screen text-gray-800 dark:text-gray-300 font-sans transition-colors duration-300\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <header className=\"text-center mb-12\">\n          <h1 className=\"text-4xl sm:text-5xl font-extrabold text-gray-900 dark:text-white mb-2 tracking-tight\">\n            SVG Icon Finder\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-500\">\n            The ultimate icon library at your fingertips.\n          </p>\n        </header>\n\n        <form\n          onSubmit={handleSearchSubmit}\n          className=\"relative mb-12 max-w-2xl mx-auto\"\n        >\n          <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n            <svg\n              className=\"h-5 w-5 text-gray-400 dark:text-gray-500\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n              />\n            </svg>\n          </div>\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={handleSearchChange}\n            placeholder=\"Search for 'arrow', 'user', 'settings'...\"\n            className=\"w-full p-4 pl-12 pr-12 bg-gray-100 dark:bg-white/5 border-2 border-gray-200 dark:border-white/10 rounded-full text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-gray-400 dark:backdrop-blur-sm transition-all duration-300\"\n          />\n          <button\n            type=\"submit\"\n            className=\"absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n            aria-label=\"Search\"\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"20\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 16 16\"\n            >\n              <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\" />\n            </svg>\n          </button>\n        </form>\n\n        <main>\n          {error && (\n            <p className=\"text-center text-red-500 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-3 rounded-lg\">\n              {error}\n            </p>\n          )}\n\n          {loading ? (\n            <div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-4\">\n              {Array.from({ length: 48 }).map((_, i) => (\n                <SkeletonCard key={i} />\n              ))}\n            </div>\n          ) : icons.length > 0 ? (\n            <div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-4\">\n              {icons.map((icon) => (\n                <IconCard\n                  key={`${icon.id}-${Math.random()}`}\n                  icon={icon}\n                  theme={theme}\n                />\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-center text-gray-500 dark:text-gray-500 mt-16 text-lg\">\n              {activeQuery\n                ? `No icons found for \"${activeQuery}\". Try another search.`\n                : \"No icons available.\"}\n            </p>\n          )}\n\n          {!loading && totalPages > 1 && (\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={handlePageChange}\n            />\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\n// --- Child Components ---\n\n// Skeleton Card for Loading State\nfunction SkeletonCard() {\n  return (\n    <div className=\"bg-gray-100 dark:bg-white/5 border border-gray-200 dark:border-white/10 rounded-lg aspect-square animate-pulse\"></div>\n  );\n}\n\n// Icon Card Component\ninterface IconCardProps {\n  icon: Icon;\n  theme: \"light\" | \"dark\";\n}\n\nfunction IconCard({ icon, theme }: IconCardProps) {\n  const [isCopied, setIsCopied] = React.useState(false);\n\n  // Sanitize SVG to be theme-aware - smart color replacement\n  const sanitizedSvg = React.useMemo(() => {\n    const isDarkMode = theme === \"dark\";\n    let svgText = icon.text;\n\n    // Set standard width and height for consistency in the grid\n    svgText = svgText.replace(/width=\"[^\"]*\"/, 'width=\"100%\"');\n    svgText = svgText.replace(/height=\"[^\"]*\"/, 'height=\"100%\"');\n\n    const targetColor = isDarkMode ? \"#FFFFFF\" : \"#000000\";\n    const targetColorName = isDarkMode ? \"white\" : \"black\";\n\n    // Smart color replacement - preserve icon structure\n    if (isDarkMode) {\n      // In dark mode: replace dark colors with white, keep light colors as white\n      svgText = svgText.replace(/fill=\"[^\"]*\"/gi, (match) => {\n        const color = match.toLowerCase();\n        // Keep transparent/none fills as they are\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\n          return match;\n        return `fill=\"${targetColor}\"`;\n      });\n\n      svgText = svgText.replace(/stroke=\"[^\"]*\"/gi, (match) => {\n        const color = match.toLowerCase();\n        // Keep transparent/none strokes as they are\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\n          return match;\n        return `stroke=\"${targetColor}\"`;\n      });\n    } else {\n      // In light mode: replace light colors with black, keep dark colors as black\n      svgText = svgText.replace(/fill=\"[^\"]*\"/gi, (match) => {\n        const color = match.toLowerCase();\n        // Keep transparent/none fills as they are\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\n          return match;\n        return `fill=\"${targetColor}\"`;\n      });\n\n      svgText = svgText.replace(/stroke=\"[^\"]*\"/gi, (match) => {\n        const color = match.toLowerCase();\n        // Keep transparent/none strokes as they are\n        if (color.includes(\"none\") || color.includes(\"transparent\"))\n          return match;\n        return `stroke=\"${targetColor}\"`;\n      });\n    }\n\n    // Handle style attributes more carefully\n    svgText = svgText.replace(/style=\"[^\"]*\"/gi, (match) => {\n      let style = match;\n      // Only replace fill if it's not none/transparent\n      style = style.replace(/fill:\\s*([^;]*)/gi, (fillMatch, fillValue) => {\n        if (\n          fillValue.toLowerCase().includes(\"none\") ||\n          fillValue.toLowerCase().includes(\"transparent\")\n        ) {\n          return fillMatch;\n        }\n        return `fill:${targetColor}`;\n      });\n      // Only replace stroke if it's not none/transparent\n      style = style.replace(\n        /stroke:\\s*([^;]*)/gi,\n        (strokeMatch, strokeValue) => {\n          if (\n            strokeValue.toLowerCase().includes(\"none\") ||\n            strokeValue.toLowerCase().includes(\"transparent\")\n          ) {\n            return strokeMatch;\n          }\n          return `stroke:${targetColor}`;\n        }\n      );\n      return style;\n    });\n\n    // Replace hex colors but be more selective\n    svgText = svgText.replace(/#[0-9a-fA-F]{6}/gi, () => {\n      // Don't replace if it's in a comment or similar\n      return targetColor;\n    });\n    svgText = svgText.replace(/#[0-9a-fA-F]{3}/gi, targetColor.substring(0, 4));\n\n    // Replace color names but preserve none/transparent\n    svgText = svgText.replace(\n      /\\b(black|red|blue|green|yellow|purple|orange|pink|brown|gray|grey|currentColor)\\b/gi,\n      targetColorName\n    );\n    svgText = svgText.replace(/\\bwhite\\b/gi, isDarkMode ? \"white\" : \"black\");\n\n    // Handle currentColor and add default fill if needed\n    svgText = svgText.replace(/currentColor/gi, targetColor);\n\n    // Add default fill only if no fill is specified anywhere\n    if (!svgText.includes(\"fill=\") && !svgText.includes(\"fill:\")) {\n      svgText = svgText.replace(\"<svg\", `<svg fill=\"${targetColor}\"`);\n    }\n\n    return svgText;\n  }, [icon.text, theme]);\n\n  const handleCopy = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    try {\n      if (navigator.clipboard && window.isSecureContext) {\n        // Use modern Clipboard API\n        await navigator.clipboard.writeText(icon.text);\n      } else {\n        // Fallback for older browsers\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = icon.text;\n        textArea.style.position = \"fixed\";\n        textArea.style.left = \"-9999px\";\n        document.body.appendChild(textArea);\n        textArea.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(textArea);\n      }\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), 2000);\n    } catch (err) {\n      console.error(\"Failed to copy text: \", err);\n    }\n  };\n\n  return (\n    <div\n      className=\"relative bg-gray-100 dark:bg-white/5 border border-gray-200 dark:border-white/10 rounded-lg p-2 flex items-center justify-center aspect-square transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.1)] hover:border-gray-300 dark:hover:border-white/20 cursor-pointer group\"\n      title={icon.title}\n    >\n      <div\n        className=\"w-full h-full\"\n        dangerouslySetInnerHTML={{ __html: sanitizedSvg }}\n      />\n      <button\n        onClick={handleCopy}\n        className=\"absolute top-1 right-1 p-1 rounded-full bg-white/50 dark:bg-black/30 text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 hover:bg-gray-200 dark:hover:bg-black/70 hover:text-black dark:hover:text-white focus:opacity-100 focus:outline-none backdrop-blur-sm transition-all duration-300\"\n        aria-label=\"Copy SVG\"\n      >\n        {isCopied ? (\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"12\"\n            height=\"12\"\n            fill=\"currentColor\"\n            className=\"text-green-500 dark:text-green-400\"\n            viewBox=\"0 0 16 16\"\n          >\n            <path d=\"M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z\" />\n          </svg>\n        ) : (\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"12\"\n            height=\"12\"\n            fill=\"currentColor\"\n            viewBox=\"0 0 16 16\"\n          >\n            <path d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\" />\n            <path d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\" />\n          </svg>\n        )}\n      </button>\n      {isCopied && (\n        <div className=\"absolute -top-8 left-1/2 -translate-x-1/2 px-2 py-0.5 text-xs bg-green-600 dark:bg-green-500 text-white rounded-md shadow-lg transition-all duration-300\">\n          Copied!\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Pagination Component\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n}\n\nfunction Pagination({\n  currentPage,\n  totalPages,\n  onPageChange,\n}: PaginationProps) {\n  const pages = [];\n  const MAX_VISIBLE_PAGES = 5;\n\n  let startPage, endPage;\n  if (totalPages <= MAX_VISIBLE_PAGES) {\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    const maxPagesBeforeCurrent = Math.floor(MAX_VISIBLE_PAGES / 2);\n    const maxPagesAfterCurrent = Math.ceil(MAX_VISIBLE_PAGES / 2) - 1;\n    if (currentPage <= maxPagesBeforeCurrent) {\n      startPage = 1;\n      endPage = MAX_VISIBLE_PAGES;\n    } else if (currentPage + maxPagesAfterCurrent >= totalPages) {\n      startPage = totalPages - MAX_VISIBLE_PAGES + 1;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - maxPagesBeforeCurrent;\n      endPage = currentPage + maxPagesAfterCurrent;\n    }\n  }\n\n  for (let i = startPage; i <= endPage; i++) {\n    pages.push(i);\n  }\n\n  const buttonClass =\n    \"px-4 py-2 rounded-md text-sm transition-colors duration-200\";\n  const inactiveClass =\n    \"bg-gray-200 dark:bg-white/5 text-gray-600 dark:text-gray-400 hover:bg-gray-300 dark:hover:bg-white/10\";\n  const activeClass =\n    \"bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-800 font-bold\";\n  const disabledClass = \"opacity-50 cursor-not-allowed\";\n\n  return (\n    <nav\n      className=\"flex justify-center items-center space-x-2 mt-16\"\n      aria-label=\"Pagination\"\n    >\n      <button\n        onClick={() => onPageChange(currentPage - 1)}\n        disabled={currentPage === 1}\n        className={`${buttonClass} ${inactiveClass} ${currentPage === 1 ? disabledClass : \"\"}`}\n      >\n        Prev\n      </button>\n\n      {startPage > 1 && (\n        <>\n          <button\n            onClick={() => onPageChange(1)}\n            className={`${buttonClass} ${inactiveClass}`}\n          >\n            1\n          </button>\n          {startPage > 2 && (\n            <span className=\"text-gray-400 dark:text-gray-600\">...</span>\n          )}\n        </>\n      )}\n\n      {pages.map((page) => (\n        <button\n          key={page}\n          onClick={() => onPageChange(page)}\n          className={`${buttonClass} ${currentPage === page ? activeClass : inactiveClass}`}\n        >\n          {page}\n        </button>\n      ))}\n\n      {endPage < totalPages && (\n        <>\n          {endPage < totalPages - 1 && (\n            <span className=\"text-gray-400 dark:text-gray-600\">...</span>\n          )}\n          <button\n            onClick={() => onPageChange(totalPages)}\n            className={`${buttonClass} ${inactiveClass}`}\n          >\n            {totalPages}\n          </button>\n        </>\n      )}\n\n      <button\n        onClick={() => onPageChange(currentPage + 1)}\n        disabled={currentPage === totalPages}\n        className={`${buttonClass} ${inactiveClass} ${currentPage === totalPages ? disabledClass : \"\"}`}\n      >\n        Next\n      </button>\n    </nav>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}