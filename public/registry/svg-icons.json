{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "svg-icons",
  "title": "Svg Icons",
  "description": "A minimalistic svg icons component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:component",
  "dependencies": [],
  "files": [
    {
      "path": "svg-icons.tsx",
      "content": "\"use client\";\nimport React from \"react\";\n\n// --- Caching Mechanism ---\n// Use a Map to cache API results for the duration of the session.\nconst apiCache = new Map<string, { data: Icon[]; pages: number }>();\n\n// --- Custom Hook for Dark Mode ---\nfunction useDarkMode() {\n\tconst [theme, setTheme] = React.useState<\"light\" | \"dark\">(() => {\n\t\tif (typeof window === \"undefined\") return \"dark\";\n\t\tconst stored = localStorage.getItem(\"theme\");\n\t\tif (stored === \"light\" || stored === \"dark\") return stored;\n\t\treturn window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n\t\t\t? \"dark\"\n\t\t\t: \"light\";\n\t});\n\n\tconst toggleTheme = React.useCallback(() => {\n\t\tsetTheme((prev) => (prev === \"dark\" ? \"light\" : \"dark\"));\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tif (typeof window === \"undefined\") return;\n\n\t\tconst root = document.documentElement;\n\t\troot.classList.remove(\"light\", \"dark\");\n\t\troot.classList.add(theme);\n\t\tlocalStorage.setItem(\"theme\", theme);\n\t}, [theme]);\n\n\treturn { theme, toggleTheme };\n}\n\n// --- Types ---\ninterface Icon {\n\tid: string;\n\ttitle: string;\n\ttext: string;\n}\n\n// --- Main App Component ---\nexport default function Svgicons() {\n\tconst { theme } = useDarkMode();\n\t// State management for icons, search, loading, and pagination\n\tconst [icons, setIcons] = React.useState<Icon[]>([]);\n\tconst [searchTerm, setSearchTerm] = React.useState(\"\"); // Current input value, starts empty\n\tconst [activeQuery, setActiveQuery] = React.useState(\"\"); // The submitted query, starts empty for random load\n\tconst [loading, setLoading] = React.useState(true);\n\tconst [error, setError] = React.useState<string | null>(null);\n\tconst [currentPage, setCurrentPage] = React.useState(1);\n\tconst [totalPages, setTotalPages] = React.useState(0);\n\n\t// --- API Fetching with Caching ---\n\tconst fetchIcons = React.useCallback(async (query: string, page: number) => {\n\t\tsetLoading(true);\n\t\tsetError(null);\n\t\tlet cacheKey, url;\n\n\t\t// If there's no active search query, fetch random icons. Otherwise, search for the query.\n\t\tif (!query) {\n\t\t\turl = `https://svg-fetch0.vercel.app/api/search?page=${page - 1}&limit=48&random=true`;\n\t\t\tcacheKey = `random-page-${page}`;\n\t\t} else {\n\t\t\turl = `https://svg-fetch0.vercel.app/api/search?search=${encodeURIComponent(query)}&page=${page - 1}&limit=48`;\n\t\t\tcacheKey = `${query}-page-${page}`;\n\t\t}\n\n\t\t// Check cache first\n\t\tif (apiCache.has(cacheKey)) {\n\t\t\tconst cachedData = apiCache.get(cacheKey);\n\t\t\tif (cachedData) {\n\t\t\t\tsetIcons(cachedData.data);\n\t\t\t\tsetTotalPages(cachedData.pages);\n\t\t\t\tsetLoading(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch(url);\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\t\t\tconst data = await response.json();\n\n\t\t\tif (data && data.data) {\n\t\t\t\tconst responseData = { data: data.data, pages: data.pages };\n\t\t\t\tapiCache.set(cacheKey, responseData); // Cache the response\n\t\t\t\tsetIcons(responseData.data);\n\t\t\t\tsetTotalPages(responseData.pages);\n\t\t\t} else {\n\t\t\t\tsetIcons([]);\n\t\t\t\tsetTotalPages(0);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetError(\"Could not fetch icons. The API might be down.\");\n\t\t\tconsole.error(err);\n\t\t\tsetIcons([]);\n\t\t\tsetTotalPages(0);\n\t\t} finally {\n\t\t\tsetLoading(false);\n\t\t}\n\t}, []);\n\n\t// Fetch icons when the component mounts and when the active query or page changes.\n\tReact.useEffect(() => {\n\t\tfetchIcons(activeQuery, currentPage);\n\t}, [activeQuery, currentPage, fetchIcons]);\n\n\t// --- Event Handlers ---\n\tconst handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetSearchTerm(event.target.value);\n\t};\n\n\tconst handleSearchSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault();\n\t\t// Only trigger a new search if the term changes\n\t\tif (searchTerm.trim() !== activeQuery) {\n\t\t\tsetActiveQuery(searchTerm.trim());\n\t\t\tsetCurrentPage(1); // Reset to first page on new search\n\t\t}\n\t};\n\n\tconst handlePageChange = (page: number) => {\n\t\tif (page > 0 && page <= totalPages) {\n\t\t\tsetCurrentPage(page);\n\t\t\twindow.scrollTo(0, 0); // Scroll to top on page change\n\t\t}\n\t};\n\n\t// --- Rendering ---\n\treturn (\n\t\t<div className=\"bg-white dark:bg-black min-h-screen text-gray-800 dark:text-gray-300 font-sans transition-colors duration-300\">\n\t\t\t<div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n\t\t\t\t<header className=\"text-center mb-12\">\n\t\t\t\t\t<h1 className=\"text-4xl sm:text-5xl font-extrabold text-gray-900 dark:text-white mb-2 tracking-tight\">\n\t\t\t\t\t\tSVG Icon Finder\n\t\t\t\t\t</h1>\n\t\t\t\t\t<p className=\"text-lg text-gray-600 dark:text-gray-500\">\n\t\t\t\t\t\tThe ultimate icon library at your fingertips.\n\t\t\t\t\t</p>\n\t\t\t\t</header>\n\n\t\t\t\t<form\n\t\t\t\t\tonSubmit={handleSearchSubmit}\n\t\t\t\t\tclassName=\"relative mb-12 max-w-2xl mx-auto\"\n\t\t\t\t>\n\t\t\t\t\t<div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\tclassName=\"h-5 w-5 text-gray-400 dark:text-gray-500\"\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\t\t\t\td=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\tonChange={handleSearchChange}\n\t\t\t\t\t\tplaceholder=\"Search for 'arrow', 'user', 'settings'...\"\n\t\t\t\t\t\tclassName=\"w-full p-4 pl-12 pr-12 bg-gray-100 dark:bg-white/5 border-2 border-gray-200 dark:border-white/10 rounded-full text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-gray-400 dark:backdrop-blur-sm transition-all duration-300\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tclassName=\"absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n\t\t\t\t\t\taria-label=\"Search\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\twidth=\"20\"\n\t\t\t\t\t\t\theight=\"20\"\n\t\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\n\t\t\t\t<main>\n\t\t\t\t\t{error && (\n\t\t\t\t\t\t<p className=\"text-center text-red-500 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-3 rounded-lg\">\n\t\t\t\t\t\t\t{error}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{loading ? (\n\t\t\t\t\t\t<div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-4\">\n\t\t\t\t\t\t\t{Array.from({ length: 48 }).map((_, i) => (\n\t\t\t\t\t\t\t\t<SkeletonCard key={i} />\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : icons.length > 0 ? (\n\t\t\t\t\t\t<div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-4\">\n\t\t\t\t\t\t\t{icons.map((icon) => (\n\t\t\t\t\t\t\t\t<IconCard\n\t\t\t\t\t\t\t\t\tkey={`${icon.id}-${Math.random()}`}\n\t\t\t\t\t\t\t\t\ticon={icon}\n\t\t\t\t\t\t\t\t\ttheme={theme}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<p className=\"text-center text-gray-500 dark:text-gray-500 mt-16 text-lg\">\n\t\t\t\t\t\t\t{activeQuery\n\t\t\t\t\t\t\t\t? `No icons found for \"${activeQuery}\". Try another search.`\n\t\t\t\t\t\t\t\t: \"No icons available.\"}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{!loading && totalPages > 1 && (\n\t\t\t\t\t\t<Pagination\n\t\t\t\t\t\t\tcurrentPage={currentPage}\n\t\t\t\t\t\t\ttotalPages={totalPages}\n\t\t\t\t\t\t\tonPageChange={handlePageChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n// --- Child Components ---\n\n// Skeleton Card for Loading State\nfunction SkeletonCard() {\n\treturn (\n\t\t<div className=\"bg-gray-100 dark:bg-white/5 border border-gray-200 dark:border-white/10 rounded-lg aspect-square animate-pulse\"></div>\n\t);\n}\n\n// Icon Card Component\ninterface IconCardProps {\n\ticon: Icon;\n\ttheme: \"light\" | \"dark\";\n}\n\nfunction IconCard({ icon, theme }: IconCardProps) {\n\tconst [isCopied, setIsCopied] = React.useState(false);\n\n\t// Sanitize SVG to be theme-aware - smart color replacement\n\tconst sanitizedSvg = React.useMemo(() => {\n\t\tconst isDarkMode = theme === \"dark\";\n\t\tlet svgText = icon.text;\n\n\t\t// Set standard width and height for consistency in the grid\n\t\tsvgText = svgText.replace(/width=\"[^\"]*\"/, 'width=\"100%\"');\n\t\tsvgText = svgText.replace(/height=\"[^\"]*\"/, 'height=\"100%\"');\n\n\t\tconst targetColor = isDarkMode ? \"#FFFFFF\" : \"#000000\";\n\t\tconst targetColorName = isDarkMode ? \"white\" : \"black\";\n\n\t\t// Smart color replacement - preserve icon structure\n\t\tif (isDarkMode) {\n\t\t\t// In dark mode: replace dark colors with white, keep light colors as white\n\t\t\tsvgText = svgText.replace(/fill=\"[^\"]*\"/gi, (match) => {\n\t\t\t\tconst color = match.toLowerCase();\n\t\t\t\t// Keep transparent/none fills as they are\n\t\t\t\tif (color.includes(\"none\") || color.includes(\"transparent\"))\n\t\t\t\t\treturn match;\n\t\t\t\treturn `fill=\"${targetColor}\"`;\n\t\t\t});\n\n\t\t\tsvgText = svgText.replace(/stroke=\"[^\"]*\"/gi, (match) => {\n\t\t\t\tconst color = match.toLowerCase();\n\t\t\t\t// Keep transparent/none strokes as they are\n\t\t\t\tif (color.includes(\"none\") || color.includes(\"transparent\"))\n\t\t\t\t\treturn match;\n\t\t\t\treturn `stroke=\"${targetColor}\"`;\n\t\t\t});\n\t\t} else {\n\t\t\t// In light mode: replace light colors with black, keep dark colors as black\n\t\t\tsvgText = svgText.replace(/fill=\"[^\"]*\"/gi, (match) => {\n\t\t\t\tconst color = match.toLowerCase();\n\t\t\t\t// Keep transparent/none fills as they are\n\t\t\t\tif (color.includes(\"none\") || color.includes(\"transparent\"))\n\t\t\t\t\treturn match;\n\t\t\t\treturn `fill=\"${targetColor}\"`;\n\t\t\t});\n\n\t\t\tsvgText = svgText.replace(/stroke=\"[^\"]*\"/gi, (match) => {\n\t\t\t\tconst color = match.toLowerCase();\n\t\t\t\t// Keep transparent/none strokes as they are\n\t\t\t\tif (color.includes(\"none\") || color.includes(\"transparent\"))\n\t\t\t\t\treturn match;\n\t\t\t\treturn `stroke=\"${targetColor}\"`;\n\t\t\t});\n\t\t}\n\n\t\t// Handle style attributes more carefully\n\t\tsvgText = svgText.replace(/style=\"[^\"]*\"/gi, (match) => {\n\t\t\tlet style = match;\n\t\t\t// Only replace fill if it's not none/transparent\n\t\t\tstyle = style.replace(/fill:\\s*([^;]*)/gi, (fillMatch, fillValue) => {\n\t\t\t\tif (\n\t\t\t\t\tfillValue.toLowerCase().includes(\"none\") ||\n\t\t\t\t\tfillValue.toLowerCase().includes(\"transparent\")\n\t\t\t\t) {\n\t\t\t\t\treturn fillMatch;\n\t\t\t\t}\n\t\t\t\treturn `fill:${targetColor}`;\n\t\t\t});\n\t\t\t// Only replace stroke if it's not none/transparent\n\t\t\tstyle = style.replace(\n\t\t\t\t/stroke:\\s*([^;]*)/gi,\n\t\t\t\t(strokeMatch, strokeValue) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tstrokeValue.toLowerCase().includes(\"none\") ||\n\t\t\t\t\t\tstrokeValue.toLowerCase().includes(\"transparent\")\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn strokeMatch;\n\t\t\t\t\t}\n\t\t\t\t\treturn `stroke:${targetColor}`;\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn style;\n\t\t});\n\n\t\t// Replace hex colors but be more selective\n\t\tsvgText = svgText.replace(/#[0-9a-fA-F]{6}/gi, () => {\n\t\t\t// Don't replace if it's in a comment or similar\n\t\t\treturn targetColor;\n\t\t});\n\t\tsvgText = svgText.replace(/#[0-9a-fA-F]{3}/gi, targetColor.substring(0, 4));\n\n\t\t// Replace color names but preserve none/transparent\n\t\tsvgText = svgText.replace(\n\t\t\t/\\b(black|red|blue|green|yellow|purple|orange|pink|brown|gray|grey|currentColor)\\b/gi,\n\t\t\ttargetColorName,\n\t\t);\n\t\tsvgText = svgText.replace(/\\bwhite\\b/gi, isDarkMode ? \"white\" : \"black\");\n\n\t\t// Handle currentColor and add default fill if needed\n\t\tsvgText = svgText.replace(/currentColor/gi, targetColor);\n\n\t\t// Add default fill only if no fill is specified anywhere\n\t\tif (!svgText.includes(\"fill=\") && !svgText.includes(\"fill:\")) {\n\t\t\tsvgText = svgText.replace(\"<svg\", `<svg fill=\"${targetColor}\"`);\n\t\t}\n\n\t\treturn svgText;\n\t}, [icon.text, theme]);\n\n\tconst handleCopy = async (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\te.stopPropagation();\n\t\ttry {\n\t\t\tif (navigator.clipboard && window.isSecureContext) {\n\t\t\t\t// Use modern Clipboard API\n\t\t\t\tawait navigator.clipboard.writeText(icon.text);\n\t\t\t} else {\n\t\t\t\t// Fallback for older browsers\n\t\t\t\tconst textArea = document.createElement(\"textarea\");\n\t\t\t\ttextArea.value = icon.text;\n\t\t\t\ttextArea.style.position = \"fixed\";\n\t\t\t\ttextArea.style.left = \"-9999px\";\n\t\t\t\tdocument.body.appendChild(textArea);\n\t\t\t\ttextArea.select();\n\t\t\t\tdocument.execCommand(\"copy\");\n\t\t\t\tdocument.body.removeChild(textArea);\n\t\t\t}\n\t\t\tsetIsCopied(true);\n\t\t\tsetTimeout(() => setIsCopied(false), 2000);\n\t\t} catch (err) {\n\t\t\tconsole.error(\"Failed to copy text: \", err);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"relative bg-gray-100 dark:bg-white/5 border border-gray-200 dark:border-white/10 rounded-lg p-2 flex items-center justify-center aspect-square transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg dark:hover:shadow-[0_0_15px_rgba(255,255,255,0.1)] hover:border-gray-300 dark:hover:border-white/20 cursor-pointer group\"\n\t\t\ttitle={icon.title}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"w-full h-full\"\n\t\t\t\tdangerouslySetInnerHTML={{ __html: sanitizedSvg }}\n\t\t\t/>\n\t\t\t<button\n\t\t\t\tonClick={handleCopy}\n\t\t\t\tclassName=\"absolute top-1 right-1 p-1 rounded-full bg-white/50 dark:bg-black/30 text-gray-500 dark:text-gray-400 opacity-0 group-hover:opacity-100 hover:bg-gray-200 dark:hover:bg-black/70 hover:text-black dark:hover:text-white focus:opacity-100 focus:outline-none backdrop-blur-sm transition-all duration-300\"\n\t\t\t\taria-label=\"Copy SVG\"\n\t\t\t>\n\t\t\t\t{isCopied ? (\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"12\"\n\t\t\t\t\t\theight=\"12\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\tclassName=\"text-green-500 dark:text-green-400\"\n\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t) : (\n\t\t\t\t\t<svg\n\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\twidth=\"12\"\n\t\t\t\t\t\theight=\"12\"\n\t\t\t\t\t\tfill=\"currentColor\"\n\t\t\t\t\t\tviewBox=\"0 0 16 16\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<path d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\" />\n\t\t\t\t\t\t<path d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\" />\n\t\t\t\t\t</svg>\n\t\t\t\t)}\n\t\t\t</button>\n\t\t\t{isCopied && (\n\t\t\t\t<div className=\"absolute -top-8 left-1/2 -translate-x-1/2 px-2 py-0.5 text-xs bg-green-600 dark:bg-green-500 text-white rounded-md shadow-lg transition-all duration-300\">\n\t\t\t\t\tCopied!\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n// Pagination Component\ninterface PaginationProps {\n\tcurrentPage: number;\n\ttotalPages: number;\n\tonPageChange: (page: number) => void;\n}\n\nfunction Pagination({\n\tcurrentPage,\n\ttotalPages,\n\tonPageChange,\n}: PaginationProps) {\n\tconst pages = [];\n\tconst MAX_VISIBLE_PAGES = 5;\n\n\tlet startPage, endPage;\n\tif (totalPages <= MAX_VISIBLE_PAGES) {\n\t\tstartPage = 1;\n\t\tendPage = totalPages;\n\t} else {\n\t\tconst maxPagesBeforeCurrent = Math.floor(MAX_VISIBLE_PAGES / 2);\n\t\tconst maxPagesAfterCurrent = Math.ceil(MAX_VISIBLE_PAGES / 2) - 1;\n\t\tif (currentPage <= maxPagesBeforeCurrent) {\n\t\t\tstartPage = 1;\n\t\t\tendPage = MAX_VISIBLE_PAGES;\n\t\t} else if (currentPage + maxPagesAfterCurrent >= totalPages) {\n\t\t\tstartPage = totalPages - MAX_VISIBLE_PAGES + 1;\n\t\t\tendPage = totalPages;\n\t\t} else {\n\t\t\tstartPage = currentPage - maxPagesBeforeCurrent;\n\t\t\tendPage = currentPage + maxPagesAfterCurrent;\n\t\t}\n\t}\n\n\tfor (let i = startPage; i <= endPage; i++) {\n\t\tpages.push(i);\n\t}\n\n\tconst buttonClass =\n\t\t\"px-4 py-2 rounded-md text-sm transition-colors duration-200\";\n\tconst inactiveClass =\n\t\t\"bg-gray-200 dark:bg-white/5 text-gray-600 dark:text-gray-400 hover:bg-gray-300 dark:hover:bg-white/10\";\n\tconst activeClass =\n\t\t\"bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-800 font-bold\";\n\tconst disabledClass = \"opacity-50 cursor-not-allowed\";\n\n\treturn (\n\t\t<nav\n\t\t\tclassName=\"flex justify-center items-center space-x-2 mt-16\"\n\t\t\taria-label=\"Pagination\"\n\t\t>\n\t\t\t<button\n\t\t\t\tonClick={() => onPageChange(currentPage - 1)}\n\t\t\t\tdisabled={currentPage === 1}\n\t\t\t\tclassName={`${buttonClass} ${inactiveClass} ${currentPage === 1 ? disabledClass : \"\"}`}\n\t\t\t>\n\t\t\t\tPrev\n\t\t\t</button>\n\n\t\t\t{startPage > 1 && (\n\t\t\t\t<>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => onPageChange(1)}\n\t\t\t\t\t\tclassName={`${buttonClass} ${inactiveClass}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t1\n\t\t\t\t\t</button>\n\t\t\t\t\t{startPage > 2 && (\n\t\t\t\t\t\t<span className=\"text-gray-400 dark:text-gray-600\">...</span>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t{pages.map((page) => (\n\t\t\t\t<button\n\t\t\t\t\tkey={page}\n\t\t\t\t\tonClick={() => onPageChange(page)}\n\t\t\t\t\tclassName={`${buttonClass} ${currentPage === page ? activeClass : inactiveClass}`}\n\t\t\t\t>\n\t\t\t\t\t{page}\n\t\t\t\t</button>\n\t\t\t))}\n\n\t\t\t{endPage < totalPages && (\n\t\t\t\t<>\n\t\t\t\t\t{endPage < totalPages - 1 && (\n\t\t\t\t\t\t<span className=\"text-gray-400 dark:text-gray-600\">...</span>\n\t\t\t\t\t)}\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => onPageChange(totalPages)}\n\t\t\t\t\t\tclassName={`${buttonClass} ${inactiveClass}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{totalPages}\n\t\t\t\t\t</button>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t<button\n\t\t\t\tonClick={() => onPageChange(currentPage + 1)}\n\t\t\t\tdisabled={currentPage === totalPages}\n\t\t\t\tclassName={`${buttonClass} ${inactiveClass} ${currentPage === totalPages ? disabledClass : \"\"}`}\n\t\t\t>\n\t\t\t\tNext\n\t\t\t</button>\n\t\t</nav>\n\t);\n}\n",
      "type": "registry:component"
    }
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  }
}