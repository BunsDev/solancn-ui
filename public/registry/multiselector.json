{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multiselector",
  "title": "Multiselector",
  "description": "A minimalistic multiselector component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:component",
  "dependencies": [],
  "files": [
    {
      "path": "multiselector.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// Type definition for option objects\ninterface Option {\n\tid: number;\n\tname: string;\n\tvalue: string;\n}\n\n// A list of all available options for the multi-select component.\nconst ALL_OPTIONS: Option[] = [\n\t{ id: 1, name: \"React\", value: \"react\" },\n\t{ id: 2, name: \"Vue\", value: \"vue\" },\n\t{ id: 3, name: \"Angular\", value: \"angular\" },\n\t{ id: 4, name: \"Svelte\", value: \"svelte\" },\n\t{ id: 5, name: \"Ember\", value: \"ember\" },\n\t{ id: 6, name: \"Backbone\", value: \"backbone\" },\n\t{ id: 7, name: \"Preact\", value: \"preact\" },\n\t{ id: 8, name: \"Alpine.js\", value: \"alpine\" },\n\t{ id: 9, name: \"Solid.js\", value: \"solid\" },\n\t{ id: 10, name: \"Qwik\", value: \"qwik\" },\n];\n\n// Icon for the close button on tags (lucide-react style)\nconst XIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<path d=\"M18 6 6 18\" />\n\t\t<path d=\"m6 6 12 12\" />\n\t</svg>\n);\n\n// Icon for the checkmark on selected items (lucide-react style)\nconst CheckIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-4 w-4\"\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\n/**\n * A reusable multi-select component styled to feel like shadcn/ui.\n * It features a clean, modern interface, keyboard navigation, search,\n * and a design system that prioritizes accessibility and developer experience.\n */\nconst MultiSelect: React.FC = () => {\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\tconst [selectedOptions, setSelectedOptions] = useState<Option[]>([\n\t\tALL_OPTIONS[0],\n\t\tALL_OPTIONS[2],\n\t]);\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\n\tconst [highlightedIndex, setHighlightedIndex] = useState<number>(0);\n\n\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\twrapperRef.current &&\n\t\t\t\t!wrapperRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => document.removeEventListener(\"mousedown\", handleClickOutside);\n\t}, []);\n\n\tconst filteredOptions = ALL_OPTIONS.filter(\n\t\t(option) =>\n\t\t\t!selectedOptions.some((selected) => selected.id === option.id) &&\n\t\t\toption.name.toLowerCase().includes(searchTerm.toLowerCase()),\n\t);\n\n\tconst toggleOption = (option: Option) => {\n\t\tsetSelectedOptions((prev) =>\n\t\t\tprev.some((o) => o.id === option.id)\n\t\t\t\t? prev.filter((o) => o.id !== option.id)\n\t\t\t\t: [...prev, option],\n\t\t);\n\t\tsetSearchTerm(\"\");\n\t\tinputRef.current?.focus();\n\t};\n\n\tconst removeOption = (option: Option) => {\n\t\tsetSelectedOptions(selectedOptions.filter((o) => o.id !== option.id));\n\t};\n\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (\n\t\t\te.key === \"Backspace\" &&\n\t\t\tsearchTerm === \"\" &&\n\t\t\tselectedOptions.length > 0\n\t\t) {\n\t\t\tremoveOption(selectedOptions[selectedOptions.length - 1]);\n\t\t}\n\n\t\tif (!isOpen) {\n\t\t\tif (e.key === \"ArrowDown\" || e.key === \"Enter\") {\n\t\t\t\tsetIsOpen(true);\n\t\t\t\tsetHighlightedIndex(0);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.key) {\n\t\t\tcase \"ArrowDown\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex((prev) => (prev + 1) % filteredOptions.length);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowUp\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex(\n\t\t\t\t\t(prev) =>\n\t\t\t\t\t\t(prev - 1 + filteredOptions.length) % filteredOptions.length,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Enter\":\n\t\t\t\te.preventDefault();\n\t\t\t\tif (filteredOptions[highlightedIndex]) {\n\t\t\t\t\ttoggleOption(filteredOptions[highlightedIndex]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Escape\":\n\t\t\t\tsetIsOpen(false);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetHighlightedIndex(0);\n\t\t}\n\t}, [isOpen, searchTerm]);\n\n\treturn (\n\t\t<div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\n\t\t\t<div className=\"relative\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetIsOpen(true);\n\t\t\t\t\t\tinputRef.current?.focus();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{selectedOptions.map((option) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={option.id}\n\t\t\t\t\t\t\tclassName=\"flex items-center gap-1.5 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{option.name}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tclassName=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\n\t\t\t\t\t\t\t\tonClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\tremoveOption(option);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XIcon />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t\t\tsetSearchTerm(e.target.value)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonFocus={() => setIsOpen(true)}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tselectedOptions.length === 0 ? \"Select frameworks...\" : \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclassName=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\n\t\t\t\t\t\t<ul className=\"p-1\">\n\t\t\t\t\t\t\t{filteredOptions.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredOptions.map((option, index) => (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tkey={option.id}\n\t\t\t\t\t\t\t\t\t\tclassName={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? \"bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100\" : \"text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100\"}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleOption(option)}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => setHighlightedIndex(index)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{option.name}\n\t\t\t\t\t\t\t\t\t\t{selectedOptions.some((o) => o.id === option.id) && (\n\t\t\t\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">\n\t\t\t\t\t\t\t\t\tNo options found.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// Main App component to render the MultiSelect\nexport default function MultiSelectPage() {\n\treturn (\n\t\t<div className=\"p-4 font-sans\">\n\t\t\t<style>{`\n            @keyframes popover-in {\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\n                to { opacity: 1; transform: scale(1) translateY(0); }\n            }\n            .animate-popover-in {\n                transform-origin: top;\n                animation: popover-in 0.1s ease-out forwards;\n            }\n        `}</style>\n\t\t\t<div className=\"w-full max-w-md\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">\n\t\t\t\t\tFramework Multi-Select\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">\n\t\t\t\t\tSelect your favorite frameworks.\n\t\t\t\t</p>\n\t\t\t\t<MultiSelect />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "multiselector1.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// Type definition for option objects\ninterface Option {\n\tid: number;\n\tname: string;\n\tvalue: string;\n}\n\n// A list of all available options for the multi-select component.\nconst ALL_OPTIONS: Option[] = [\n\t{ id: 1, name: \"React\", value: \"react\" },\n\t{ id: 2, name: \"Vue\", value: \"vue\" },\n\t{ id: 3, name: \"Angular\", value: \"angular\" },\n\t{ id: 4, name: \"Svelte\", value: \"svelte\" },\n\t{ id: 5, name: \"Ember\", value: \"ember\" },\n\t{ id: 6, name: \"Backbone\", value: \"backbone\" },\n\t{ id: 7, name: \"Preact\", value: \"preact\" },\n\t{ id: 8, name: \"Alpine.js\", value: \"alpine\" },\n\t{ id: 9, name: \"Solid.js\", value: \"solid\" },\n\t{ id: 10, name: \"Qwik\", value: \"qwik\" },\n];\n\n// Icon for the close button on tags (lucide-react style)\nconst XIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<path d=\"M18 6 6 18\" />\n\t\t<path d=\"m6 6 12 12\" />\n\t</svg>\n);\n\n// Icon for the checkmark on selected items (lucide-react style)\nconst CheckIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-4 w-4\"\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\n/**\n * A reusable multi-select component styled to feel like shadcn/ui.\n * It features a clean, modern interface, keyboard navigation, search,\n * and a design system that prioritizes accessibility and developer experience.\n */\nconst MultiSelect: React.FC = () => {\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\tconst [selectedOptions, setSelectedOptions] = useState<Option[]>([\n\t\tALL_OPTIONS[0],\n\t\tALL_OPTIONS[2],\n\t]);\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\n\tconst [highlightedIndex, setHighlightedIndex] = useState<number>(0);\n\n\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\twrapperRef.current &&\n\t\t\t\t!wrapperRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => document.removeEventListener(\"mousedown\", handleClickOutside);\n\t}, []);\n\n\tconst filteredOptions = ALL_OPTIONS.filter(\n\t\t(option) =>\n\t\t\t!selectedOptions.some((selected) => selected.id === option.id) &&\n\t\t\toption.name.toLowerCase().includes(searchTerm.toLowerCase()),\n\t);\n\n\tconst toggleOption = (option: Option) => {\n\t\tsetSelectedOptions((prev) =>\n\t\t\tprev.some((o) => o.id === option.id)\n\t\t\t\t? prev.filter((o) => o.id !== option.id)\n\t\t\t\t: [...prev, option],\n\t\t);\n\t\tsetSearchTerm(\"\");\n\t\tinputRef.current?.focus();\n\t};\n\n\tconst removeOption = (option: Option) => {\n\t\tsetSelectedOptions(selectedOptions.filter((o) => o.id !== option.id));\n\t};\n\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (\n\t\t\te.key === \"Backspace\" &&\n\t\t\tsearchTerm === \"\" &&\n\t\t\tselectedOptions.length > 0\n\t\t) {\n\t\t\tremoveOption(selectedOptions[selectedOptions.length - 1]);\n\t\t}\n\n\t\tif (!isOpen) {\n\t\t\tif (e.key === \"ArrowDown\" || e.key === \"Enter\") {\n\t\t\t\tsetIsOpen(true);\n\t\t\t\tsetHighlightedIndex(0);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.key) {\n\t\t\tcase \"ArrowDown\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex((prev) => (prev + 1) % filteredOptions.length);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowUp\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex(\n\t\t\t\t\t(prev) =>\n\t\t\t\t\t\t(prev - 1 + filteredOptions.length) % filteredOptions.length,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Enter\":\n\t\t\t\te.preventDefault();\n\t\t\t\tif (filteredOptions[highlightedIndex]) {\n\t\t\t\t\ttoggleOption(filteredOptions[highlightedIndex]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Escape\":\n\t\t\t\tsetIsOpen(false);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetHighlightedIndex(0);\n\t\t}\n\t}, [isOpen, searchTerm]);\n\n\treturn (\n\t\t<div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\n\t\t\t<div className=\"relative\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetIsOpen(true);\n\t\t\t\t\t\tinputRef.current?.focus();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{selectedOptions.map((option) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={option.id}\n\t\t\t\t\t\t\tclassName=\"flex items-center gap-1.5 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{option.name}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tclassName=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\n\t\t\t\t\t\t\t\tonClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\tremoveOption(option);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XIcon />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t\t\tsetSearchTerm(e.target.value)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonFocus={() => setIsOpen(true)}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tselectedOptions.length === 0 ? \"Select frameworks...\" : \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclassName=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\n\t\t\t\t\t\t<ul className=\"p-1\">\n\t\t\t\t\t\t\t{filteredOptions.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredOptions.map((option, index) => (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tkey={option.id}\n\t\t\t\t\t\t\t\t\t\tclassName={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? \"bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100\" : \"text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100\"}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleOption(option)}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => setHighlightedIndex(index)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{option.name}\n\t\t\t\t\t\t\t\t\t\t{selectedOptions.some((o) => o.id === option.id) && (\n\t\t\t\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">\n\t\t\t\t\t\t\t\t\tNo options found.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// Main App component to render the MultiSelect\nexport default function MultiSelectPage() {\n\treturn (\n\t\t<div className=\"p-4 font-sans\">\n\t\t\t<style>{`\n            @keyframes popover-in {\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\n                to { opacity: 1; transform: scale(1) translateY(0); }\n            }\n            .animate-popover-in {\n                transform-origin: top;\n                animation: popover-in 0.1s ease-out forwards;\n            }\n        `}</style>\n\t\t\t<div className=\"w-full max-w-md\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">\n\t\t\t\t\tFramework Multi-Select\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">\n\t\t\t\t\tSelect your favorite frameworks.\n\t\t\t\t</p>\n\t\t\t\t<MultiSelect />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "multiselector2.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// Type definition for tag objects\ninterface Tag {\n\tid: number;\n\tname: string;\n\tvalue: string;\n\tcolor: string;\n}\n\n// A list of all available tags for the multi-select component.\nconst ALL_TAGS: Tag[] = [\n\t{\n\t\tid: 1,\n\t\tname: \"JavaScript\",\n\t\tvalue: \"javascript\",\n\t\tcolor:\n\t\t\t\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"TypeScript\",\n\t\tvalue: \"typescript\",\n\t\tcolor: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"React\",\n\t\tvalue: \"react\",\n\t\tcolor: \"bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200\",\n\t},\n\t{\n\t\tid: 4,\n\t\tname: \"Vue\",\n\t\tvalue: \"vue\",\n\t\tcolor: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n\t},\n\t{\n\t\tid: 5,\n\t\tname: \"Angular\",\n\t\tvalue: \"angular\",\n\t\tcolor: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n\t},\n\t{\n\t\tid: 6,\n\t\tname: \"Node.js\",\n\t\tvalue: \"nodejs\",\n\t\tcolor:\n\t\t\t\"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200\",\n\t},\n\t{\n\t\tid: 7,\n\t\tname: \"Python\",\n\t\tvalue: \"python\",\n\t\tcolor:\n\t\t\t\"bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200\",\n\t},\n\t{\n\t\tid: 8,\n\t\tname: \"CSS\",\n\t\tvalue: \"css\",\n\t\tcolor:\n\t\t\t\"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n\t},\n\t{\n\t\tid: 9,\n\t\tname: \"HTML\",\n\t\tvalue: \"html\",\n\t\tcolor:\n\t\t\t\"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\",\n\t},\n\t{\n\t\tid: 10,\n\t\tname: \"GraphQL\",\n\t\tvalue: \"graphql\",\n\t\tcolor: \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200\",\n\t},\n];\n\n// Icon for the close button on tags (lucide-react style)\nconst XIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<path d=\"M18 6 6 18\" />\n\t\t<path d=\"m6 6 12 12\" />\n\t</svg>\n);\n\n// Icon for the checkmark on selected items (lucide-react style)\nconst CheckIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-4 w-4\"\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\n// Tag icon for visual enhancement\nconst TagIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<path d=\"M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z\" />\n\t\t<path d=\"M7 7h.01\" />\n\t</svg>\n);\n\n/**\n * A colorful tag-based multi-select component styled to feel like shadcn/ui.\n * Features colored tags, search functionality, and a modern interface.\n */\nconst TagMultiSelect: React.FC = () => {\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\tconst [selectedTags, setSelectedTags] = useState<Tag[]>([\n\t\tALL_TAGS[0],\n\t\tALL_TAGS[2],\n\t]);\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\n\tconst [highlightedIndex, setHighlightedIndex] = useState<number>(0);\n\n\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\twrapperRef.current &&\n\t\t\t\t!wrapperRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => document.removeEventListener(\"mousedown\", handleClickOutside);\n\t}, []);\n\n\tconst filteredTags = ALL_TAGS.filter(\n\t\t(tag) =>\n\t\t\t!selectedTags.some((selected) => selected.id === tag.id) &&\n\t\t\ttag.name.toLowerCase().includes(searchTerm.toLowerCase()),\n\t);\n\n\tconst toggleTag = (tag: Tag) => {\n\t\tsetSelectedTags((prev) =>\n\t\t\tprev.some((t) => t.id === tag.id)\n\t\t\t\t? prev.filter((t) => t.id !== tag.id)\n\t\t\t\t: [...prev, tag],\n\t\t);\n\t\tsetSearchTerm(\"\");\n\t\tinputRef.current?.focus();\n\t};\n\n\tconst removeTag = (tag: Tag) => {\n\t\tsetSelectedTags(selectedTags.filter((t) => t.id !== tag.id));\n\t};\n\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (e.key === \"Backspace\" && searchTerm === \"\" && selectedTags.length > 0) {\n\t\t\tremoveTag(selectedTags[selectedTags.length - 1]);\n\t\t}\n\n\t\tif (!isOpen) {\n\t\t\tif (e.key === \"ArrowDown\" || e.key === \"Enter\") {\n\t\t\t\tsetIsOpen(true);\n\t\t\t\tsetHighlightedIndex(0);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.key) {\n\t\t\tcase \"ArrowDown\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex((prev) => (prev + 1) % filteredTags.length);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowUp\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex(\n\t\t\t\t\t(prev) => (prev - 1 + filteredTags.length) % filteredTags.length,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Enter\":\n\t\t\t\te.preventDefault();\n\t\t\t\tif (filteredTags[highlightedIndex]) {\n\t\t\t\t\ttoggleTag(filteredTags[highlightedIndex]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Escape\":\n\t\t\t\tsetIsOpen(false);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetHighlightedIndex(0);\n\t\t}\n\t}, [isOpen, searchTerm]);\n\n\treturn (\n\t\t<div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\n\t\t\t<div className=\"relative\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetIsOpen(true);\n\t\t\t\t\t\tinputRef.current?.focus();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{selectedTags.map((tag) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={tag.id}\n\t\t\t\t\t\t\tclassName={`flex items-center gap-1.5 ${tag.color} font-medium px-2 py-1 rounded-full text-xs`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<TagIcon />\n\t\t\t\t\t\t\t{tag.name}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tclassName=\"hover:bg-black/10 dark:hover:bg-white/10 rounded-full p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\n\t\t\t\t\t\t\t\tonClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\tremoveTag(tag);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XIcon />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t\t\tsetSearchTerm(e.target.value)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonFocus={() => setIsOpen(true)}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tplaceholder={selectedTags.length === 0 ? \"Select tags...\" : \"\"}\n\t\t\t\t\t\tclassName=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\n\t\t\t\t\t\t<ul className=\"p-1\">\n\t\t\t\t\t\t\t{filteredTags.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredTags.map((tag, index) => (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tkey={tag.id}\n\t\t\t\t\t\t\t\t\t\tclassName={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? \"bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100\" : \"text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100\"}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleTag(tag)}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => setHighlightedIndex(index)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`w-3 h-3 rounded-full ${tag.color.split(\" \")[0]}`}\n\t\t\t\t\t\t\t\t\t\t\t></div>\n\t\t\t\t\t\t\t\t\t\t\t{tag.name}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{selectedTags.some((t) => t.id === tag.id) && <CheckIcon />}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">\n\t\t\t\t\t\t\t\t\tNo tags found.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// Main App component to render the TagMultiSelect\nexport default function TagMultiSelectPage() {\n\treturn (\n\t\t<div className=\"p-4 font-sans\">\n\t\t\t<style>{`\n            @keyframes popover-in {\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\n                to { opacity: 1; transform: scale(1) translateY(0); }\n            }\n            .animate-popover-in {\n                transform-origin: top;\n                animation: popover-in 0.1s ease-out forwards;\n            }\n        `}</style>\n\t\t\t<div className=\"w-full max-w-md\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">\n\t\t\t\t\tTag Multi-Select\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">\n\t\t\t\t\tSelect your technology tags with colors.\n\t\t\t\t</p>\n\t\t\t\t<TagMultiSelect />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "multiselector3.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// Type definition for skill objects\ninterface Skill {\n\tid: number;\n\tname: string;\n\tvalue: string;\n\tlevel: \"Beginner\" | \"Intermediate\" | \"Advanced\" | \"Expert\";\n\tcategory: \"Frontend\" | \"Backend\" | \"DevOps\" | \"Design\" | \"Mobile\";\n}\n\n// A list of all available skills for the multi-select component.\nconst ALL_SKILLS: Skill[] = [\n\t{\n\t\tid: 1,\n\t\tname: \"React\",\n\t\tvalue: \"react\",\n\t\tlevel: \"Advanced\",\n\t\tcategory: \"Frontend\",\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"Node.js\",\n\t\tvalue: \"nodejs\",\n\t\tlevel: \"Intermediate\",\n\t\tcategory: \"Backend\",\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"TypeScript\",\n\t\tvalue: \"typescript\",\n\t\tlevel: \"Advanced\",\n\t\tcategory: \"Frontend\",\n\t},\n\t{\n\t\tid: 4,\n\t\tname: \"Docker\",\n\t\tvalue: \"docker\",\n\t\tlevel: \"Intermediate\",\n\t\tcategory: \"DevOps\",\n\t},\n\t{\n\t\tid: 5,\n\t\tname: \"Figma\",\n\t\tvalue: \"figma\",\n\t\tlevel: \"Beginner\",\n\t\tcategory: \"Design\",\n\t},\n\t{\n\t\tid: 6,\n\t\tname: \"Python\",\n\t\tvalue: \"python\",\n\t\tlevel: \"Expert\",\n\t\tcategory: \"Backend\",\n\t},\n\t{\n\t\tid: 7,\n\t\tname: \"React Native\",\n\t\tvalue: \"react-native\",\n\t\tlevel: \"Intermediate\",\n\t\tcategory: \"Mobile\",\n\t},\n\t{ id: 8, name: \"AWS\", value: \"aws\", level: \"Advanced\", category: \"DevOps\" },\n\t{\n\t\tid: 9,\n\t\tname: \"GraphQL\",\n\t\tvalue: \"graphql\",\n\t\tlevel: \"Intermediate\",\n\t\tcategory: \"Backend\",\n\t},\n\t{\n\t\tid: 10,\n\t\tname: \"Tailwind CSS\",\n\t\tvalue: \"tailwind\",\n\t\tlevel: \"Expert\",\n\t\tcategory: \"Frontend\",\n\t},\n];\n\n// Icon for the close button on tags (lucide-react style)\nconst XIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<path d=\"M18 6 6 18\" />\n\t\t<path d=\"m6 6 12 12\" />\n\t</svg>\n);\n\n// Icon for the checkmark on selected items (lucide-react style)\nconst CheckIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-4 w-4\"\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\n// Star icon for skill level\nconst StarIcon = ({ filled }: { filled: boolean }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill={filled ? \"currentColor\" : \"none\"}\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<polygon points=\"12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26\" />\n\t</svg>\n);\n\n// Function to get level color\nconst getLevelColor = (level: string) => {\n\tswitch (level) {\n\t\tcase \"Beginner\":\n\t\t\treturn \"text-green-600 dark:text-green-400\";\n\t\tcase \"Intermediate\":\n\t\t\treturn \"text-yellow-600 dark:text-yellow-400\";\n\t\tcase \"Advanced\":\n\t\t\treturn \"text-orange-600 dark:text-orange-400\";\n\t\tcase \"Expert\":\n\t\t\treturn \"text-red-600 dark:text-red-400\";\n\t\tdefault:\n\t\t\treturn \"text-slate-600 dark:text-slate-400\";\n\t}\n};\n\n// Function to get level stars\nconst getLevelStars = (level: string) => {\n\tconst levels = { Beginner: 1, Intermediate: 2, Advanced: 3, Expert: 4 };\n\treturn levels[level as keyof typeof levels] || 1;\n};\n\n/**\n * A skills-based multi-select component with skill levels and categories.\n */\nconst SkillMultiSelect: React.FC = () => {\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\tconst [selectedSkills, setSelectedSkills] = useState<Skill[]>([\n\t\tALL_SKILLS[0],\n\t\tALL_SKILLS[2],\n\t]);\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\n\tconst [highlightedIndex, setHighlightedIndex] = useState<number>(0);\n\n\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\twrapperRef.current &&\n\t\t\t\t!wrapperRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => document.removeEventListener(\"mousedown\", handleClickOutside);\n\t}, []);\n\n\tconst filteredSkills = ALL_SKILLS.filter(\n\t\t(skill) =>\n\t\t\t!selectedSkills.some((selected) => selected.id === skill.id) &&\n\t\t\tskill.name.toLowerCase().includes(searchTerm.toLowerCase()),\n\t);\n\n\tconst toggleSkill = (skill: Skill) => {\n\t\tsetSelectedSkills((prev) =>\n\t\t\tprev.some((s) => s.id === skill.id)\n\t\t\t\t? prev.filter((s) => s.id !== skill.id)\n\t\t\t\t: [...prev, skill],\n\t\t);\n\t\tsetSearchTerm(\"\");\n\t\tinputRef.current?.focus();\n\t};\n\n\tconst removeSkill = (skill: Skill) => {\n\t\tsetSelectedSkills(selectedSkills.filter((s) => s.id !== skill.id));\n\t};\n\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (\n\t\t\te.key === \"Backspace\" &&\n\t\t\tsearchTerm === \"\" &&\n\t\t\tselectedSkills.length > 0\n\t\t) {\n\t\t\tremoveSkill(selectedSkills[selectedSkills.length - 1]);\n\t\t}\n\n\t\tif (!isOpen) {\n\t\t\tif (e.key === \"ArrowDown\" || e.key === \"Enter\") {\n\t\t\t\tsetIsOpen(true);\n\t\t\t\tsetHighlightedIndex(0);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.key) {\n\t\t\tcase \"ArrowDown\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex((prev) => (prev + 1) % filteredSkills.length);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowUp\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex(\n\t\t\t\t\t(prev) => (prev - 1 + filteredSkills.length) % filteredSkills.length,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Enter\":\n\t\t\t\te.preventDefault();\n\t\t\t\tif (filteredSkills[highlightedIndex]) {\n\t\t\t\t\ttoggleSkill(filteredSkills[highlightedIndex]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Escape\":\n\t\t\t\tsetIsOpen(false);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetHighlightedIndex(0);\n\t\t}\n\t}, [isOpen, searchTerm]);\n\n\treturn (\n\t\t<div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\n\t\t\t<div className=\"relative\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetIsOpen(true);\n\t\t\t\t\t\tinputRef.current?.focus();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{selectedSkills.map((skill) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={skill.id}\n\t\t\t\t\t\t\tclassName=\"flex items-center gap-1.5 bg-slate-100 dark:bg-slate-800 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-1\">\n\t\t\t\t\t\t\t\t<span>{skill.name}</span>\n\t\t\t\t\t\t\t\t<div className={`flex ${getLevelColor(skill.level)}`}>\n\t\t\t\t\t\t\t\t\t{Array.from({ length: 4 }, (_, i) => (\n\t\t\t\t\t\t\t\t\t\t<StarIcon key={i} filled={i < getLevelStars(skill.level)} />\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tclassName=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\n\t\t\t\t\t\t\t\tonClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\tremoveSkill(skill);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XIcon />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t\t\tsetSearchTerm(e.target.value)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonFocus={() => setIsOpen(true)}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tplaceholder={selectedSkills.length === 0 ? \"Select skills...\" : \"\"}\n\t\t\t\t\t\tclassName=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\n\t\t\t\t\t\t<ul className=\"p-1\">\n\t\t\t\t\t\t\t{filteredSkills.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredSkills.map((skill, index) => (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tkey={skill.id}\n\t\t\t\t\t\t\t\t\t\tclassName={`flex items-center justify-between p-2 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? \"bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100\" : \"text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100\"}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleSkill(skill)}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => setHighlightedIndex(index)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col gap-1\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"font-medium\">{skill.name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-xs px-2 py-0.5 bg-slate-200 dark:bg-slate-700 rounded-full\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{skill.category}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`flex items-center gap-1 ${getLevelColor(skill.level)}`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{Array.from({ length: 4 }, (_, i) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<StarIcon\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfilled={i < getLevelStars(skill.level)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-xs ml-1\">{skill.level}</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{selectedSkills.some((s) => s.id === skill.id) && (\n\t\t\t\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">\n\t\t\t\t\t\t\t\t\tNo skills found.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// Main App component to render the SkillMultiSelect\nexport default function SkillMultiSelectPage() {\n\treturn (\n\t\t<div className=\"p-4 font-sans\">\n\t\t\t<style>{`\n            @keyframes popover-in {\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\n                to { opacity: 1; transform: scale(1) translateY(0); }\n            }\n            .animate-popover-in {\n                transform-origin: top;\n                animation: popover-in 0.1s ease-out forwards;\n            }\n        `}</style>\n\t\t\t<div className=\"w-full max-w-md\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">\n\t\t\t\t\tSkills Multi-Select\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">\n\t\t\t\t\tSelect your skills with proficiency levels.\n\t\t\t\t</p>\n\t\t\t\t<SkillMultiSelect />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "multiselector4.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\n// Type definition for category objects\ninterface Category {\n\tid: number;\n\tname: string;\n\tvalue: string;\n\ticon: string;\n\tdescription: string;\n\tcount: number;\n}\n\n// A list of all available categories for the multi-select component.\nconst ALL_CATEGORIES: Category[] = [\n\t{\n\t\tid: 1,\n\t\tname: \"Technology\",\n\t\tvalue: \"technology\",\n\t\ticon: \"💻\",\n\t\tdescription: \"Tech-related content\",\n\t\tcount: 245,\n\t},\n\t{\n\t\tid: 2,\n\t\tname: \"Design\",\n\t\tvalue: \"design\",\n\t\ticon: \"🎨\",\n\t\tdescription: \"UI/UX and visual design\",\n\t\tcount: 189,\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"Business\",\n\t\tvalue: \"business\",\n\t\ticon: \"💼\",\n\t\tdescription: \"Business and entrepreneurship\",\n\t\tcount: 156,\n\t},\n\t{\n\t\tid: 4,\n\t\tname: \"Marketing\",\n\t\tvalue: \"marketing\",\n\t\ticon: \"📈\",\n\t\tdescription: \"Marketing and growth\",\n\t\tcount: 134,\n\t},\n\t{\n\t\tid: 5,\n\t\tname: \"Education\",\n\t\tvalue: \"education\",\n\t\ticon: \"📚\",\n\t\tdescription: \"Learning and tutorials\",\n\t\tcount: 298,\n\t},\n\t{\n\t\tid: 6,\n\t\tname: \"Health\",\n\t\tvalue: \"health\",\n\t\ticon: \"🏥\",\n\t\tdescription: \"Health and wellness\",\n\t\tcount: 87,\n\t},\n\t{\n\t\tid: 7,\n\t\tname: \"Travel\",\n\t\tvalue: \"travel\",\n\t\ticon: \"✈️\",\n\t\tdescription: \"Travel and adventure\",\n\t\tcount: 76,\n\t},\n\t{\n\t\tid: 8,\n\t\tname: \"Food\",\n\t\tvalue: \"food\",\n\t\ticon: \"🍕\",\n\t\tdescription: \"Recipes and cooking\",\n\t\tcount: 123,\n\t},\n\t{\n\t\tid: 9,\n\t\tname: \"Sports\",\n\t\tvalue: \"sports\",\n\t\ticon: \"⚽\",\n\t\tdescription: \"Sports and fitness\",\n\t\tcount: 98,\n\t},\n\t{\n\t\tid: 10,\n\t\tname: \"Entertainment\",\n\t\tvalue: \"entertainment\",\n\t\ticon: \"🎬\",\n\t\tdescription: \"Movies, music, and fun\",\n\t\tcount: 167,\n\t},\n];\n\n// Icon for the close button on tags (lucide-react style)\nconst XIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<path d=\"M18 6 6 18\" />\n\t\t<path d=\"m6 6 12 12\" />\n\t</svg>\n);\n\n// Icon for the checkmark on selected items (lucide-react style)\nconst CheckIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-4 w-4\"\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\n// Hash icon for categories\nconst HashIcon = () => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName=\"h-3 w-3\"\n\t>\n\t\t<line x1=\"4\" x2=\"20\" y1=\"9\" y2=\"9\" />\n\t\t<line x1=\"4\" x2=\"20\" y1=\"15\" y2=\"15\" />\n\t\t<line x1=\"10\" x2=\"8\" y1=\"3\" y2=\"21\" />\n\t\t<line x1=\"16\" x2=\"14\" y1=\"3\" y2=\"21\" />\n\t</svg>\n);\n\n/**\n * A category-based multi-select component with icons, descriptions, and counts.\n */\nconst CategoryMultiSelect: React.FC = () => {\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\tconst [selectedCategories, setSelectedCategories] = useState<Category[]>([\n\t\tALL_CATEGORIES[0],\n\t\tALL_CATEGORIES[1],\n\t]);\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\n\tconst [highlightedIndex, setHighlightedIndex] = useState<number>(0);\n\n\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\tconst inputRef = useRef<HTMLInputElement>(null);\n\n\tuseEffect(() => {\n\t\tconst handleClickOutside = (event: MouseEvent) => {\n\t\t\tif (\n\t\t\t\twrapperRef.current &&\n\t\t\t\t!wrapperRef.current.contains(event.target as Node)\n\t\t\t) {\n\t\t\t\tsetIsOpen(false);\n\t\t\t}\n\t\t};\n\t\tdocument.addEventListener(\"mousedown\", handleClickOutside);\n\t\treturn () => document.removeEventListener(\"mousedown\", handleClickOutside);\n\t}, []);\n\n\tconst filteredCategories = ALL_CATEGORIES.filter(\n\t\t(category) =>\n\t\t\t!selectedCategories.some((selected) => selected.id === category.id) &&\n\t\t\tcategory.name.toLowerCase().includes(searchTerm.toLowerCase()),\n\t);\n\n\tconst toggleCategory = (category: Category) => {\n\t\tsetSelectedCategories((prev) =>\n\t\t\tprev.some((c) => c.id === category.id)\n\t\t\t\t? prev.filter((c) => c.id !== category.id)\n\t\t\t\t: [...prev, category],\n\t\t);\n\t\tsetSearchTerm(\"\");\n\t\tinputRef.current?.focus();\n\t};\n\n\tconst removeCategory = (category: Category) => {\n\t\tsetSelectedCategories(\n\t\t\tselectedCategories.filter((c) => c.id !== category.id),\n\t\t);\n\t};\n\n\tconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n\t\tif (\n\t\t\te.key === \"Backspace\" &&\n\t\t\tsearchTerm === \"\" &&\n\t\t\tselectedCategories.length > 0\n\t\t) {\n\t\t\tremoveCategory(selectedCategories[selectedCategories.length - 1]);\n\t\t}\n\n\t\tif (!isOpen) {\n\t\t\tif (e.key === \"ArrowDown\" || e.key === \"Enter\") {\n\t\t\t\tsetIsOpen(true);\n\t\t\t\tsetHighlightedIndex(0);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.key) {\n\t\t\tcase \"ArrowDown\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex((prev) => (prev + 1) % filteredCategories.length);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowUp\":\n\t\t\t\te.preventDefault();\n\t\t\t\tsetHighlightedIndex(\n\t\t\t\t\t(prev) =>\n\t\t\t\t\t\t(prev - 1 + filteredCategories.length) % filteredCategories.length,\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Enter\":\n\t\t\t\te.preventDefault();\n\t\t\t\tif (filteredCategories[highlightedIndex]) {\n\t\t\t\t\ttoggleCategory(filteredCategories[highlightedIndex]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Escape\":\n\t\t\t\tsetIsOpen(false);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (isOpen) {\n\t\t\tsetHighlightedIndex(0);\n\t\t}\n\t}, [isOpen, searchTerm]);\n\n\treturn (\n\t\t<div className=\"w-full max-w-sm mx-auto\" ref={wrapperRef}>\n\t\t\t<div className=\"relative\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex flex-wrap items-center gap-2 p-2 min-h-[40px] text-sm border border-slate-300 dark:border-slate-600 bg-white dark:bg-black rounded-md shadow-sm cursor-text transition-colors focus-within:ring-2 focus-within:ring-slate-900 dark:focus-within:ring-slate-100 focus-within:ring-offset-2\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsetIsOpen(true);\n\t\t\t\t\t\tinputRef.current?.focus();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{selectedCategories.map((category) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={category.id}\n\t\t\t\t\t\t\tclassName=\"flex items-center gap-1.5 bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-800 dark:to-slate-700 text-slate-800 dark:text-slate-200 font-medium px-2 py-1 rounded-md border border-slate-200 dark:border-slate-600\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className=\"text-sm\">{category.icon}</span>\n\t\t\t\t\t\t\t<HashIcon />\n\t\t\t\t\t\t\t{category.name}\n\t\t\t\t\t\t\t<span className=\"text-xs bg-slate-300 dark:bg-slate-600 px-1.5 py-0.5 rounded-full\">\n\t\t\t\t\t\t\t\t{category.count}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tclassName=\"text-slate-500 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-200 rounded-full hover:bg-slate-200 dark:hover:bg-slate-700 p-0.5 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:focus:ring-slate-500 focus:ring-offset-1\"\n\t\t\t\t\t\t\t\tonClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\tremoveCategory(category);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XIcon />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t\t\tsetSearchTerm(e.target.value)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonFocus={() => setIsOpen(true)}\n\t\t\t\t\t\tonKeyDown={handleKeyDown}\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tselectedCategories.length === 0 ? \"Select categories...\" : \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclassName=\"flex-grow bg-transparent border-none outline-none text-slate-900 dark:text-slate-100 placeholder-slate-400 dark:placeholder-slate-500 text-sm p-0\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{isOpen && (\n\t\t\t\t\t<div className=\"absolute z-10 w-full mt-2 border border-slate-200 dark:border-slate-700 bg-white dark:bg-black rounded-md shadow-lg max-h-60 overflow-y-auto animate-popover-in\">\n\t\t\t\t\t\t<ul className=\"p-1\">\n\t\t\t\t\t\t\t{filteredCategories.length > 0 ? (\n\t\t\t\t\t\t\t\tfilteredCategories.map((category, index) => (\n\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\tkey={category.id}\n\t\t\t\t\t\t\t\t\t\tclassName={`flex items-center justify-between p-3 cursor-pointer rounded-md transition-colors duration-150 ${highlightedIndex === index ? \"bg-slate-100 dark:bg-slate-800 text-slate-900 dark:text-slate-100\" : \"text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-800 hover:text-slate-900 dark:hover:text-slate-100\"}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => toggleCategory(category)}\n\t\t\t\t\t\t\t\t\t\tonMouseEnter={() => setHighlightedIndex(index)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-lg\">{category.icon}</span>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"font-medium\">{category.name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-xs bg-slate-200 dark:bg-slate-700 px-2 py-0.5 rounded-full\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{category.count}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"text-xs text-slate-500 dark:text-slate-400\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{category.description}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{selectedCategories.some((c) => c.id === category.id) && (\n\t\t\t\t\t\t\t\t\t\t\t<CheckIcon />\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<li className=\"p-2 text-center text-slate-500 dark:text-slate-400\">\n\t\t\t\t\t\t\t\t\tNo categories found.\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// Main App component to render the CategoryMultiSelect\nexport default function CategoryMultiSelectPage() {\n\treturn (\n\t\t<div className=\"p-4 font-sans\">\n\t\t\t<style>{`\n            @keyframes popover-in {\n                from { opacity: 0; transform: scale(0.95) translateY(-10px); }\n                to { opacity: 1; transform: scale(1) translateY(0); }\n            }\n            .animate-popover-in {\n                transform-origin: top;\n                animation: popover-in 0.1s ease-out forwards;\n            }\n        `}</style>\n\t\t\t<div className=\"w-full max-w-md\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-center text-slate-900 dark:text-slate-100 mb-2\">\n\t\t\t\t\tCategory Multi-Select\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"text-center text-slate-600 dark:text-slate-400 mb-8\">\n\t\t\t\t\tSelect content categories with counts and descriptions.\n\t\t\t\t</p>\n\t\t\t\t<CategoryMultiSelect />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  }
}