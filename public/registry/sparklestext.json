{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sparklestext",
  "title": "Sparklestext",
  "description": "A minimalistic sparklestext component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "sparklestext.tsx",
      "content": "\"use client\";\n\nimport type * as React from \"react\";\nimport { SparklesText } from \"./sparklestext\";\n\nexport default function SparklesTextView(): React.JSX.Element {\n\treturn (\n\t\t<>\n\t\t\t{/* Style tag to import and apply the Google Font */}\n\t\t\t<style>{`\n                @import url('https://fonts.googleapis.com/css2?family=Fjalla+One&display=swap');\n                body {\n                    font-family: 'Space Grotesk', sans-serif;\n                }\n            `}</style>\n\n\t\t\t{/* Main container with full light/dark mode support */}\n\t\t\t<div className=\"flex-col items-center justify-center text-center p-4 gap-12 bg-white dark:bg-black transition-colors duration-300\">\n\t\t\t\t{/* Primary sparkles text with theme-aware styling */}\n\t\t\t\t<div className=\"p-8 rounded-lg bg-gray-100/80 dark:bg-gray-800/50 backdrop-blur-sm border border-gray-200 dark:border-gray-700 shadow-lg dark:shadow-gray-900/50 transition-all duration-300\">\n\t\t\t\t\t<SparklesText\n\t\t\t\t\t\tas=\"h1\"\n\t\t\t\t\t\tclassName=\"text-5xl md:text-7xl font-bold text-gray-900 dark:text-white tracking-tight transition-colors duration-300 mask-l-from-0%\"\n\t\t\t\t\t\tsparkleCount={15}\n\t\t\t\t\t\tsparkleSize={18}\n\t\t\t\t\t\tcolors={{ first: \"#fde047\", second: \"#f97316\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\tStarship\n\t\t\t\t\t</SparklesText>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "sparklestext.tsx",
      "content": "\"use client\";\n\nimport { motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport {\n\ttype ComponentProps,\n\ttype CSSProperties,\n\tcreateContext,\n\ttype ElementType,\n\ttype FC,\n\ttype ReactNode,\n\tuseContext,\n\tuseEffect,\n\tuseMemo,\n\tuseState,\n} from \"react\";\n\n// Helper function to generate a random number in a given range\nconst random = (min: number, max: number): number =>\n\tMath.random() * (max - min) + min;\n\n// --- TYPE DEFINITIONS ---\n\n// Defines the properties for a single sparkle\ninterface Sparkle {\n\tid: string;\n\tcolor: string;\n\tsize: number;\n\tstyle: {\n\t\ttop: string;\n\t\tleft: string;\n\t\tanimationDelay: string;\n\t};\n}\n\n// Defines the configuration options for the useSparkles hook\ninterface UseSparklesOptions {\n\tcolors?: { first: string; second: string };\n\tsparkleCount?: number;\n\tsparkleSize?: number;\n}\n\n// Defines the shape of the context data\ninterface SparklesContextType {\n\tsparkles: Sparkle[];\n}\n\n// Defines the props for the SparkleInstance component\ninterface SparkleInstanceProps {\n\tsize: number;\n\tcolor: string;\n\tstyle: CSSProperties;\n\tkey?: string; // Add key prop to fix the type error\n}\n\n// Defines the base props for the SparklesText component\ninterface BaseSparklesTextProps extends UseSparklesOptions {\n\tchildren?: ReactNode;\n\tclassName?: string;\n}\n\n// Makes the SparklesText component polymorphic, allowing the 'as' prop\n// to change the rendered HTML element and accept its specific attributes.\ntype PolymorphicSparklesTextProps<T extends ElementType> = {\n\tas?: T;\n} & BaseSparklesTextProps &\n\tOmit<ComponentProps<T>, keyof BaseSparklesTextProps>;\n\n// --- HOOK ---\n\n/**\n * useSparkles Hook\n * This custom hook encapsulates the logic for generating and managing sparkles.\n * @param options - Configuration for the sparkles.\n * @returns An array of sparkle objects.\n */\nconst useSparkles = ({\n\tcolors = { first: \"#9E7AFF\", second: \"#FE8BBB\" },\n\tsparkleCount = 20,\n\tsparkleSize = 12,\n}: UseSparklesOptions = {}): Sparkle[] => {\n\tconst [sparkles, setSparkles] = useState<Sparkle[]>([]);\n\n\tuseEffect(() => {\n\t\tconst generateSparkle = (): Sparkle => {\n\t\t\tconst color = Math.random() > 0.5 ? colors.first : colors.second;\n\t\t\treturn {\n\t\t\t\tid: crypto.randomUUID(),\n\t\t\t\tcolor,\n\t\t\t\tsize: random(sparkleSize * 0.7, sparkleSize * 1.3),\n\t\t\t\tstyle: {\n\t\t\t\t\ttop: `${random(0, 100)}%`,\n\t\t\t\t\tleft: `${random(0, 100)}%`,\n\t\t\t\t\t// animationDelay is a valid CSS property, so we can assert the type\n\t\t\t\t\tanimationDelay: `${random(0, 2.5)}s`,\n\t\t\t\t},\n\t\t\t};\n\t\t};\n\n\t\tconst newSparkles = Array.from({ length: sparkleCount }, generateSparkle);\n\t\tsetSparkles(newSparkles);\n\t}, [sparkleCount, colors.first, colors.second, sparkleSize]);\n\n\treturn sparkles;\n};\n\n// --- CONTEXT ---\nconst SparklesContext = createContext<SparklesContextType | null>(null);\n\n// --- COMPONENTS ---\n\n/**\n * SparkleInstance Component\n * Renders a single animated sparkle using an SVG shape.\n */\nconst SparkleInstance: FC<SparkleInstanceProps> = React.memo(\n\t({ size, color, style }) => {\n\t\tconst path = \"M120 80L100 0 80 80 0 100l80 20 20 80 20-80 80-20-80-20z\";\n\n\t\treturn (\n\t\t\t<motion.span\n\t\t\t\tclassName=\"absolute pointer-events-none z-10\"\n\t\t\t\tstyle={style}\n\t\t\t\tinitial={{ opacity: 0, scale: 0.5 }}\n\t\t\t\tanimate={{ opacity: [0, 1, 0], scale: 1, rotate: [0, 90, 180] }}\n\t\t\t\ttransition={{\n\t\t\t\t\tduration: random(1.5, 2.5),\n\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t\trepeat: Infinity,\n\t\t\t\t\tdelay: parseFloat(style.animationDelay as string),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 200 200\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t>\n\t\t\t\t\t<path d={path} fill={color} />\n\t\t\t\t</svg>\n\t\t\t</motion.span>\n\t\t);\n\t},\n);\n\nSparkleInstance.displayName = \"SparkleInstance\";\n\n/**\n * SparklesWrapper Component\n * Consumes the sparkles context and renders the SparkleInstance components.\n */\nconst SparklesWrapper: FC = React.memo(() => {\n\tconst context = useContext(SparklesContext);\n\tif (!context) {\n\t\t// This should not happen if the component is used correctly.\n\t\treturn null;\n\t}\n\tconst { sparkles } = context;\n\n\treturn (\n\t\t<>\n\t\t\t{sparkles.map((sparkle) => (\n\t\t\t\t<SparkleInstance\n\t\t\t\t\tkey={sparkle.id}\n\t\t\t\t\tsize={sparkle.size}\n\t\t\t\t\tcolor={sparkle.color}\n\t\t\t\t\tstyle={sparkle.style as CSSProperties}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</>\n\t);\n});\n\nSparklesWrapper.displayName = \"SparklesWrapper\";\n\n/**\n * SparklesText Component\n * The main component that wraps text and adds a sparkling effect.\n * It's a polymorphic component, meaning you can change the underlying\n * HTML element using the `as` prop.\n */\nexport const SparklesText = <T extends ElementType = \"h1\">({\n\tas,\n\tchildren,\n\tclassName,\n\t...sparkleOptions\n}: PolymorphicSparklesTextProps<T>) => {\n\tconst Component = as || \"h1\";\n\tconst sparkles = useSparkles(sparkleOptions);\n\tconst contextValue = useMemo(() => ({ sparkles }), [sparkles]);\n\n\treturn (\n\t\t<SparklesContext.Provider value={contextValue}>\n\t\t\t<Component className={`relative inline-block ${className || \"\"}`}>\n\t\t\t\t<SparklesWrapper />\n\t\t\t\t<span className=\"relative z-20\">{children}</span>\n\t\t\t</Component>\n\t\t</SparklesContext.Provider>\n\t);\n};\n\nexport default SparklesText;\n",
      "type": "registry:component"
    }
  ]
}