{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sparklestext",
  "title": "Sparklestext",
  "description": "A minimalistic sparklestext component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "sparklestext.tsx",
      "content": "\"use client\";\n\nimport * as React from 'react';\nimport { SparklesText } from './sparklestext';\n\nexport default function SparklesTextView(): React.JSX.Element {\n    return (\n        <>\n            {/* Style tag to import and apply the Google Font */}\n            <style>{`\n                @import url('https://fonts.googleapis.com/css2?family=Fjalla+One&display=swap');\n                body {\n                    font-family: 'Space Grotesk', sans-serif;\n                }\n            `}</style>\n\n            {/* Main container with full light/dark mode support */}\n            <div className=\"flex-col items-center justify-center text-center p-4 gap-12 bg-white dark:bg-black transition-colors duration-300\">\n\n                {/* Primary sparkles text with theme-aware styling */}\n                <div className=\"p-8 rounded-lg bg-gray-100/80 dark:bg-gray-800/50 backdrop-blur-sm border border-gray-200 dark:border-gray-700 shadow-lg dark:shadow-gray-900/50 transition-all duration-300\">\n                    <SparklesText\n                        as=\"h1\"\n                        className=\"text-5xl md:text-7xl font-bold text-gray-900 dark:text-white tracking-tight transition-colors duration-300 mask-l-from-0%\"\n                        sparkleCount={15}\n                        sparkleSize={18}\n                        colors={{ first: '#fde047', second: '#f97316' }}\n                    >\n                        Starship\n                    </SparklesText>\n                </div>\n            </div>\n        </>\n    );\n}",
      "type": "registry:ui"
    },
    {
      "path": "sparklestext.tsx",
      "content": "\"use client\";\n\nimport {\n    useState,\n    useEffect,\n    createContext,\n    useContext,\n    useMemo,\n    FC,\n    ReactNode,\n    ElementType,\n    ComponentProps,\n    CSSProperties,\n    memo,\n} from 'react';\nimport { motion } from 'framer-motion';\n\n// Helper function to generate a random number in a given range\nconst random = (min: number, max: number): number => Math.random() * (max - min) + min;\n\n// --- TYPE DEFINITIONS ---\n\n// Defines the properties for a single sparkle\ninterface Sparkle {\n    id: string;\n    color: string;\n    size: number;\n    style: {\n        top: string;\n        left: string;\n        animationDelay: string;\n    };\n}\n\n// Defines the configuration options for the useSparkles hook\ninterface UseSparklesOptions {\n    colors?: { first: string; second: string };\n    sparkleCount?: number;\n    sparkleSize?: number;\n}\n\n// Defines the shape of the context data\ninterface SparklesContextType {\n    sparkles: Sparkle[];\n}\n\n// Defines the props for the SparkleInstance component\ninterface SparkleInstanceProps {\n    size: number;\n    color: string;\n    style: CSSProperties;\n    key?: string; // Add key prop to fix the type error\n}\n\n// Defines the base props for the SparklesText component\ninterface BaseSparklesTextProps extends UseSparklesOptions {\n    children?: ReactNode;\n    className?: string;\n}\n\n// Makes the SparklesText component polymorphic, allowing the 'as' prop\n// to change the rendered HTML element and accept its specific attributes.\ntype PolymorphicSparklesTextProps<T extends ElementType> = {\n    as?: T;\n} & BaseSparklesTextProps & Omit<ComponentProps<T>, keyof BaseSparklesTextProps>;\n\n\n// --- HOOK ---\n\n/**\n * useSparkles Hook\n * This custom hook encapsulates the logic for generating and managing sparkles.\n * @param options - Configuration for the sparkles.\n * @returns An array of sparkle objects.\n */\nconst useSparkles = ({\n    colors = { first: '#9E7AFF', second: '#FE8BBB' },\n    sparkleCount = 20,\n    sparkleSize = 12,\n}: UseSparklesOptions = {}): Sparkle[] => {\n    const [sparkles, setSparkles] = useState<Sparkle[]>([]);\n\n    useEffect(() => {\n        const generateSparkle = (): Sparkle => {\n            const color = Math.random() > 0.5 ? colors.first : colors.second;\n            return {\n                id: crypto.randomUUID(),\n                color,\n                size: random(sparkleSize * 0.7, sparkleSize * 1.3),\n                style: {\n                    top: `${random(0, 100)}%`,\n                    left: `${random(0, 100)}%`,\n                    // animationDelay is a valid CSS property, so we can assert the type\n                    animationDelay: `${random(0, 2.5)}s`,\n                },\n            };\n        };\n\n        const newSparkles = Array.from({ length: sparkleCount }, generateSparkle);\n        setSparkles(newSparkles);\n    }, [sparkleCount, colors.first, colors.second, sparkleSize]);\n\n    return sparkles;\n};\n\n// --- CONTEXT ---\nconst SparklesContext = createContext<SparklesContextType | null>(null);\n\n\n// --- COMPONENTS ---\n\n/**\n * SparkleInstance Component\n * Renders a single animated sparkle using an SVG shape.\n */\nconst SparkleInstance: FC<SparkleInstanceProps> = memo(({ size, color, style }) => {\n    const path = \"M120 80L100 0 80 80 0 100l80 20 20 80 20-80 80-20-80-20z\";\n\n    return (\n        <motion.span\n            className=\"absolute pointer-events-none z-10\"\n            style={style}\n            initial={{ opacity: 0, scale: 0.5 }}\n            animate={{ opacity: [0, 1, 0], scale: 1, rotate: [0, 90, 180] }}\n            transition={{\n                duration: random(1.5, 2.5),\n                ease: 'easeInOut',\n                repeat: Infinity,\n                delay: parseFloat(style.animationDelay as string),\n            }}\n        >\n            <svg\n                width={size}\n                height={size}\n                viewBox=\"0 0 200 200\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                <path d={path} fill={color} />\n            </svg>\n        </motion.span>\n    );\n});\n\nSparkleInstance.displayName = 'SparkleInstance';\n\n/**\n * SparklesWrapper Component\n * Consumes the sparkles context and renders the SparkleInstance components.\n */\nconst SparklesWrapper: FC = memo(() => {\n    const context = useContext(SparklesContext);\n    if (!context) {\n        // This should not happen if the component is used correctly.\n        return null;\n    }\n    const { sparkles } = context;\n\n    return (\n        <>\n            {sparkles.map((sparkle) => (\n                <SparkleInstance\n                    key={sparkle.id}\n                    size={sparkle.size}\n                    color={sparkle.color}\n                    style={sparkle.style as CSSProperties}\n                />\n            ))}\n        </>\n    );\n});\n\nSparklesWrapper.displayName = 'SparklesWrapper';\n\n/**\n * SparklesText Component\n * The main component that wraps text and adds a sparkling effect.\n * It's a polymorphic component, meaning you can change the underlying\n * HTML element using the `as` prop.\n */\nexport const SparklesText = <T extends ElementType = 'h1'>({\n    as,\n    children,\n    className,\n    ...sparkleOptions\n}: PolymorphicSparklesTextProps<T>) => {\n    const Component = as || 'h1';\n    const sparkles = useSparkles(sparkleOptions);\n    const contextValue = useMemo(() => ({ sparkles }), [sparkles]);\n\n    return (\n        <SparklesContext.Provider value={contextValue}>\n            <Component className={`relative inline-block ${className || ''}`}>\n                <SparklesWrapper />\n                <span className=\"relative z-20\">{children}</span>\n            </Component>\n        </SparklesContext.Provider>\n    );\n};\n\nexport default SparklesText;\n",
      "type": "registry:ui"
    }
  ]
}