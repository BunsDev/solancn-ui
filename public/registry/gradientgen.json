{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "gradientgen",
  "title": "Gradientgen",
  "description": "A minimalistic gradientgen component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "gradientgen.tsx",
      "content": "\"use client\";\nimport clsx from \"clsx\";\nimport { ArrowRightLeft, Check, Copy, Plus } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport type React from \"react\";\nimport { useCallback, useRef, useState } from \"react\";\n\nconst defaultColors = [\"#4f46e5\", \"#06b6d4\"]; // indigo-600 â†’ cyan-500\n\n// --- Helper functions for color interpolation ---\n\n// Converts a hex color string to an RGB object.\nconst hexToRgb = (hex: string) => {\n\tconst result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\treturn result\n\t\t? {\n\t\t\t\tr: parseInt(result[1], 16),\n\t\t\t\tg: parseInt(result[2], 16),\n\t\t\t\tb: parseInt(result[3], 16),\n\t\t\t}\n\t\t: null;\n};\n\n// Converts a single color component (0-255) to its two-digit hex representation.\nconst componentToHex = (c: number) => {\n\tconst hex = c.toString(16);\n\treturn hex.length === 1 ? \"0\" + hex : hex;\n};\n\n// Converts an RGB color object to a hex color string.\nconst rgbToHex = (r: number, g: number, b: number) => {\n\treturn \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\n// Calculates an intermediate color between two hex colors.\nconst interpolateColor = (color1: string, color2: string, factor = 0.5) => {\n\tconst rgb1 = hexToRgb(color1);\n\tconst rgb2 = hexToRgb(color2);\n\tif (!rgb1 || !rgb2) return color1; // Fallback if conversion fails\n\tconst result = {\n\t\tr: Math.round(rgb1.r + factor * (rgb2.r - rgb1.r)),\n\t\tg: Math.round(rgb1.g + factor * (rgb2.g - rgb1.g)),\n\t\tb: Math.round(rgb1.b + factor * (rgb2.b - rgb1.b)),\n\t};\n\treturn rgbToHex(result.r, result.g, result.b);\n};\n\n// Generates an array of intermediate colors for a smoother gradient.\nconst getSmoothedColors = (colorList: string[], steps = 8) => {\n\tif (colorList.length < 2) return colorList;\n\tconst smoothed: string[] = [];\n\tfor (let i = 0; i < colorList.length - 1; i++) {\n\t\tconst c1 = colorList[i];\n\t\tconst c2 = colorList[i + 1];\n\t\tfor (let j = 0; j < steps; j++) {\n\t\t\tsmoothed.push(interpolateColor(c1, c2, j / steps));\n\t\t}\n\t}\n\tsmoothed.push(colorList[colorList.length - 1]);\n\treturn smoothed;\n};\n\nexport default function Gradientgen() {\n\t/* ---------------- state --------------- */\n\tconst [colors, setColors] = useState(defaultColors);\n\tconst [smooth, setSmooth] = useState(true);\n\tconst [type, setType] = useState(\"linear\"); // linear | radial | conic\n\tconst [angle, setAngle] = useState(45); // only for linear\n\n\t// Use next-themes hook for proper theme detection\n\tconst { theme, resolvedTheme } = useTheme();\n\tconst isDark = theme === \"dark\" || resolvedTheme === \"dark\";\n\n\t/* ------------ helpers ----------------- */\n\tconst displayColors = smooth ? getSmoothedColors(colors) : colors;\n\tconst colorStops = displayColors.join(\",\");\n\n\tconst gradientCss = (() => {\n\t\tif (type === \"linear\") return `linear-gradient(${angle}deg, ${colorStops})`;\n\t\tif (type === \"radial\") return `radial-gradient(circle, ${colorStops})`;\n\t\treturn `conic-gradient(${colorStops})`;\n\t})();\n\n\tconst handleColorChange = (i: number, value: string) =>\n\t\tsetColors((prev) => prev.map((c, idx) => (idx === i ? value : c)));\n\n\tconst addColor = () => setColors((prev) => [...prev, \"#ffffff\"]);\n\n\t// Custom dark background color\n\tconst darkBg = \"#040609\";\n\tconst cardBgStyle = { backgroundColor: isDark ? darkBg : \"white\" };\n\n\t/* --------------- render --------------- */\n\treturn (\n\t\t<div className=\"mx-auto max-w-xl p-4 sm:p-6 font-sans\">\n\t\t\t{/* ðŸ”µ Top card */}\n\t\t\t<section\n\t\t\t\tclassName=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4 sm:p-6\"\n\t\t\t\tstyle={cardBgStyle}\n\t\t\t>\n\t\t\t\t<div className=\"flex items-center justify-between\">\n\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t{colors.map((c, i) => (\n\t\t\t\t\t\t\t<ColorSwatch\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\tcolor={c}\n\t\t\t\t\t\t\t\tonRemove={() =>\n\t\t\t\t\t\t\t\t\tsetColors((prev) => prev.filter((_, idx) => idx !== i))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcanRemove={colors.length > 2}\n\t\t\t\t\t\t\t\tonChange={(val) => handleColorChange(i, val)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={addColor}\n\t\t\t\t\t\t\tclassName=\"h-8 w-8 rounded-full border border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center text-gray-400 dark:text-gray-500 hover:bg-gray-100 transition-colors\"\n\t\t\t\t\t\t\tonMouseEnter={(e) => {\n\t\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = isDark\n\t\t\t\t\t\t\t\t\t? darkBg\n\t\t\t\t\t\t\t\t\t: \"#f3f4f6\";\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonMouseLeave={(e) => {\n\t\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = \"transparent\";\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttitle=\"Add color\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => setSmooth((s) => !s)}\n\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\"flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-sm font-medium\",\n\t\t\t\t\t\t\tsmooth\n\t\t\t\t\t\t\t\t? \"bg-indigo-50 dark:bg-indigo-900/30 border-indigo-200 dark:border-indigo-700 text-indigo-600 dark:text-indigo-400\"\n\t\t\t\t\t\t\t\t: \"bg-gray-50 border-gray-200 dark:border-gray-600 text-gray-500 dark:text-gray-400\",\n\t\t\t\t\t\t\t\"hover:shadow-md transition-all duration-200\",\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t!smooth\n\t\t\t\t\t\t\t\t? { backgroundColor: isDark ? darkBg : \"#f9fafb\" }\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ArrowRightLeft size={16} />\n\t\t\t\t\t\t<span>Smoothen</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"mt-6 relative\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ background: gradientCss }}\n\t\t\t\t\t\tclassName=\"w-full h-52 rounded-xl transition-all duration-200 ring-1 ring-gray-200 dark:ring-gray-700\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"absolute inset-x-4 -bottom-4 h-6 rounded-xl blur-md bg-black/20 dark:bg-black/40 opacity-20 pointer-events-none\" />\n\t\t\t\t</div>\n\t\t\t</section>\n\n\t\t\t{/* ðŸŽ› Controls */}\n\t\t\t<section\n\t\t\t\tclassName=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 mt-6 p-4 sm:p-6 flex flex-col gap-6\"\n\t\t\t\tstyle={cardBgStyle}\n\t\t\t>\n\t\t\t\t<GradientTypeTabs active={type} onChange={setType} isDark={isDark} />\n\t\t\t\t{type === \"linear\" && <AngleKnob angle={angle} onChange={setAngle} />}\n\t\t\t</section>\n\n\t\t\t{/* ðŸ“„ Code Output */}\n\t\t\t<CodeOutput\n\t\t\t\ttype={type}\n\t\t\t\tangle={angle}\n\t\t\t\tcolorStops={colorStops}\n\t\t\t\tgradientCss={gradientCss}\n\t\t\t\tisDark={isDark}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\n/* ---------------------------------------------------------------- */\n/* ----------------------- Sub-Components ------------------------- */\n/* ---------------------------------------------------------------- */\n\ninterface ColorSwatchProps {\n\tcolor: string;\n\tonChange: (value: string) => void;\n\tonRemove: () => void;\n\tcanRemove: boolean;\n}\n\nfunction ColorSwatch({\n\tcolor,\n\tonChange,\n\tonRemove,\n\tcanRemove,\n}: ColorSwatchProps) {\n\treturn (\n\t\t<div className=\"relative group\">\n\t\t\t<label\n\t\t\t\tclassName=\"h-8 w-8 rounded-full border-2 border-white dark:border-gray-700 shadow-md cursor-pointer hover:ring-2 hover:ring-offset-2 hover:ring-indigo-200 dark:hover:ring-indigo-400 hover:ring-offset-white dark:hover:ring-offset-gray-800 block transition-all duration-200 hover:scale-110\"\n\t\t\t\tstyle={{ backgroundColor: color }}\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"color\"\n\t\t\t\t\tclassName=\"sr-only\"\n\t\t\t\t\tvalue={color}\n\t\t\t\t\tonChange={(e) => onChange(e.target.value)}\n\t\t\t\t/>\n\t\t\t</label>\n\t\t\t{canRemove && (\n\t\t\t\t<button\n\t\t\t\t\tonClick={onRemove}\n\t\t\t\t\tclassName=\"absolute -top-1 -right-1 h-4 w-4 bg-red-500 hover:bg-red-600 text-white rounded-full text-xs items-center justify-center hidden group-hover:flex transition-all duration-200 shadow-md\"\n\t\t\t\t>\n\t\t\t\t\t&times;\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\ninterface GradientTypeTabsProps {\n\tactive: string;\n\tonChange: (type: string) => void;\n\tisDark: boolean;\n}\n\nfunction GradientTypeTabs({ active, onChange, isDark }: GradientTypeTabsProps) {\n\tconst tabs = [\"linear\", \"radial\", \"conic\"] as const;\n\tconst darkBg = \"#040609\";\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"flex justify-center gap-2 p-1 bg-gray-100 rounded-full\"\n\t\t\tstyle={{ backgroundColor: isDark ? darkBg : \"#f3f4f6\" }}\n\t\t>\n\t\t\t{tabs.map((t) => (\n\t\t\t\t<button\n\t\t\t\t\tkey={t}\n\t\t\t\t\tonClick={() => onChange(t)}\n\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\"px-4 py-2 rounded-full text-sm font-medium capitalize transition-all duration-200\",\n\t\t\t\t\t\tactive === t\n\t\t\t\t\t\t\t? \"bg-white text-indigo-600 dark:text-indigo-400 shadow-md border border-gray-200 dark:border-gray-600\"\n\t\t\t\t\t\t\t: \"text-gray-600 dark:text-gray-300 hover:bg-white/50\",\n\t\t\t\t\t)}\n\t\t\t\t\tstyle={\n\t\t\t\t\t\tactive === t\n\t\t\t\t\t\t\t? { backgroundColor: isDark ? darkBg : \"white\" }\n\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t}\n\t\t\t\t\tonMouseEnter={(e) => {\n\t\t\t\t\t\tif (active !== t) {\n\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = isDark\n\t\t\t\t\t\t\t\t? `${darkBg}80`\n\t\t\t\t\t\t\t\t: \"rgba(255,255,255,0.5)\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseLeave={(e) => {\n\t\t\t\t\t\tif (active !== t) {\n\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = \"transparent\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{t}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\ninterface AngleKnobProps {\n\tangle: number;\n\tonChange: (angle: number) => void;\n}\n\nfunction AngleKnob({ angle, onChange }: AngleKnobProps) {\n\tconst knobRef = useRef<HTMLDivElement>(null);\n\n\tconst handlePointer = useCallback(\n\t\t(e: PointerEvent | TouchEvent) => {\n\t\t\tif (!knobRef.current) return;\n\t\t\tconst knob = knobRef.current.getBoundingClientRect();\n\t\t\tconst clientX = \"touches\" in e ? e.touches[0].clientX : e.clientX;\n\t\t\tconst clientY = \"touches\" in e ? e.touches[0].clientY : e.clientY;\n\t\t\tconst x = clientX - (knob.left + knob.width / 2);\n\t\t\tconst y = clientY - (knob.top + knob.height / 2);\n\t\t\tconst deg = Math.round((Math.atan2(y, x) * 180) / Math.PI + 90);\n\t\t\tonChange((deg + 360) % 360);\n\t\t},\n\t\t[onChange],\n\t);\n\n\tconst handleInteraction = useCallback(\n\t\t(e: React.PointerEvent | React.TouchEvent) => {\n\t\t\te.preventDefault();\n\t\t\thandlePointer(e.nativeEvent);\n\t\t\tconst move = (ev: PointerEvent | TouchEvent) => handlePointer(ev);\n\t\t\tconst up = () => {\n\t\t\t\twindow.removeEventListener(\"pointermove\", move);\n\t\t\t\twindow.removeEventListener(\"pointerup\", up);\n\t\t\t\twindow.removeEventListener(\"touchmove\", move);\n\t\t\t\twindow.removeEventListener(\"touchend\", up);\n\t\t\t};\n\t\t\twindow.addEventListener(\"pointermove\", move);\n\t\t\twindow.addEventListener(\"pointerup\", up);\n\t\t\twindow.addEventListener(\"touchmove\", move);\n\t\t\twindow.addEventListener(\"touchend\", up);\n\t\t},\n\t\t[handlePointer],\n\t);\n\n\treturn (\n\t\t<div className=\"flex items-center gap-4 justify-center\">\n\t\t\t<span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\n\t\t\t\tAngle\n\t\t\t</span>\n\t\t\t<div\n\t\t\t\tref={knobRef}\n\t\t\t\tonPointerDown={handleInteraction}\n\t\t\t\tonTouchStart={handleInteraction}\n\t\t\t\tclassName=\"relative h-24 w-24 rounded-full bg-gradient-to-br from-indigo-50 via-white to-purple-50 dark:from-indigo-900/20 dark:via-[#040609] dark:to-purple-900/20 border border-indigo-200 dark:border-indigo-700 cursor-pointer select-none flex items-center justify-center touch-none shadow-lg hover:shadow-xl transition-shadow duration-200\"\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"h-2 w-2 rounded-full bg-indigo-600 dark:bg-indigo-400 absolute shadow-sm\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttop: \"8px\",\n\t\t\t\t\t\tleft: \"calc(50% - 4px)\",\n\t\t\t\t\t\ttransform: `rotate(${angle}deg)`,\n\t\t\t\t\t\ttransformOrigin: \"4px 40px\",\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<span className=\"text-xs font-semibold text-indigo-600 dark:text-indigo-400\">\n\t\t\t\t\t{angle}Â°\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\ninterface CodeOutputProps {\n\ttype: string;\n\tangle: number;\n\tcolorStops: string;\n\tgradientCss: string;\n\tisDark: boolean;\n}\n\nfunction CodeOutput({\n\ttype,\n\tangle,\n\tcolorStops,\n\tgradientCss,\n\tisDark,\n}: CodeOutputProps) {\n\tconst [activeTab, setActiveTab] = useState(\"css\");\n\tconst [copied, setCopied] = useState(false);\n\n\tconst tailwindClass = (() => {\n\t\t// Tailwind's arbitrary value syntax requires spaces to be underscores.\n\t\tconst safeColorStops = colorStops.replace(/ /g, \"_\");\n\t\tif (type === \"linear\")\n\t\t\treturn `bg-[linear-gradient(${angle}deg,${safeColorStops})]`;\n\t\tif (type === \"radial\")\n\t\t\treturn `bg-[radial-gradient(circle,${safeColorStops})]`;\n\t\treturn `bg-[conic-gradient(${safeColorStops})]`;\n\t})();\n\n\tconst cssCode = `background: ${gradientCss};`;\n\tconst codeToDisplay = activeTab === \"css\" ? cssCode : tailwindClass;\n\n\tconst handleCopy = async () => {\n\t\ttry {\n\t\t\tawait navigator.clipboard.writeText(codeToDisplay);\n\t\t\tsetCopied(true);\n\t\t\tsetTimeout(() => setCopied(false), 2000);\n\t\t} catch {\n\t\t\t// Fallback for older browsers\n\t\t\tconst textArea = document.createElement(\"textarea\");\n\t\t\ttextArea.value = codeToDisplay;\n\t\t\ttextArea.style.position = \"fixed\";\n\t\t\ttextArea.style.left = \"-9999px\";\n\t\t\ttextArea.style.top = \"-9999px\";\n\t\t\tdocument.body.appendChild(textArea);\n\t\t\ttextArea.focus();\n\t\t\ttextArea.select();\n\t\t\ttry {\n\t\t\t\tdocument.execCommand(\"copy\");\n\t\t\t\tsetCopied(true);\n\t\t\t\tsetTimeout(() => setCopied(false), 2000);\n\t\t\t} catch (fallbackErr) {\n\t\t\t\tconsole.error(\"Failed to copy: \", fallbackErr);\n\t\t\t}\n\t\t\tdocument.body.removeChild(textArea);\n\t\t}\n\t};\n\n\tconst darkBg = \"#040609\";\n\tconst cardBgStyle = { backgroundColor: isDark ? darkBg : \"white\" };\n\tconst tabsBgStyle = { backgroundColor: isDark ? darkBg : \"#f3f4f6\" };\n\tconst copyBtnBgStyle = { backgroundColor: isDark ? darkBg : \"#f9fafb\" };\n\tconst preBgStyle = { backgroundColor: isDark ? darkBg : \"#1e293b\" };\n\n\treturn (\n\t\t<section\n\t\t\tclassName=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 mt-6 p-4 sm:p-6\"\n\t\t\tstyle={cardBgStyle}\n\t\t>\n\t\t\t<div className=\"flex items-center justify-between mb-4\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"flex gap-1 p-1 bg-gray-100 rounded-lg\"\n\t\t\t\t\tstyle={tabsBgStyle}\n\t\t\t\t>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => setActiveTab(\"css\")}\n\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\"px-3 py-1.5 text-sm font-medium rounded-md transition-all duration-200\",\n\t\t\t\t\t\t\tactiveTab === \"css\"\n\t\t\t\t\t\t\t\t? \"bg-white text-indigo-600 dark:text-indigo-400 shadow-sm border border-gray-200 dark:border-gray-600\"\n\t\t\t\t\t\t\t\t: \"text-gray-600 dark:text-gray-300 hover:bg-white/50\",\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\tactiveTab === \"css\"\n\t\t\t\t\t\t\t\t? { backgroundColor: isDark ? darkBg : \"white\" }\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonMouseEnter={(e) => {\n\t\t\t\t\t\t\tif (activeTab !== \"css\") {\n\t\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = isDark\n\t\t\t\t\t\t\t\t\t? `${darkBg}80`\n\t\t\t\t\t\t\t\t\t: \"rgba(255,255,255,0.5)\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseLeave={(e) => {\n\t\t\t\t\t\t\tif (activeTab !== \"css\") {\n\t\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = \"transparent\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tCSS\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => setActiveTab(\"tailwind\")}\n\t\t\t\t\t\tclassName={clsx(\n\t\t\t\t\t\t\t\"px-3 py-1.5 text-sm font-medium rounded-md transition-all duration-200\",\n\t\t\t\t\t\t\tactiveTab === \"tailwind\"\n\t\t\t\t\t\t\t\t? \"bg-white text-indigo-600 dark:text-indigo-400 shadow-sm border border-gray-200 dark:border-gray-600\"\n\t\t\t\t\t\t\t\t: \"text-gray-600 dark:text-gray-300 hover:bg-white/50\",\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\tactiveTab === \"tailwind\"\n\t\t\t\t\t\t\t\t? { backgroundColor: isDark ? darkBg : \"white\" }\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonMouseEnter={(e) => {\n\t\t\t\t\t\t\tif (activeTab !== \"tailwind\") {\n\t\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = isDark\n\t\t\t\t\t\t\t\t\t? `${darkBg}80`\n\t\t\t\t\t\t\t\t\t: \"rgba(255,255,255,0.5)\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseLeave={(e) => {\n\t\t\t\t\t\t\tif (activeTab !== \"tailwind\") {\n\t\t\t\t\t\t\t\te.currentTarget.style.backgroundColor = \"transparent\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tTailwind\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={handleCopy}\n\t\t\t\t\tclassName=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 transition-all duration-200 shadow-sm\"\n\t\t\t\t\tstyle={copyBtnBgStyle}\n\t\t\t\t\tonMouseEnter={(e) => {\n\t\t\t\t\t\te.currentTarget.style.backgroundColor = isDark\n\t\t\t\t\t\t\t? \"#0a0e14\"\n\t\t\t\t\t\t\t: \"#f3f4f6\";\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseLeave={(e) => {\n\t\t\t\t\t\te.currentTarget.style.backgroundColor = isDark ? darkBg : \"#f9fafb\";\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{copied ? (\n\t\t\t\t\t\t<Check size={16} className=\"text-green-500\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Copy size={16} />\n\t\t\t\t\t)}\n\t\t\t\t\t<span>{copied ? \"Copied!\" : \"Copy\"}</span>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<pre\n\t\t\t\tclassName=\"bg-slate-800 text-white p-4 rounded-lg overflow-x-auto border border-slate-700 dark:border-gray-700\"\n\t\t\t\tstyle={preBgStyle}\n\t\t\t>\n\t\t\t\t<code className=\"text-sm font-mono\">{codeToDisplay}</code>\n\t\t\t</pre>\n\t\t</section>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}