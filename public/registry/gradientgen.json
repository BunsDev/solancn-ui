{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "gradientgen",
	"title": "Gradientgen",
	"description": "A minimalistic gradientgen component designed with React and Tailwind CSS.",
	"author": "Reche Soares",
	"type": "registry:ui",
	"dependencies": [],
	"devDependencies": [],
	"registryDependencies": [],
	"cssVars": {
		"dark": {},
		"light": {}
	},
	"files": [
		{
			"path": "gradientgen.tsx",
			"content": "'use client'\nimport React, { useState, useCallback, useRef } from 'react';\nimport { Plus, ArrowRightLeft, Copy, Check } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport clsx from 'clsx';\n\nconst defaultColors = ['#4f46e5', '#06b6d4']; // indigo-600 â†’ cyan-500\n\n// --- Helper functions for color interpolation ---\n\n// Converts a hex color string to an RGB object.\nconst hexToRgb = (hex: string) => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n};\n\n// Converts a single color component (0-255) to its two-digit hex representation.\nconst componentToHex = (c: number) => {\n    const hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n};\n\n// Converts an RGB color object to a hex color string.\nconst rgbToHex = (r: number, g: number, b: number) => {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\n// Calculates an intermediate color between two hex colors.\nconst interpolateColor = (color1: string, color2: string, factor = 0.5) => {\n    const rgb1 = hexToRgb(color1);\n    const rgb2 = hexToRgb(color2);\n    if (!rgb1 || !rgb2) return color1; // Fallback if conversion fails\n    const result = {\n        r: Math.round(rgb1.r + factor * (rgb2.r - rgb1.r)),\n        g: Math.round(rgb1.g + factor * (rgb2.g - rgb1.g)),\n        b: Math.round(rgb1.b + factor * (rgb2.b - rgb1.b)),\n    };\n    return rgbToHex(result.r, result.g, result.b);\n};\n\n// Generates an array of intermediate colors for a smoother gradient.\nconst getSmoothedColors = (colorList: string[], steps = 8) => {\n    if (colorList.length < 2) return colorList;\n    const smoothed: string[] = [];\n    for (let i = 0; i < colorList.length - 1; i++) {\n        const c1 = colorList[i];\n        const c2 = colorList[i + 1];\n        for (let j = 0; j < steps; j++) {\n            smoothed.push(interpolateColor(c1, c2, j / steps));\n        }\n    }\n    smoothed.push(colorList[colorList.length - 1]);\n    return smoothed;\n}\n\n\nexport default function Gradientgen() {\n    /* ---------------- state --------------- */\n    const [colors, setColors] = useState(defaultColors);\n    const [smooth, setSmooth] = useState(true);\n    const [type, setType] = useState('linear'); // linear | radial | conic\n    const [angle, setAngle] = useState(45);       // only for linear\n\n    // Use next-themes hook for proper theme detection\n    const { theme, resolvedTheme } = useTheme();\n    const isDark = theme === 'dark' || resolvedTheme === 'dark';\n\n    /* ------------ helpers ----------------- */\n    const displayColors = smooth ? getSmoothedColors(colors) : colors;\n    const colorStops = displayColors.join(',');\n\n    const gradientCss = (() => {\n        if (type === 'linear')\n            return `linear-gradient(${angle}deg, ${colorStops})`;\n        if (type === 'radial')\n            return `radial-gradient(circle, ${colorStops})`;\n        return `conic-gradient(${colorStops})`;\n    })();\n\n    const handleColorChange = (i: number, value: string) =>\n        setColors(prev => prev.map((c, idx) => (idx === i ? value : c)));\n\n    const addColor = () => setColors(prev => [...prev, '#ffffff']);\n\n    // Custom dark background color\n    const darkBg = '#040609';\n    const cardBgStyle = { backgroundColor: isDark ? darkBg : 'white' };\n\n    /* --------------- render --------------- */\n    return (\n        <div className=\"mx-auto max-w-xl p-4 sm:p-6 font-sans\">\n            {/* ðŸ”µ Top card */}\n            <section\n                className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 p-4 sm:p-6\"\n                style={cardBgStyle}\n            >\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                        {colors.map((c, i) => (\n                            <ColorSwatch\n                                key={i}\n                                color={c}\n                                onRemove={() => setColors(prev => prev.filter((_, idx) => idx !== i))}\n                                canRemove={colors.length > 2}\n                                onChange={val => handleColorChange(i, val)}\n                            />\n                        ))}\n                        <button\n                            onClick={addColor}\n                            className=\"h-8 w-8 rounded-full border border-dashed border-gray-300 dark:border-gray-600 flex items-center justify-center text-gray-400 dark:text-gray-500 hover:bg-gray-100 transition-colors\"\n                            onMouseEnter={(e) => {\n                                e.currentTarget.style.backgroundColor = isDark ? darkBg : '#f3f4f6';\n                            }}\n                            onMouseLeave={(e) => {\n                                e.currentTarget.style.backgroundColor = 'transparent';\n                            }}\n                            title=\"Add color\"\n                        >\n                            <Plus size={16} />\n                        </button>\n                    </div>\n                    <button\n                        onClick={() => setSmooth(s => !s)}\n                        className={clsx(\n                            'flex items-center gap-1.5 px-3 py-1.5 rounded-full border text-sm font-medium',\n                            smooth\n                                ? 'bg-indigo-50 dark:bg-indigo-900/30 border-indigo-200 dark:border-indigo-700 text-indigo-600 dark:text-indigo-400'\n                                : 'bg-gray-50 border-gray-200 dark:border-gray-600 text-gray-500 dark:text-gray-400',\n                            'hover:shadow-md transition-all duration-200'\n                        )}\n                        style={!smooth ? { backgroundColor: isDark ? darkBg : '#f9fafb' } : undefined}\n                    >\n                        <ArrowRightLeft size={16} />\n                        <span>Smoothen</span>\n                    </button>\n                </div>\n                <div className=\"mt-6 relative\">\n                    <div\n                        style={{ background: gradientCss }}\n                        className=\"w-full h-52 rounded-xl transition-all duration-200 ring-1 ring-gray-200 dark:ring-gray-700\"\n                    />\n                    <div className=\"absolute inset-x-4 -bottom-4 h-6 rounded-xl blur-md bg-black/20 dark:bg-black/40 opacity-20 pointer-events-none\" />\n                </div>\n            </section>\n\n            {/* ðŸŽ› Controls */}\n            <section\n                className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 mt-6 p-4 sm:p-6 flex flex-col gap-6\"\n                style={cardBgStyle}\n            >\n                <GradientTypeTabs active={type} onChange={setType} isDark={isDark} />\n                {type === 'linear' && <AngleKnob angle={angle} onChange={setAngle} />}\n            </section>\n\n            {/* ðŸ“„ Code Output */}\n            <CodeOutput\n                type={type}\n                angle={angle}\n                colorStops={colorStops}\n                gradientCss={gradientCss}\n                isDark={isDark}\n            />\n        </div>\n    )\n}\n\n/* ---------------------------------------------------------------- */\n/* ----------------------- Sub-Components ------------------------- */\n/* ---------------------------------------------------------------- */\n\ninterface ColorSwatchProps {\n    color: string;\n    onChange: (value: string) => void;\n    onRemove: () => void;\n    canRemove: boolean;\n}\n\nfunction ColorSwatch({ color, onChange, onRemove, canRemove }: ColorSwatchProps) {\n    return (\n        <div className=\"relative group\">\n            <label\n                className=\"h-8 w-8 rounded-full border-2 border-white dark:border-gray-700 shadow-md cursor-pointer hover:ring-2 hover:ring-offset-2 hover:ring-indigo-200 dark:hover:ring-indigo-400 hover:ring-offset-white dark:hover:ring-offset-gray-800 block transition-all duration-200 hover:scale-110\"\n                style={{ backgroundColor: color }}\n            >\n                <input\n                    type=\"color\"\n                    className=\"sr-only\"\n                    value={color}\n                    onChange={e => onChange(e.target.value)}\n                />\n            </label>\n            {canRemove && (\n                <button onClick={onRemove} className=\"absolute -top-1 -right-1 h-4 w-4 bg-red-500 hover:bg-red-600 text-white rounded-full text-xs items-center justify-center hidden group-hover:flex transition-all duration-200 shadow-md\">\n                    &times;\n                </button>\n            )}\n        </div>\n    )\n}\n\ninterface GradientTypeTabsProps {\n    active: string;\n    onChange: (type: string) => void;\n    isDark: boolean;\n}\n\nfunction GradientTypeTabs({ active, onChange, isDark }: GradientTypeTabsProps) {\n    const tabs = ['linear', 'radial', 'conic'] as const;\n    const darkBg = '#040609';\n\n    return (\n        <div\n            className=\"flex justify-center gap-2 p-1 bg-gray-100 rounded-full\"\n            style={{ backgroundColor: isDark ? darkBg : '#f3f4f6' }}\n        >\n            {tabs.map(t => (\n                <button\n                    key={t}\n                    onClick={() => onChange(t)}\n                    className={clsx(\n                        'px-4 py-2 rounded-full text-sm font-medium capitalize transition-all duration-200',\n                        active === t\n                            ? 'bg-white text-indigo-600 dark:text-indigo-400 shadow-md border border-gray-200 dark:border-gray-600'\n                            : 'text-gray-600 dark:text-gray-300 hover:bg-white/50'\n                    )}\n                    style={active === t ? { backgroundColor: isDark ? darkBg : 'white' } : undefined}\n                    onMouseEnter={(e) => {\n                        if (active !== t) {\n                            e.currentTarget.style.backgroundColor = isDark ? `${darkBg}80` : 'rgba(255,255,255,0.5)';\n                        }\n                    }}\n                    onMouseLeave={(e) => {\n                        if (active !== t) {\n                            e.currentTarget.style.backgroundColor = 'transparent';\n                        }\n                    }}\n                >\n                    {t}\n                </button>\n            ))}\n        </div>\n    )\n}\n\ninterface AngleKnobProps {\n    angle: number;\n    onChange: (angle: number) => void;\n}\n\nfunction AngleKnob({ angle, onChange }: AngleKnobProps) {\n    const knobRef = useRef<HTMLDivElement>(null);\n\n    const handlePointer = useCallback((e: PointerEvent | TouchEvent) => {\n        if (!knobRef.current) return;\n        const knob = knobRef.current.getBoundingClientRect();\n        const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;\n        const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY;\n        const x = clientX - (knob.left + knob.width / 2);\n        const y = clientY - (knob.top + knob.height / 2);\n        const deg = Math.round((Math.atan2(y, x) * 180) / Math.PI + 90);\n        onChange((deg + 360) % 360);\n    }, [onChange]);\n\n    const handleInteraction = useCallback((e: React.PointerEvent | React.TouchEvent) => {\n        e.preventDefault();\n        handlePointer(e.nativeEvent);\n        const move = (ev: PointerEvent | TouchEvent) => handlePointer(ev);\n        const up = () => {\n            window.removeEventListener('pointermove', move);\n            window.removeEventListener('pointerup', up);\n            window.removeEventListener('touchmove', move);\n            window.removeEventListener('touchend', up);\n        };\n        window.addEventListener('pointermove', move);\n        window.addEventListener('pointerup', up);\n        window.addEventListener('touchmove', move);\n        window.addEventListener('touchend', up);\n    }, [handlePointer]);\n\n    return (\n        <div className=\"flex items-center gap-4 justify-center\">\n            <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">Angle</span>\n            <div\n                ref={knobRef}\n                onPointerDown={handleInteraction}\n                onTouchStart={handleInteraction}\n                className=\"relative h-24 w-24 rounded-full bg-gradient-to-br from-indigo-50 via-white to-purple-50 dark:from-indigo-900/20 dark:via-[#040609] dark:to-purple-900/20 border border-indigo-200 dark:border-indigo-700 cursor-pointer select-none flex items-center justify-center touch-none shadow-lg hover:shadow-xl transition-shadow duration-200\"\n            >\n                <div\n                    className=\"h-2 w-2 rounded-full bg-indigo-600 dark:bg-indigo-400 absolute shadow-sm\"\n                    style={{\n                        top: '8px',\n                        left: 'calc(50% - 4px)',\n                        transform: `rotate(${angle}deg)`,\n                        transformOrigin: '4px 40px',\n                    }}\n                />\n                <span className=\"text-xs font-semibold text-indigo-600 dark:text-indigo-400\">{angle}Â°</span>\n            </div>\n        </div>\n    )\n}\n\ninterface CodeOutputProps {\n    type: string;\n    angle: number;\n    colorStops: string;\n    gradientCss: string;\n    isDark: boolean;\n}\n\nfunction CodeOutput({ type, angle, colorStops, gradientCss, isDark }: CodeOutputProps) {\n    const [activeTab, setActiveTab] = useState('css');\n    const [copied, setCopied] = useState(false);\n\n    const tailwindClass = (() => {\n        // Tailwind's arbitrary value syntax requires spaces to be underscores.\n        const safeColorStops = colorStops.replace(/ /g, '_');\n        if (type === 'linear') return `bg-[linear-gradient(${angle}deg,${safeColorStops})]`;\n        if (type === 'radial') return `bg-[radial-gradient(circle,${safeColorStops})]`;\n        return `bg-[conic-gradient(${safeColorStops})]`;\n    })();\n\n    const cssCode = `background: ${gradientCss};`;\n    const codeToDisplay = activeTab === 'css' ? cssCode : tailwindClass;\n\n    const handleCopy = async () => {\n        try {\n            await navigator.clipboard.writeText(codeToDisplay);\n            setCopied(true);\n            setTimeout(() => setCopied(false), 2000);\n        } catch {\n            // Fallback for older browsers\n            const textArea = document.createElement('textarea');\n            textArea.value = codeToDisplay;\n            textArea.style.position = 'fixed';\n            textArea.style.left = '-9999px';\n            textArea.style.top = '-9999px';\n            document.body.appendChild(textArea);\n            textArea.focus();\n            textArea.select();\n            try {\n                document.execCommand('copy');\n                setCopied(true);\n                setTimeout(() => setCopied(false), 2000);\n            } catch (fallbackErr) {\n                console.error('Failed to copy: ', fallbackErr);\n            }\n            document.body.removeChild(textArea);\n        }\n    };\n\n    const darkBg = '#040609';\n    const cardBgStyle = { backgroundColor: isDark ? darkBg : 'white' };\n    const tabsBgStyle = { backgroundColor: isDark ? darkBg : '#f3f4f6' };\n    const copyBtnBgStyle = { backgroundColor: isDark ? darkBg : '#f9fafb' };\n    const preBgStyle = { backgroundColor: isDark ? darkBg : '#1e293b' };\n\n    return (\n        <section\n            className=\"rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-gray-100 dark:border-gray-700 mt-6 p-4 sm:p-6\"\n            style={cardBgStyle}\n        >\n            <div className=\"flex items-center justify-between mb-4\">\n                <div\n                    className=\"flex gap-1 p-1 bg-gray-100 rounded-lg\"\n                    style={tabsBgStyle}\n                >\n                    <button\n                        onClick={() => setActiveTab('css')}\n                        className={clsx(\n                            'px-3 py-1.5 text-sm font-medium rounded-md transition-all duration-200',\n                            activeTab === 'css'\n                                ? 'bg-white text-indigo-600 dark:text-indigo-400 shadow-sm border border-gray-200 dark:border-gray-600'\n                                : 'text-gray-600 dark:text-gray-300 hover:bg-white/50'\n                        )}\n                        style={activeTab === 'css' ? { backgroundColor: isDark ? darkBg : 'white' } : undefined}\n                        onMouseEnter={(e) => {\n                            if (activeTab !== 'css') {\n                                e.currentTarget.style.backgroundColor = isDark ? `${darkBg}80` : 'rgba(255,255,255,0.5)';\n                            }\n                        }}\n                        onMouseLeave={(e) => {\n                            if (activeTab !== 'css') {\n                                e.currentTarget.style.backgroundColor = 'transparent';\n                            }\n                        }}\n                    >\n                        CSS\n                    </button>\n                    <button\n                        onClick={() => setActiveTab('tailwind')}\n                        className={clsx(\n                            'px-3 py-1.5 text-sm font-medium rounded-md transition-all duration-200',\n                            activeTab === 'tailwind'\n                                ? 'bg-white text-indigo-600 dark:text-indigo-400 shadow-sm border border-gray-200 dark:border-gray-600'\n                                : 'text-gray-600 dark:text-gray-300 hover:bg-white/50'\n                        )}\n                        style={activeTab === 'tailwind' ? { backgroundColor: isDark ? darkBg : 'white' } : undefined}\n                        onMouseEnter={(e) => {\n                            if (activeTab !== 'tailwind') {\n                                e.currentTarget.style.backgroundColor = isDark ? `${darkBg}80` : 'rgba(255,255,255,0.5)';\n                            }\n                        }}\n                        onMouseLeave={(e) => {\n                            if (activeTab !== 'tailwind') {\n                                e.currentTarget.style.backgroundColor = 'transparent';\n                            }\n                        }}\n                    >\n                        Tailwind\n                    </button>\n                </div>\n                <button\n                    onClick={handleCopy}\n                    className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 text-sm text-gray-600 dark:text-gray-300 transition-all duration-200 shadow-sm\"\n                    style={copyBtnBgStyle}\n                    onMouseEnter={(e) => {\n                        e.currentTarget.style.backgroundColor = isDark ? '#0a0e14' : '#f3f4f6';\n                    }}\n                    onMouseLeave={(e) => {\n                        e.currentTarget.style.backgroundColor = isDark ? darkBg : '#f9fafb';\n                    }}\n                >\n                    {copied ? <Check size={16} className=\"text-green-500\" /> : <Copy size={16} />}\n                    <span>{copied ? 'Copied!' : 'Copy'}</span>\n                </button>\n            </div>\n            <pre\n                className=\"bg-slate-800 text-white p-4 rounded-lg overflow-x-auto border border-slate-700 dark:border-gray-700\"\n                style={preBgStyle}\n            >\n                <code className=\"text-sm font-mono\">\n                    {codeToDisplay}\n                </code>\n            </pre>\n        </section>\n    );\n}\n\n",
			"type": "registry:ui"
		}
	]
}
