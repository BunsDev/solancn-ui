{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password",
  "title": "Password",
  "description": "A minimalistic password input component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "password.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\n\n// SVG Icon for visibility ON\nconst EyeIcon = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\" />\n\t\t<circle cx=\"12\" cy=\"12\" r=\"3\" />\n\t</svg>\n);\n\n// SVG Icon for visibility OFF\nconst EyeOffIcon = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\" />\n\t\t<path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68\" />\n\t\t<path d=\"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61\" />\n\t\t<line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\" />\n\t</svg>\n);\n\n// The main Password Input Component\nconst PasswordInput = () => {\n\tconst [showPassword, setShowPassword] = useState(false);\n\tconst [password, setPassword] = useState(\"\");\n\n\tconst togglePasswordVisibility = () => {\n\t\tsetShowPassword(!showPassword);\n\t};\n\n\treturn (\n\t\t<div className=\"w-full max-w-sm space-y-2\">\n\t\t\t<label\n\t\t\t\thtmlFor=\"password\"\n\t\t\t\tclassName=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n\t\t\t>\n\t\t\t\tPassword\n\t\t\t</label>\n\t\t\t<div className=\"relative\">\n\t\t\t\t<input\n\t\t\t\t\tid=\"password\"\n\t\t\t\t\ttype={showPassword ? \"text\" : \"password\"}\n\t\t\t\t\tvalue={password}\n\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\tplaceholder=\"Enter your password\"\n\t\t\t\t\tclassName=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-3 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 pr-10\"\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={togglePasswordVisibility}\n\t\t\t\t\tclassName=\"absolute inset-y-0 right-0 flex items-center pr-3 text-muted-foreground hover:text-foreground transition-colors\"\n\t\t\t\t\taria-label=\"Toggle password visibility\"\n\t\t\t\t>\n\t\t\t\t\t{showPassword ? (\n\t\t\t\t\t\t<EyeOffIcon className=\"h-4 w-4\" />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<EyeIcon className=\"h-4 w-4\" />\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default PasswordInput;\n",
      "type": "registry:ui"
    },
    {
      "path": "strongPassword.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useState } from \"react\";\n\n// SVG Icon for visibility ON\nconst EyeIcon = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\" />\n\t\t<circle cx=\"12\" cy=\"12\" r=\"3\" />\n\t</svg>\n);\n\n// SVG Icon for visibility OFF\nconst EyeOffIcon = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\" />\n\t\t<path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68\" />\n\t\t<path d=\"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61\" />\n\t\t<line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\" />\n\t</svg>\n);\n\n// SVG Icon for validation check (valid)\nconst CheckIcon = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"3\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<polyline points=\"20 6 9 17 4 12\"></polyline>\n\t</svg>\n);\n\n// SVG Icon for validation cross (invalid)\nconst XIcon = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"3\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n\t\t<line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n\t</svg>\n);\n\n// Validation criteria configuration\nconst validationRules = [\n\t{ id: \"length\", text: \"At least 8 characters\", regex: /.{8,}/ },\n\t{ id: \"number\", text: \"At least 1 number\", regex: /\\d/ },\n\t{ id: \"lowercase\", text: \"At least 1 lowercase letter\", regex: /[a-z]/ },\n\t{ id: \"uppercase\", text: \"At least 1 uppercase letter\", regex: /[A-Z]/ },\n\t{\n\t\tid: \"special\",\n\t\ttext: \"At least 1 special character\",\n\t\tregex: /[^A-Za-z0-9]/,\n\t},\n];\n\n// A single validation item component\nconst ValidationItem = ({\n\tisValid,\n\ttext,\n}: {\n\tisValid: boolean;\n\ttext: string;\n}) => (\n\t<li\n\t\tclassName={`flex items-center transition-colors duration-300 text-sm ${isValid ? \"text-green-600 dark:text-green-400\" : \"text-muted-foreground\"}`}\n\t>\n\t\t{isValid ? (\n\t\t\t<CheckIcon className=\"h-4 w-4 mr-2\" />\n\t\t) : (\n\t\t\t<XIcon className=\"h-4 w-4 mr-2\" />\n\t\t)}\n\t\t<span>{text}</span>\n\t</li>\n);\n\n// The main Password Input Component with Validation\nconst StrongPasswordInput = () => {\n\tconst [showPassword, setShowPassword] = useState(false);\n\tconst [password, setPassword] = useState(\"\");\n\tconst [validationState, setValidationState] = useState({\n\t\tlength: false,\n\t\tnumber: false,\n\t\tlowercase: false,\n\t\tuppercase: false,\n\t\tspecial: false,\n\t});\n\tconst [isPristine, setIsPristine] = useState(true);\n\n\t// Effect to validate password whenever it changes\n\tuseEffect(() => {\n\t\t// If the field is empty, don't show errors yet.\n\t\tif (password === \"\") {\n\t\t\tsetIsPristine(true);\n\t\t\t// Reset validation state\n\t\t\tsetValidationState({\n\t\t\t\tlength: false,\n\t\t\t\tnumber: false,\n\t\t\t\tlowercase: false,\n\t\t\t\tuppercase: false,\n\t\t\t\tspecial: false,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tsetIsPristine(false);\n\n\t\t// Update validation state based on rules\n\t\tconst newValidationState = {\n\t\t\tlength: validationRules\n\t\t\t\t.find((r) => r.id === \"length\")!\n\t\t\t\t.regex.test(password),\n\t\t\tnumber: validationRules\n\t\t\t\t.find((r) => r.id === \"number\")!\n\t\t\t\t.regex.test(password),\n\t\t\tlowercase: validationRules\n\t\t\t\t.find((r) => r.id === \"lowercase\")!\n\t\t\t\t.regex.test(password),\n\t\t\tuppercase: validationRules\n\t\t\t\t.find((r) => r.id === \"uppercase\")!\n\t\t\t\t.regex.test(password),\n\t\t\tspecial: validationRules\n\t\t\t\t.find((r) => r.id === \"special\")!\n\t\t\t\t.regex.test(password),\n\t\t};\n\t\tsetValidationState(newValidationState);\n\t}, [password]);\n\n\tconst togglePasswordVisibility = () => {\n\t\tsetShowPassword(!showPassword);\n\t};\n\n\treturn (\n\t\t<div className=\"w-full max-w-sm space-y-4\">\n\t\t\t<div className=\"space-y-2\">\n\t\t\t\t<label\n\t\t\t\t\thtmlFor=\"password\"\n\t\t\t\t\tclassName=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n\t\t\t\t>\n\t\t\t\t\tPassword\n\t\t\t\t</label>\n\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\ttype={showPassword ? \"text\" : \"password\"}\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\tplaceholder=\"Create a strong password\"\n\t\t\t\t\t\tclassName=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-3 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 pr-10\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\tonClick={togglePasswordVisibility}\n\t\t\t\t\t\tclassName=\"absolute inset-y-0 right-0 flex items-center pr-3 text-muted-foreground hover:text-foreground transition-colors\"\n\t\t\t\t\t\taria-label=\"Toggle password visibility\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{showPassword ? (\n\t\t\t\t\t\t\t<EyeOffIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<EyeIcon className=\"h-4 w-4\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* Validation Criteria Section */}\n\t\t\t<div className=\"space-y-3\">\n\t\t\t\t<div className=\"flex justify-between items-center\">\n\t\t\t\t\t<h3 className=\"text-sm font-medium\">Password requirements:</h3>\n\t\t\t\t\t{isPristine && (\n\t\t\t\t\t\t<p className=\"text-xs text-muted-foreground\">\n\t\t\t\t\t\t\tEnter a password to check\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<ul className=\"space-y-2\">\n\t\t\t\t\t{validationRules.map((rule) => (\n\t\t\t\t\t\t<ValidationItem\n\t\t\t\t\t\t\tkey={rule.id}\n\t\t\t\t\t\t\tisValid={validationState[rule.id as keyof typeof validationState]}\n\t\t\t\t\t\t\ttext={rule.text}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default StrongPasswordInput;\n",
      "type": "registry:ui"
    }
  ]
}