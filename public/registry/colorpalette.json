{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "colorpalette",
  "title": "Colorpalette",
  "description": "A minimalistic colorpalette component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "colorpalette.tsx",
      "content": "'use client'\nimport React, { useState, useCallback, useEffect, createContext, useContext } from 'react';\nimport tinycolor from 'tinycolor2';\n\n// TypeScript interfaces\ninterface ColorShade {\n  hex: string;\n  rgb: string;\n  hsl: string;\n  name: string;\n  brightness: number;\n  contrast: number;\n}\n\n\n\ninterface ToastData {\n  id: number;\n  title: string;\n  description?: string;\n  variant: string;\n}\n\ninterface ToastContextType {\n  toast: (data: { title: string; description?: string; variant?: string }) => void;\n}\n\ninterface DialogContextType {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n}\n\n// Component prop types\ninterface IconProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\n\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n  className?: string;\n  variant?: 'primary' | 'outline' | 'destructive';\n  size?: 'md' | 'icon';\n}\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  className?: string;\n}\n\ninterface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface BadgeProps {\n  children: React.ReactNode;\n  variant?: 'default' | 'secondary' | 'destructive';\n  className?: string;\n}\n\ninterface DialogProps {\n  children: React.ReactNode;\n}\n\ninterface DialogContentProps {\n  children: React.ReactNode;\n  title: string;\n}\n\ninterface ToastProviderProps {\n  children: React.ReactNode;\n}\n\n// --- Helper Components & Icons ---\n// These are simple functional components to replace shadcn/ui and lucide-react for a self-contained file.\n\nconst Icon: React.FC<IconProps> = ({ children, className = \"w-4 h-4\" }) => <div className={className}>{children}</div>;\n\nconst ShuffleIcon = () => <Icon><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"m18 14 4 4-4 4\"></path><path d=\"m18 2 4 4-4 4\"></path><path d=\"M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22\"></path><path d=\"M2 6h1.972a4 4 0 0 1 3.6 2.2\"></path><path d=\"M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45\"></path></svg></Icon>;\nconst DownloadIcon = () => <Icon><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/><polyline points=\"7 10 12 15 17 10\"/><line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\"/></svg></Icon>;\nconst CopyIcon = () => <Icon><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\"/><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"/></svg></Icon>;\nconst EyeIcon = () => <Icon className=\"w-3 h-3 mr-1\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\"/><circle cx=\"12\" cy=\"12\" r=\"3\"/></svg></Icon>;\nconst ZapIcon = () => <Icon><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"/></svg></Icon>;\nconst FileDownIcon = () => <Icon className=\"w-4 h-4 mr-2\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\"/><path d=\"M9 18c-4.51 2-5-2-7-2\"/></svg></Icon>;\n\nconst Card: React.FC<CardProps> = ({ children, className = '', ...props }) => <div className={`bg-white dark:bg-black rounded-lg ${className}`} {...props}>{children}</div>;\n\nconst Button: React.FC<ButtonProps> = ({ children, className = '', variant = 'primary', size = 'md', ...props }) => {\n    const baseClasses = \"inline-flex items-center justify-center rounded-md font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-black\";\n    const variantClasses: Record<string, string> = {\n        primary: \"bg-purple-600 text-white hover:bg-purple-700 focus:ring-purple-500 dark:bg-purple-500 dark:hover:bg-purple-600\",\n        outline: \"border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-purple-500 dark:border-gray-600 dark:bg-black dark:text-gray-300 dark:hover:bg-gray-900\",\n        destructive: \"bg-red-500 text-white hover:bg-red-600 focus:ring-red-500 dark:bg-red-600 dark:hover:bg-red-700\",\n    };\n    const sizeClasses: Record<string, string> = {\n        md: \"h-12 px-4\",\n        icon: \"h-12 w-12\",\n    };\n    return <button className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`} {...props}>{children}</button>;\n};\n\nconst Input: React.FC<InputProps> = ({ className = '', ...props }) => <input className={`flex-1 h-12 px-3 rounded-md border border-gray-300 font-mono focus:ring-2 focus:ring-purple-500 focus:border-purple-500 bg-white dark:bg-black dark:border-gray-600 dark:text-white ${className}`} {...props} />;\n\nconst Select: React.FC<SelectProps> = ({ children, className = '', ...props }) => <select className={`w-full h-12 px-3 rounded-md border border-gray-300 bg-white focus:ring-2 focus:ring-purple-500 focus:border-purple-500 dark:bg-black dark:border-gray-600 dark:text-white ${className}`} {...props}>{children}</select>;\n\nconst Badge: React.FC<BadgeProps> = ({ children, variant = \"default\", className = '' }) => {\n    const variantClasses: Record<string, string> = {\n        default: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n        secondary: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n        destructive: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n    };\n    return <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${variantClasses[variant]} ${className}`}>{children}</span>;\n};\n\n// --- Toast Context and Provider ---\nconst ToastContext = createContext<ToastContextType | null>(null);\n\nconst useToast = (): ToastContextType => {\n    const context = useContext(ToastContext);\n    if (!context) throw new Error(\"useToast must be used within a ToastProvider\");\n    return context;\n};\n\nconst ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\n    const [toasts, setToasts] = useState<ToastData[]>([]);\n\n    const toast = useCallback(({ title, description, variant = 'default' }: { title: string; description?: string; variant?: string }) => {\n        const id = Date.now();\n        setToasts(prev => [...prev, { id, title, description, variant }]);\n        setTimeout(() => {\n            setToasts(currentToasts => currentToasts.filter(t => t.id !== id));\n        }, 3000);\n    }, []);\n\n    return (\n        <ToastContext.Provider value={{ toast }}>\n            {children}\n            <div id=\"toast-container\" className=\"fixed bottom-6 right-6 z-50 flex flex-col gap-3\">\n                {toasts.map(t => (\n                    <div key={t.id} className={`toast show p-4 rounded-lg shadow-lg text-white ${t.variant === 'destructive' ? 'bg-red-500 dark:bg-red-600' : 'bg-gray-800 dark:bg-gray-900'}`}>\n                        <div className=\"font-semibold\">{t.title}</div>\n                        {t.description && <div className=\"text-sm text-gray-300 dark:text-gray-400\">{t.description}</div>}\n                    </div>\n                ))}\n            </div>\n        </ToastContext.Provider>\n    );\n};\n\n// --- Dialog Component ---\nconst DialogContext = createContext<DialogContextType | null>(null);\n\nconst Dialog: React.FC<DialogProps> = ({ children }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <DialogContext.Provider value={{ isOpen, setIsOpen }}>{children}</DialogContext.Provider>;\n}\n\nconst DialogTrigger: React.FC<DialogProps> = ({ children }) => {\n    const context = useContext(DialogContext);\n    if (!context) throw new Error(\"DialogTrigger must be used within a Dialog\");\n    const { setIsOpen } = context;\n    return React.cloneElement(children as React.ReactElement<React.HTMLAttributes<HTMLElement>>, {\n        onClick: () => setIsOpen(true)\n    });\n}\n\nconst DialogContent: React.FC<DialogContentProps> = ({ children, title }) => {\n    const context = useContext(DialogContext);\n    if (!context) throw new Error(\"DialogContent must be used within a Dialog\");\n    const { isOpen, setIsOpen } = context;\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center\" onClick={() => setIsOpen(false)}>\n            <div className=\"bg-white dark:bg-black rounded-lg shadow-xl p-6 w-full max-w-sm m-4 animate-scale-in\" onClick={(e: React.MouseEvent) => e.stopPropagation()}>\n                <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{title}</h3>\n                    <button onClick={() => setIsOpen(false)} className=\"text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300\">&times;</button>\n                </div>\n                {children}\n            </div>\n        </div>\n    );\n}\n\n// --- Main Application Component ---\nconst ColorPaletteGenerator: React.FC = () => {\n    const [baseColor, setBaseColor] = useState<string>('#8B5CF6');\n    const [palette, setPalette] = useState<ColorShade[]>([]);\n    const [colorFormat, setColorFormat] = useState<'hex' | 'rgb' | 'hsl'>('hex');\n    const [harmonyMode, setHarmonyMode] = useState<string>('shades');\n    const { toast } = useToast();\n\n\n\n    const generatePalette = useCallback((color: string, mode: string) => {\n        try {\n            const baseColorObj = tinycolor(color);\n            if (!baseColorObj.isValid()) throw new Error('Invalid color');\n\n            let colors: tinycolor.Instance[] = [];\n            switch (mode) {\n                case 'shades':\n                    colors = Array.from({ length: 10 }, (_, i) => baseColorObj.clone().lighten(i * 5).desaturate(i*2)).reverse();\n                    break;\n                case 'complementary':\n                    colors = [\n                        ...tinycolor(baseColorObj).analogous(5),\n                        ...tinycolor(baseColorObj.complement()).analogous(5)\n                    ];\n                    break;\n                case 'triadic':\n                    const triadic = baseColorObj.triad();\n                    colors = triadic.flatMap((c: tinycolor.Instance) => tinycolor(c).analogous(4).slice(0, 4)).slice(0,10);\n                    break;\n                case 'analogous':\n                    colors = baseColorObj.analogous(10);\n                    break;\n                default:\n                    colors = Array.from({ length: 10 }, (_, i) => baseColorObj.clone().darken(i * 5));\n            }\n\n            const newPalette: ColorShade[] = colors.slice(0, 10).map((c: tinycolor.Instance, index: number) => {\n                const weights = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n                return {\n                    hex: c.toHexString().toUpperCase(),\n                    rgb: c.toRgbString(),\n                    hsl: c.toHslString(),\n                    name: `${weights[index]}`,\n                    brightness: c.getBrightness(),\n                    contrast: tinycolor.readability(c, '#ffffff'),\n                };\n            });\n            setPalette(newPalette);\n        } catch {\n            toast({\n                title: \"Invalid Color\",\n                description: \"Please enter a valid color format.\",\n                variant: \"destructive\"\n            });\n        }\n    }, [toast]);\n\n    useEffect(() => {\n        generatePalette(baseColor, harmonyMode);\n    }, [baseColor, harmonyMode, generatePalette]);\n\n\n    const copyToClipboard = useCallback((shade: ColorShade) => {\n        const textToCopy = shade[colorFormat];\n        navigator.clipboard.writeText(textToCopy).then(() => {\n            toast({ title: \"Copied!\", description: `${textToCopy} copied.` });\n        }).catch(() => {\n            toast({ title: \"Copy Failed\", variant: \"destructive\" });\n        });\n    }, [colorFormat, toast]);\n\n    const randomizeColor = useCallback(() => {\n        const randomColor = tinycolor.random().toHexString();\n        setBaseColor(randomColor);\n    }, []);\n\n    const exportPalette = useCallback((format: string) => {\n        let exportData = '';\n        switch (format) {\n            case 'css':\n                exportData = ':root {\\n' + palette.map(s => `  --color-${s.name}: ${s.hex};`).join('\\n') + '\\n}';\n                break;\n            case 'json':\n                const jsonObject = { baseColor, harmonyMode, palette: palette.reduce((acc, s) => ({ ...acc, [s.name]: s }), {} as Record<string, ColorShade>) };\n                exportData = JSON.stringify(jsonObject, null, 2);\n                break;\n            case 'tailwind':\n                exportData = `module.exports = {\\n  theme: {\\n    extend: {\\n      colors: {\\n        primary: {\\n${palette.map(s => `          '${s.name}': '${s.hex}',`).join('\\n')}\\n        }\\n      }\\n    }\\n  }\\n}`;\n                break;\n        }\n        navigator.clipboard.writeText(exportData).then(() => {\n            toast({ title: \"Exported!\", description: `${format.toUpperCase()} code copied.` });\n        });\n    }, [palette, baseColor, harmonyMode, toast]);\n\n\n\n    const getContrastColor = (hex: string): string => tinycolor(hex).getBrightness() > 128 ? '#1a1a1a' : '#ffffff';\n\n    return (\n        <div className=\"p-4 sm:p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n                <Card className=\"p-4 sm:p-6 mb-8 shadow-elegant animate-scale-in\">\n                    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                        <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Base Color</label>\n                            <div className=\"flex items-center gap-2\">\n                                <input type=\"color\" value={baseColor} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setBaseColor(e.target.value)} className=\"w-12 h-12 rounded-lg border-2 border-gray-200 dark:border-gray-600 cursor-pointer p-0\" />\n                                <Input type=\"text\" value={baseColor} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setBaseColor(e.target.value)} />\n                                <Button variant=\"outline\" size=\"icon\" onClick={randomizeColor}><ShuffleIcon /></Button>\n                            </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Color Harmony</label>\n                            <Select value={harmonyMode} onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setHarmonyMode(e.target.value)}>\n                                <option value=\"shades\">Shades</option>\n                                <option value=\"complementary\">Complementary</option>\n                                <option value=\"triadic\">Triadic</option>\n                                <option value=\"analogous\">Analogous</option>\n                            </Select>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Actions</label>\n                            <div className=\"flex items-center gap-2\">\n                                <Select value={colorFormat} onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setColorFormat(e.target.value as 'hex' | 'rgb' | 'hsl')} className=\"w-24\">\n                                    <option value=\"hex\">HEX</option>\n                                    <option value=\"rgb\">RGB</option>\n                                    <option value=\"hsl\">HSL</option>\n                                </Select>\n                                <Dialog>\n                                    <DialogTrigger>\n                                        <Button variant=\"outline\" className=\"flex-1\" size=\"md\">\n                                            <DownloadIcon /> <span className=\"ml-2\">Export</span>\n                                        </Button>\n                                    </DialogTrigger>\n                                    <DialogContent title=\"Export Palette\">\n                                        <div className=\"space-y-3\">\n                                            <Button variant=\"outline\" className=\"w-full justify-start\" onClick={() => exportPalette('css')}><FileDownIcon /> CSS Variables</Button>\n                                            <Button variant=\"outline\" className=\"w-full justify-start\" onClick={() => exportPalette('json')}><FileDownIcon /> JSON Format</Button>\n                                            <Button variant=\"outline\" className=\"w-full justify-start\" onClick={() => exportPalette('tailwind')}><FileDownIcon /> Tailwind Config</Button>\n                                        </div>\n                                    </DialogContent>\n                                </Dialog>\n                            </div>\n                        </div>\n                    </div>\n                </Card>\n\n\n\n                <main className=\"space-y-6 animate-fade-in\">\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 lg:grid-cols-10 gap-2 sm:gap-4\">\n                        {palette.map((shade, index) => (\n                            <Card key={index} onClick={() => copyToClipboard(shade)} style={{ backgroundColor: shade.hex }} className=\"relative group cursor-pointer overflow-hidden transition-all duration-300 hover:scale-105 hover:shadow-glow\">\n                                <div className=\"aspect-square p-3 flex flex-col justify-between min-h-[120px]\">\n                                    <div className=\"text-xs font-bold opacity-80\" style={{ color: getContrastColor(shade.hex) }}>{shade.name}</div>\n                                    <div className=\"flex justify-center\">\n                                        <div className=\"p-2 rounded-full bg-black/10 backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-opacity\">\n                                            <CopyIcon />\n                                        </div>\n                                    </div>\n                                    <div className=\"space-y-1 text-center\">\n                                        <div className=\"text-xs font-mono font-semibold\" style={{ color: getContrastColor(shade.hex) }}>{shade[colorFormat]}</div>\n                                        <Badge variant={shade.contrast >= 7 ? 'default' : shade.contrast >= 4.5 ? 'secondary' : 'destructive'}><EyeIcon />{shade.contrast >= 7 ? 'AAA' : shade.contrast >= 4.5 ? 'AA' : 'Fail'}</Badge>\n                                    </div>\n                                </div>\n                            </Card>\n                        ))}\n                    </div>\n                    <Card className=\"p-6\">\n                        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2 text-gray-900 dark:text-white\"><ZapIcon /> Palette Information</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                            <div><p className=\"font-medium text-gray-500 dark:text-gray-400\">Base Color</p><p className=\"font-mono text-gray-900 dark:text-white\">{baseColor}</p></div>\n                            <div><p className=\"font-medium text-gray-500 dark:text-gray-400\">Harmony Mode</p><p className=\"capitalize text-gray-900 dark:text-white\">{harmonyMode}</p></div>\n                            <div><p className=\"font-medium text-gray-500 dark:text-gray-400\">Accessibility</p><p className=\"text-gray-900 dark:text-white\">{palette.filter(s => s.contrast >= 4.5).length}/10 colors pass AA standards</p></div>\n                        </div>\n                    </Card>\n                </main>\n            </div>\n        </div>\n    );\n};\n\n// The final App component that wraps everything with the ToastProvider\nexport default function ColorPaletteGeneratorPage() {\n    return (\n        <ToastProvider>\n            <ColorPaletteGenerator />\n        </ToastProvider>\n    );\n}\n",
      "type": "registry:ui"
    }
  ]
}