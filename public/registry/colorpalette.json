{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "colorpalette",
  "title": "Colorpalette",
  "description": "A minimalistic colorpalette component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "colorpalette.tsx",
      "content": "\"use client\";\nimport React, {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\nimport tinycolor from \"tinycolor2\";\n\n// TypeScript interfaces\ninterface ColorShade {\n\thex: string;\n\trgb: string;\n\thsl: string;\n\tname: string;\n\tbrightness: number;\n\tcontrast: number;\n}\n\ninterface ToastData {\n\tid: number;\n\ttitle: string;\n\tdescription?: string;\n\tvariant: string;\n}\n\ninterface ToastContextType {\n\ttoast: (data: {\n\t\ttitle: string;\n\t\tdescription?: string;\n\t\tvariant?: string;\n\t}) => void;\n}\n\ninterface DialogContextType {\n\tisOpen: boolean;\n\tsetIsOpen: (open: boolean) => void;\n}\n\n// Component prop types\ninterface IconProps {\n\tchildren: React.ReactNode;\n\tclassName?: string;\n}\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n\tchildren: React.ReactNode;\n\tclassName?: string;\n}\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tchildren: React.ReactNode;\n\tclassName?: string;\n\tvariant?: \"primary\" | \"outline\" | \"destructive\";\n\tsize?: \"md\" | \"icon\";\n}\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n\tclassName?: string;\n}\n\ninterface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n\tchildren: React.ReactNode;\n\tclassName?: string;\n}\n\ninterface BadgeProps {\n\tchildren: React.ReactNode;\n\tvariant?: \"default\" | \"secondary\" | \"destructive\";\n\tclassName?: string;\n}\n\ninterface DialogProps {\n\tchildren: React.ReactNode;\n}\n\ninterface DialogContentProps {\n\tchildren: React.ReactNode;\n\ttitle: string;\n}\n\ninterface ToastProviderProps {\n\tchildren: React.ReactNode;\n}\n\n// --- Helper Components & Icons ---\n// These are simple functional components to replace shadcn/ui and lucide-react for a self-contained file.\n\nconst Icon: React.FC<IconProps> = ({ children, className = \"w-4 h-4\" }) => (\n\t<div className={className}>{children}</div>\n);\n\nconst ShuffleIcon = () => (\n\t<Icon>\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth=\"100%\"\n\t\t\theight=\"100%\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"2\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t>\n\t\t\t<path d=\"m18 14 4 4-4 4\"></path>\n\t\t\t<path d=\"m18 2 4 4-4 4\"></path>\n\t\t\t<path d=\"M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22\"></path>\n\t\t\t<path d=\"M2 6h1.972a4 4 0 0 1 3.6 2.2\"></path>\n\t\t\t<path d=\"M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45\"></path>\n\t\t</svg>\n\t</Icon>\n);\nconst DownloadIcon = () => (\n\t<Icon>\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth=\"100%\"\n\t\t\theight=\"100%\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"2\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t>\n\t\t\t<path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n\t\t\t<polyline points=\"7 10 12 15 17 10\" />\n\t\t\t<line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\" />\n\t\t</svg>\n\t</Icon>\n);\nconst CopyIcon = () => (\n\t<Icon>\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth=\"100%\"\n\t\t\theight=\"100%\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"2\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t>\n\t\t\t<rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" />\n\t\t\t<path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n\t\t</svg>\n\t</Icon>\n);\nconst EyeIcon = () => (\n\t<Icon className=\"w-3 h-3 mr-1\">\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth=\"100%\"\n\t\t\theight=\"100%\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"2\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t>\n\t\t\t<path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\" />\n\t\t\t<circle cx=\"12\" cy=\"12\" r=\"3\" />\n\t\t</svg>\n\t</Icon>\n);\nconst ZapIcon = () => (\n\t<Icon>\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth=\"100%\"\n\t\t\theight=\"100%\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"2\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t>\n\t\t\t<polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\" />\n\t\t</svg>\n\t</Icon>\n);\nconst FileDownIcon = () => (\n\t<Icon className=\"w-4 h-4 mr-2\">\n\t\t<svg\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\twidth=\"100%\"\n\t\t\theight=\"100%\"\n\t\t\tviewBox=\"0 0 24 24\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"currentColor\"\n\t\t\tstrokeWidth=\"2\"\n\t\t\tstrokeLinecap=\"round\"\n\t\t\tstrokeLinejoin=\"round\"\n\t\t>\n\t\t\t<path d=\"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\" />\n\t\t\t<path d=\"M9 18c-4.51 2-5-2-7-2\" />\n\t\t</svg>\n\t</Icon>\n);\n\nconst Card: React.FC<CardProps> = ({ children, className = \"\", ...props }) => (\n\t<div className={`bg-white dark:bg-black rounded-lg ${className}`} {...props}>\n\t\t{children}\n\t</div>\n);\n\nconst Button: React.FC<ButtonProps> = ({\n\tchildren,\n\tclassName = \"\",\n\tvariant = \"primary\",\n\tsize = \"md\",\n\t...props\n}) => {\n\tconst baseClasses =\n\t\t\"inline-flex items-center justify-center rounded-md font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-black\";\n\tconst variantClasses: Record<string, string> = {\n\t\tprimary:\n\t\t\t\"bg-purple-600 text-white hover:bg-purple-700 focus:ring-purple-500 dark:bg-purple-500 dark:hover:bg-purple-600\",\n\t\toutline:\n\t\t\t\"border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-purple-500 dark:border-gray-600 dark:bg-black dark:text-gray-300 dark:hover:bg-gray-900\",\n\t\tdestructive:\n\t\t\t\"bg-red-500 text-white hover:bg-red-600 focus:ring-red-500 dark:bg-red-600 dark:hover:bg-red-700\",\n\t};\n\tconst sizeClasses: Record<string, string> = {\n\t\tmd: \"h-12 px-4\",\n\t\ticon: \"h-12 w-12\",\n\t};\n\treturn (\n\t\t<button\n\t\t\tclassName={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n};\n\nconst Input: React.FC<InputProps> = ({ className = \"\", ...props }) => (\n\t<input\n\t\tclassName={`flex-1 h-12 px-3 rounded-md border border-gray-300 font-mono focus:ring-2 focus:ring-purple-500 focus:border-purple-500 bg-white dark:bg-black dark:border-gray-600 dark:text-white ${className}`}\n\t\t{...props}\n\t/>\n);\n\nconst Select: React.FC<SelectProps> = ({\n\tchildren,\n\tclassName = \"\",\n\t...props\n}) => (\n\t<select\n\t\tclassName={`w-full h-12 px-3 rounded-md border border-gray-300 bg-white focus:ring-2 focus:ring-purple-500 focus:border-purple-500 dark:bg-black dark:border-gray-600 dark:text-white ${className}`}\n\t\t{...props}\n\t>\n\t\t{children}\n\t</select>\n);\n\nconst Badge: React.FC<BadgeProps> = ({\n\tchildren,\n\tvariant = \"default\",\n\tclassName = \"\",\n}) => {\n\tconst variantClasses: Record<string, string> = {\n\t\tdefault:\n\t\t\t\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n\t\tsecondary:\n\t\t\t\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\",\n\t\tdestructive: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",\n\t};\n\treturn (\n\t\t<span\n\t\t\tclassName={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${variantClasses[variant]} ${className}`}\n\t\t>\n\t\t\t{children}\n\t\t</span>\n\t);\n};\n\n// --- Toast Context and Provider ---\nconst ToastContext = createContext<ToastContextType | null>(null);\n\nconst useToast = (): ToastContextType => {\n\tconst context = useContext(ToastContext);\n\tif (!context) throw new Error(\"useToast must be used within a ToastProvider\");\n\treturn context;\n};\n\nconst ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {\n\tconst [toasts, setToasts] = useState<ToastData[]>([]);\n\n\tconst toast = useCallback(\n\t\t({\n\t\t\ttitle,\n\t\t\tdescription,\n\t\t\tvariant = \"default\",\n\t\t}: {\n\t\t\ttitle: string;\n\t\t\tdescription?: string;\n\t\t\tvariant?: string;\n\t\t}) => {\n\t\t\tconst id = Date.now();\n\t\t\tsetToasts((prev) => [...prev, { id, title, description, variant }]);\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetToasts((currentToasts) => currentToasts.filter((t) => t.id !== id));\n\t\t\t}, 3000);\n\t\t},\n\t\t[],\n\t);\n\n\treturn (\n\t\t<ToastContext.Provider value={{ toast }}>\n\t\t\t{children}\n\t\t\t<div\n\t\t\t\tid=\"toast-container\"\n\t\t\t\tclassName=\"fixed bottom-6 right-6 z-50 flex flex-col gap-3\"\n\t\t\t>\n\t\t\t\t{toasts.map((t) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={t.id}\n\t\t\t\t\t\tclassName={`toast show p-4 rounded-lg shadow-lg text-white ${t.variant === \"destructive\" ? \"bg-red-500 dark:bg-red-600\" : \"bg-gray-800 dark:bg-gray-900\"}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"font-semibold\">{t.title}</div>\n\t\t\t\t\t\t{t.description && (\n\t\t\t\t\t\t\t<div className=\"text-sm text-gray-300 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t{t.description}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</ToastContext.Provider>\n\t);\n};\n\n// --- Dialog Component ---\nconst DialogContext = createContext<DialogContextType | null>(null);\n\nconst Dialog: React.FC<DialogProps> = ({ children }) => {\n\tconst [isOpen, setIsOpen] = useState(false);\n\treturn (\n\t\t<DialogContext.Provider value={{ isOpen, setIsOpen }}>\n\t\t\t{children}\n\t\t</DialogContext.Provider>\n\t);\n};\n\nconst DialogTrigger: React.FC<DialogProps> = ({ children }) => {\n\tconst context = useContext(DialogContext);\n\tif (!context) throw new Error(\"DialogTrigger must be used within a Dialog\");\n\tconst { setIsOpen } = context;\n\treturn React.cloneElement(\n\t\tchildren as React.ReactElement<React.HTMLAttributes<HTMLElement>>,\n\t\t{\n\t\t\tonClick: () => setIsOpen(true),\n\t\t},\n\t);\n};\n\nconst DialogContent: React.FC<DialogContentProps> = ({ children, title }) => {\n\tconst context = useContext(DialogContext);\n\tif (!context) throw new Error(\"DialogContent must be used within a Dialog\");\n\tconst { isOpen, setIsOpen } = context;\n\tif (!isOpen) return null;\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex items-center justify-center\"\n\t\t\tonClick={() => setIsOpen(false)}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"bg-white dark:bg-black rounded-lg shadow-xl p-6 w-full max-w-sm m-4 animate-scale-in\"\n\t\t\t\tonClick={(e: React.MouseEvent) => e.stopPropagation()}\n\t\t\t>\n\t\t\t\t<div className=\"flex justify-between items-center mb-4\">\n\t\t\t\t\t<h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n\t\t\t\t\t\t{title}\n\t\t\t\t\t</h3>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => setIsOpen(false)}\n\t\t\t\t\t\tclassName=\"text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300\"\n\t\t\t\t\t>\n\t\t\t\t\t\t&times;\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// --- Main Application Component ---\nconst ColorPaletteGenerator: React.FC = () => {\n\tconst [baseColor, setBaseColor] = useState<string>(\"#8B5CF6\");\n\tconst [palette, setPalette] = useState<ColorShade[]>([]);\n\tconst [colorFormat, setColorFormat] = useState<\"hex\" | \"rgb\" | \"hsl\">(\"hex\");\n\tconst [harmonyMode, setHarmonyMode] = useState<string>(\"shades\");\n\tconst { toast } = useToast();\n\n\tconst generatePalette = useCallback(\n\t\t(color: string, mode: string) => {\n\t\t\ttry {\n\t\t\t\tconst baseColorObj = tinycolor(color);\n\t\t\t\tif (!baseColorObj.isValid()) throw new Error(\"Invalid color\");\n\n\t\t\t\tlet colors: tinycolor.Instance[] = [];\n\t\t\t\tswitch (mode) {\n\t\t\t\t\tcase \"shades\":\n\t\t\t\t\t\tcolors = Array.from({ length: 10 }, (_, i) =>\n\t\t\t\t\t\t\tbaseColorObj\n\t\t\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t\t\t.lighten(i * 5)\n\t\t\t\t\t\t\t\t.desaturate(i * 2),\n\t\t\t\t\t\t).reverse();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"complementary\":\n\t\t\t\t\t\tcolors = [\n\t\t\t\t\t\t\t...tinycolor(baseColorObj).analogous(5),\n\t\t\t\t\t\t\t...tinycolor(baseColorObj.complement()).analogous(5),\n\t\t\t\t\t\t];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"triadic\": {\n\t\t\t\t\t\tconst triadic = baseColorObj.triad();\n\t\t\t\t\t\tcolors = triadic\n\t\t\t\t\t\t\t.flatMap((c: tinycolor.Instance) =>\n\t\t\t\t\t\t\t\ttinycolor(c).analogous(4).slice(0, 4),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.slice(0, 10);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase \"analogous\":\n\t\t\t\t\t\tcolors = baseColorObj.analogous(10);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcolors = Array.from({ length: 10 }, (_, i) =>\n\t\t\t\t\t\t\tbaseColorObj.clone().darken(i * 5),\n\t\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst newPalette: ColorShade[] = colors\n\t\t\t\t\t.slice(0, 10)\n\t\t\t\t\t.map((c: tinycolor.Instance, index: number) => {\n\t\t\t\t\t\tconst weights = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900];\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\thex: c.toHexString().toUpperCase(),\n\t\t\t\t\t\t\trgb: c.toRgbString(),\n\t\t\t\t\t\t\thsl: c.toHslString(),\n\t\t\t\t\t\t\tname: `${weights[index]}`,\n\t\t\t\t\t\t\tbrightness: c.getBrightness(),\n\t\t\t\t\t\t\tcontrast: tinycolor.readability(c, \"#ffffff\"),\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\tsetPalette(newPalette);\n\t\t\t} catch {\n\t\t\t\ttoast({\n\t\t\t\t\ttitle: \"Invalid Color\",\n\t\t\t\t\tdescription: \"Please enter a valid color format.\",\n\t\t\t\t\tvariant: \"destructive\",\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[toast],\n\t);\n\n\tuseEffect(() => {\n\t\tgeneratePalette(baseColor, harmonyMode);\n\t}, [baseColor, harmonyMode, generatePalette]);\n\n\tconst copyToClipboard = useCallback(\n\t\t(shade: ColorShade) => {\n\t\t\tconst textToCopy = shade[colorFormat];\n\t\t\tnavigator.clipboard\n\t\t\t\t.writeText(textToCopy)\n\t\t\t\t.then(() => {\n\t\t\t\t\ttoast({ title: \"Copied!\", description: `${textToCopy} copied.` });\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\ttoast({ title: \"Copy Failed\", variant: \"destructive\" });\n\t\t\t\t});\n\t\t},\n\t\t[colorFormat, toast],\n\t);\n\n\tconst randomizeColor = useCallback(() => {\n\t\tconst randomColor = tinycolor.random().toHexString();\n\t\tsetBaseColor(randomColor);\n\t}, []);\n\n\tconst exportPalette = useCallback(\n\t\t(format: string) => {\n\t\t\tlet exportData = \"\";\n\t\t\tswitch (format) {\n\t\t\t\tcase \"css\":\n\t\t\t\t\texportData =\n\t\t\t\t\t\t\":root {\\n\" +\n\t\t\t\t\t\tpalette.map((s) => `  --color-${s.name}: ${s.hex};`).join(\"\\n\") +\n\t\t\t\t\t\t\"\\n}\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"json\": {\n\t\t\t\t\tconst jsonObject = {\n\t\t\t\t\t\tbaseColor,\n\t\t\t\t\t\tharmonyMode,\n\t\t\t\t\t\tpalette: palette.reduce(\n\t\t\t\t\t\t\t(acc, s) => ({ ...acc, [s.name]: s }),\n\t\t\t\t\t\t\t{} as Record<string, ColorShade>,\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\texportData = JSON.stringify(jsonObject, null, 2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"tailwind\":\n\t\t\t\t\texportData = `module.exports = {\\n  theme: {\\n    extend: {\\n      colors: {\\n        primary: {\\n${palette.map((s) => `          '${s.name}': '${s.hex}',`).join(\"\\n\")}\\n        }\\n      }\\n    }\\n  }\\n}`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnavigator.clipboard.writeText(exportData).then(() => {\n\t\t\t\ttoast({\n\t\t\t\t\ttitle: \"Exported!\",\n\t\t\t\t\tdescription: `${format.toUpperCase()} code copied.`,\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[palette, baseColor, harmonyMode, toast],\n\t);\n\n\tconst getContrastColor = (hex: string): string =>\n\t\ttinycolor(hex).getBrightness() > 128 ? \"#1a1a1a\" : \"#ffffff\";\n\n\treturn (\n\t\t<div className=\"p-4 sm:p-6\">\n\t\t\t<div className=\"max-w-7xl mx-auto\">\n\t\t\t\t<Card className=\"p-4 sm:p-6 mb-8 shadow-elegant animate-scale-in\">\n\t\t\t\t\t<div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n\t\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t\t<label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n\t\t\t\t\t\t\t\tBase Color\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"color\"\n\t\t\t\t\t\t\t\t\tvalue={baseColor}\n\t\t\t\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t\t\t\t\t\tsetBaseColor(e.target.value)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tclassName=\"w-12 h-12 rounded-lg border-2 border-gray-200 dark:border-gray-600 cursor-pointer p-0\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={baseColor}\n\t\t\t\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n\t\t\t\t\t\t\t\t\t\tsetBaseColor(e.target.value)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Button variant=\"outline\" size=\"icon\" onClick={randomizeColor}>\n\t\t\t\t\t\t\t\t\t<ShuffleIcon />\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t\t<label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n\t\t\t\t\t\t\t\tColor Harmony\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tvalue={harmonyMode}\n\t\t\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n\t\t\t\t\t\t\t\t\tsetHarmonyMode(e.target.value)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value=\"shades\">Shades</option>\n\t\t\t\t\t\t\t\t<option value=\"complementary\">Complementary</option>\n\t\t\t\t\t\t\t\t<option value=\"triadic\">Triadic</option>\n\t\t\t\t\t\t\t\t<option value=\"analogous\">Analogous</option>\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t\t\t<label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n\t\t\t\t\t\t\t\tActions\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2\">\n\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\tvalue={colorFormat}\n\t\t\t\t\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n\t\t\t\t\t\t\t\t\t\tsetColorFormat(e.target.value as \"hex\" | \"rgb\" | \"hsl\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tclassName=\"w-24\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<option value=\"hex\">HEX</option>\n\t\t\t\t\t\t\t\t\t<option value=\"rgb\">RGB</option>\n\t\t\t\t\t\t\t\t\t<option value=\"hsl\">HSL</option>\n\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t<Dialog>\n\t\t\t\t\t\t\t\t\t<DialogTrigger>\n\t\t\t\t\t\t\t\t\t\t<Button variant=\"outline\" className=\"flex-1\" size=\"md\">\n\t\t\t\t\t\t\t\t\t\t\t<DownloadIcon /> <span className=\"ml-2\">Export</span>\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</DialogTrigger>\n\t\t\t\t\t\t\t\t\t<DialogContent title=\"Export Palette\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"space-y-3\">\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-full justify-start\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => exportPalette(\"css\")}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<FileDownIcon /> CSS Variables\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-full justify-start\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => exportPalette(\"json\")}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<FileDownIcon /> JSON Format\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-full justify-start\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => exportPalette(\"tailwind\")}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<FileDownIcon /> Tailwind Config\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Card>\n\n\t\t\t\t<main className=\"space-y-6 animate-fade-in\">\n\t\t\t\t\t<div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 lg:grid-cols-10 gap-2 sm:gap-4\">\n\t\t\t\t\t\t{palette.map((shade, index) => (\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tonClick={() => copyToClipboard(shade)}\n\t\t\t\t\t\t\t\tstyle={{ backgroundColor: shade.hex }}\n\t\t\t\t\t\t\t\tclassName=\"relative group cursor-pointer overflow-hidden transition-all duration-300 hover:scale-105 hover:shadow-glow\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className=\"aspect-square p-3 flex flex-col justify-between min-h-[120px]\">\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-xs font-bold opacity-80\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ color: getContrastColor(shade.hex) }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{shade.name}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"p-2 rounded-full bg-black/10 backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-opacity\">\n\t\t\t\t\t\t\t\t\t\t\t<CopyIcon />\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"space-y-1 text-center\">\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-xs font-mono font-semibold\"\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ color: getContrastColor(shade.hex) }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{shade[colorFormat]}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\t\t\t\tvariant={\n\t\t\t\t\t\t\t\t\t\t\t\tshade.contrast >= 7\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"default\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: shade.contrast >= 4.5\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"destructive\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<EyeIcon />\n\t\t\t\t\t\t\t\t\t\t\t{shade.contrast >= 7\n\t\t\t\t\t\t\t\t\t\t\t\t? \"AAA\"\n\t\t\t\t\t\t\t\t\t\t\t\t: shade.contrast >= 4.5\n\t\t\t\t\t\t\t\t\t\t\t\t\t? \"AA\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \"Fail\"}\n\t\t\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<Card className=\"p-6\">\n\t\t\t\t\t\t<h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2 text-gray-900 dark:text-white\">\n\t\t\t\t\t\t\t<ZapIcon /> Palette Information\n\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t<div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"font-medium text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\tBase Color\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"font-mono text-gray-900 dark:text-white\">\n\t\t\t\t\t\t\t\t\t{baseColor}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"font-medium text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\tHarmony Mode\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"capitalize text-gray-900 dark:text-white\">\n\t\t\t\t\t\t\t\t\t{harmonyMode}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<p className=\"font-medium text-gray-500 dark:text-gray-400\">\n\t\t\t\t\t\t\t\t\tAccessibility\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className=\"text-gray-900 dark:text-white\">\n\t\t\t\t\t\t\t\t\t{palette.filter((s) => s.contrast >= 4.5).length}/10 colors\n\t\t\t\t\t\t\t\t\tpass AA standards\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Card>\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n// The final App component that wraps everything with the ToastProvider\nexport default function ColorPaletteGeneratorPage() {\n\treturn (\n\t\t<ToastProvider>\n\t\t\t<ColorPaletteGenerator />\n\t\t</ToastProvider>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}