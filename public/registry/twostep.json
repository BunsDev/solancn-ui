{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "twostep",
  "title": "Twostep",
  "description": "A minimalistic two-step verification component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "twostep.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function TwoStep() {\n\tconst [code, setCode] = useState<string[]>(new Array(5).fill(\"\"));\n\tconst [focusedIndex, setFocusedIndex] = useState<number>(0);\n\tconst inputRefs = useRef<(HTMLInputElement | null)[]>([]);\n\n\t// This function handles changes in the input fields.\n\tconst handleChange = (element: HTMLInputElement, index: number) => {\n\t\t// Only allow numbers to be entered\n\t\tif (isNaN(Number(element.value)) || element.value === \" \") {\n\t\t\telement.value = \"\";\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the code array with the new value\n\t\tconst newCode = [...code];\n\t\tnewCode[index] = element.value;\n\t\tsetCode(newCode);\n\n\t\t// If there's a value and it's not the last input, focus the next one\n\t\tif (element.value && index < 4) {\n\t\t\tconst nextInput = inputRefs.current[index + 1];\n\t\t\tif (nextInput) {\n\t\t\t\tnextInput.focus();\n\t\t\t}\n\t\t}\n\t};\n\n\t// This function handles key presses, specifically for Backspace.\n\tconst handleKeyDown = (\n\t\te: React.KeyboardEvent<HTMLInputElement>,\n\t\tindex: number,\n\t) => {\n\t\t// If backspace is pressed and the input is empty, focus the previous input\n\t\tif (e.key === \"Backspace\" && !code[index] && index > 0) {\n\t\t\tconst prevInput = inputRefs.current[index - 1];\n\t\t\tif (prevInput) {\n\t\t\t\tprevInput.focus();\n\t\t\t}\n\t\t}\n\t};\n\n\t// This function handles pasting content into the input fields.\n\tconst handlePaste = (e: React.ClipboardEvent<HTMLDivElement>) => {\n\t\te.preventDefault();\n\t\tconst pasteData = e.clipboardData.getData(\"text\").slice(0, 5);\n\t\tif (!/^\\d+$/.test(pasteData)) return; // Only paste if it's all digits\n\n\t\tconst newCode = new Array(5).fill(\"\");\n\t\tfor (let i = 0; i < pasteData.length; i++) {\n\t\t\tnewCode[i] = pasteData[i];\n\t\t}\n\t\tsetCode(newCode);\n\n\t\t// Focus on the last input that was filled by the paste\n\t\tconst lastFullInput = Math.min(pasteData.length - 1, 4);\n\t\tif (lastFullInput >= 0) {\n\t\t\tconst targetInput = inputRefs.current[lastFullInput];\n\t\t\tif (targetInput) {\n\t\t\t\ttargetInput.focus();\n\t\t\t}\n\t\t}\n\t};\n\n\t// Set focus to the first input on initial render\n\tuseEffect(() => {\n\t\tconst firstInput = inputRefs.current[0];\n\t\tif (firstInput) {\n\t\t\tfirstInput.focus();\n\t\t}\n\t}, []);\n\n\treturn (\n\t\t<div className=\"flex items-center justify-center font-sans p-4\">\n\t\t\t{/* Main Card */}\n\t\t\t<div className=\"bg-white dark:bg-[#161B22] border border-gray-200 dark:border-gray-800 p-6 sm:p-8 rounded-2xl shadow-2xl shadow-black/10 dark:shadow-black/20 max-w-sm w-full text-center text-gray-900 dark:text-white relative overflow-hidden\">\n\t\t\t\t{/* Mac-style dots */}\n\t\t\t\t<div className=\"absolute top-4 left-4 flex space-x-2\">\n\t\t\t\t\t<div className=\"w-3 h-3 bg-[#FF5F56] rounded-full\"></div>\n\t\t\t\t\t<div className=\"w-3 h-3 bg-[#FFBD2E] rounded-full\"></div>\n\t\t\t\t\t<div className=\"w-3 h-3 bg-[#27C93F] rounded-full\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"relative z-10\">\n\t\t\t\t\t<div className=\"flex justify-center mb-4 mt-8 sm:mt-4\">\n\t\t\t\t\t\t<div className=\"w-40 h-40 flex items-center justify-center\">\n\t\t\t\t\t\t\t{/* New Logo Image with Glow */}\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc=\"https://i.postimg.cc/SKSNJ5SQ/White-Letter-S-Logo-Instagram-Post.png\"\n\t\t\t\t\t\t\t\talt=\"Logo\"\n\t\t\t\t\t\t\t\tclassName=\"w-32 h-32 object-cover rounded-lg drop-shadow-[0_0_15px_rgba(59,130,246,0.5)]\"\n\t\t\t\t\t\t\t\tonError={(e) => {\n\t\t\t\t\t\t\t\t\tconst target = e.target as HTMLImageElement;\n\t\t\t\t\t\t\t\t\ttarget.onerror = null;\n\t\t\t\t\t\t\t\t\ttarget.src =\n\t\t\t\t\t\t\t\t\t\t\"https://placehold.co/128x128/161B22/FFFFFF?text=S\";\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<h1 className=\"text-2xl font-bold mb-2 text-gray-900 dark:text-gray-200\">\n\t\t\t\t\t\tSign In With Two-Step Verification\n\t\t\t\t\t</h1>\n\t\t\t\t\t<p className=\"text-gray-600 dark:text-gray-400 mb-6 text-sm\">\n\t\t\t\t\t\tWe&apos;ve sent a 5 digit code to **********060\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<p className=\"text-gray-600 dark:text-gray-400 mb-4 text-sm text-left font-medium\">\n\t\t\t\t\t\tEnter the code you received\n\t\t\t\t\t</p>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"flex justify-center gap-2 sm:gap-3 mb-8\"\n\t\t\t\t\t\tonPaste={handlePaste}\n\t\t\t\t\t>\n\t\t\t\t\t\t{code.map((data, index) => (\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\t\tinputRefs.current[index] = el;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\t\tmaxLength={1}\n\t\t\t\t\t\t\t\tvalue={data}\n\t\t\t\t\t\t\t\tplaceholder=\"â€¢\"\n\t\t\t\t\t\t\t\tonChange={(e) => handleChange(e.target, index)}\n\t\t\t\t\t\t\t\tonKeyDown={(e) => handleKeyDown(e, index)}\n\t\t\t\t\t\t\t\tonFocus={(e) => {\n\t\t\t\t\t\t\t\t\te.target.select();\n\t\t\t\t\t\t\t\t\tsetFocusedIndex(index);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonBlur={() => setFocusedIndex(-1)}\n\t\t\t\t\t\t\t\tclassName={`w-12 h-14 sm:w-14 sm:h-16 text-center text-2xl font-semibold bg-gray-50 dark:bg-[#0D1117] text-gray-900 dark:text-white rounded-lg outline-none transition-all placeholder-gray-400 dark:placeholder-gray-600\n                  ${\n\t\t\t\t\t\t\t\t\t\tfocusedIndex === index\n\t\t\t\t\t\t\t\t\t\t\t? \"border-2 border-blue-500\"\n\t\t\t\t\t\t\t\t\t\t\t: \"border border-dashed border-gray-300 dark:border-gray-700 hover:border-gray-400 dark:hover:border-gray-600\"\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<p className=\"text-gray-500 dark:text-gray-500 text-sm\">\n\t\t\t\t\t\tDidn&apos;t receive a code?{\" \"}\n\t\t\t\t\t\t<button className=\"text-blue-600 dark:text-blue-500 hover:text-blue-500 dark:hover:text-blue-400 font-semibold focus:outline-none focus:underline\">\n\t\t\t\t\t\t\tResent code\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}