{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "title": "Drawer",
  "description": "A minimalistic drawer component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "drawer.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport {\n\tButton,\n\tDrawer,\n\tDrawerContent,\n\tDrawerDescription,\n\tDrawerFooter,\n\tDrawerHeader,\n\tDrawerOverlay,\n\tDrawerTitle,\n} from \"./drawer\";\n\ntype DrawerSide = \"top\" | \"bottom\" | \"left\" | \"right\";\n\nexport default function DrawerView() {\n\tconst [isOpen, setIsOpen] = useState(false);\n\tconst [side, setSide] = useState<DrawerSide>(\"right\");\n\n\tconst handleOpen = (selectedSide: DrawerSide) => {\n\t\tsetSide(selectedSide);\n\t\tsetIsOpen(true);\n\t};\n\n\treturn (\n\t\t<div className=\"flex w-full flex-col items-center justify-center p-4 font-sans\">\n\t\t\t<div className=\"text-center mb-8\">\n\t\t\t\t<h1 className=\"text-4xl font-bold text-gray-900 dark:text-gray-50\">\n\t\t\t\t\tMinimal Drawer\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"text-gray-600 dark:text-gray-300 mt-2\">\n\t\t\t\t\tA minimal, reusable drawer component.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n\t\t\t\t<Button onClick={() => handleOpen(\"top\")}>Top</Button>\n\t\t\t\t<Button onClick={() => handleOpen(\"right\")}>Right</Button>\n\t\t\t\t<Button onClick={() => handleOpen(\"bottom\")}>Bottom</Button>\n\t\t\t\t<Button onClick={() => handleOpen(\"left\")}>Left</Button>\n\t\t\t</div>\n\n\t\t\t<Drawer open={isOpen} onOpenChange={setIsOpen} side={side}>\n\t\t\t\t<DrawerOverlay />\n\t\t\t\t<DrawerContent>\n\t\t\t\t\t<DrawerHeader>\n\t\t\t\t\t\t<DrawerTitle>Edit profile</DrawerTitle>\n\t\t\t\t\t\t<DrawerDescription>\n\t\t\t\t\t\t\tMake changes to your profile here. Click save when you&apos;re\n\t\t\t\t\t\t\tdone.\n\t\t\t\t\t\t</DrawerDescription>\n\t\t\t\t\t</DrawerHeader>\n\t\t\t\t\t<div className=\"p-6\">\n\t\t\t\t\t\t<form className=\"grid gap-4\">\n\t\t\t\t\t\t\t<div className=\"grid gap-2\">\n\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\thtmlFor=\"name\"\n\t\t\t\t\t\t\t\t\tclassName=\"text-sm font-medium text-gray-700 dark:text-gray-300\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tName\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"name\"\n\t\t\t\t\t\t\t\t\tdefaultValue=\"John Doe\"\n\t\t\t\t\t\t\t\t\tclassName=\"flex h-10 w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 transition-colors\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"grid gap-2\">\n\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\thtmlFor=\"username\"\n\t\t\t\t\t\t\t\t\tclassName=\"text-sm font-medium text-gray-700 dark:text-gray-300\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tUsername\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"username\"\n\t\t\t\t\t\t\t\t\tdefaultValue=\"@johndoe\"\n\t\t\t\t\t\t\t\t\tclassName=\"flex h-10 w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 transition-colors\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t<DrawerFooter>\n\t\t\t\t\t\t<Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button onClick={() => setIsOpen(false)}>Save changes</Button>\n\t\t\t\t\t</DrawerFooter>\n\t\t\t\t</DrawerContent>\n\t\t\t</Drawer>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "drawer.tsx",
      "content": "\"use client\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport React, {\n\tcreateContext,\n\ttype HTMLAttributes,\n\ttype ReactNode,\n\tuseContext,\n\tuseEffect,\n} from \"react\";\n\ntype DrawerSide = \"top\" | \"bottom\" | \"left\" | \"right\";\n\ninterface DrawerContextProps {\n\topen: boolean;\n\tonOpenChange: (open: boolean) => void;\n\tside: DrawerSide;\n}\n\ninterface DrawerProps {\n\tchildren: ReactNode;\n\topen: boolean;\n\tonOpenChange: (open: boolean) => void;\n\tside?: DrawerSide;\n}\n\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\n\nconst useDrawerContext = () => {\n\tconst context = useContext(DrawerContext);\n\tif (!context) {\n\t\tthrow new Error(\"useDrawerContext must be used within a DrawerProvider\");\n\t}\n\treturn context;\n};\n\nconst Drawer: React.FC<DrawerProps> = ({\n\tchildren,\n\topen,\n\tonOpenChange,\n\tside = \"right\",\n}) => {\n\tuseEffect(() => {\n\t\tconst handleKeyDown = (event: KeyboardEvent) => {\n\t\t\tif (event.key === \"Escape\") {\n\t\t\t\tonOpenChange(false);\n\t\t\t}\n\t\t};\n\n\t\tdocument.addEventListener(\"keydown\", handleKeyDown);\n\t\treturn () => document.removeEventListener(\"keydown\", handleKeyDown);\n\t}, [onOpenChange]);\n\n\treturn (\n\t\t<DrawerContext.Provider value={{ open, onOpenChange, side }}>\n\t\t\t<AnimatePresence>{open && <>{children}</>}</AnimatePresence>\n\t\t</DrawerContext.Provider>\n\t);\n};\n\nconst DrawerOverlay = React.forwardRef<\n\tHTMLDivElement,\n\tOmit<\n\t\tHTMLAttributes<HTMLDivElement>,\n\t\t| \"onDrag\"\n\t\t| \"onDragStart\"\n\t\t| \"onDragEnd\"\n\t\t| \"onAnimationStart\"\n\t\t| \"onAnimationEnd\"\n\t\t| \"onAnimationIteration\"\n\t>\n>(({ className, ...props }, ref) => {\n\tconst { onOpenChange } = useDrawerContext();\n\treturn (\n\t\t<motion.div\n\t\t\tref={ref}\n\t\t\tinitial={{ opacity: 0 }}\n\t\t\tanimate={{ opacity: 1 }}\n\t\t\texit={{ opacity: 0 }}\n\t\t\ttransition={{ duration: 0.3, ease: \"easeInOut\" }}\n\t\t\tclassName={`fixed inset-0 z-50 bg-black/50 dark:bg-black/70 ${className}`}\n\t\t\tonClick={() => onOpenChange(false)}\n\t\t\t{...props}\n\t\t/>\n\t);\n});\nDrawerOverlay.displayName = \"DrawerOverlay\";\n\nconst DrawerContent = React.forwardRef<\n\tHTMLDivElement,\n\tOmit<\n\t\tHTMLAttributes<HTMLDivElement>,\n\t\t| \"onDrag\"\n\t\t| \"onDragStart\"\n\t\t| \"onDragEnd\"\n\t\t| \"onAnimationStart\"\n\t\t| \"onAnimationEnd\"\n\t\t| \"onAnimationIteration\"\n\t>\n>(({ className, children, ...props }, ref) => {\n\tconst { onOpenChange, side } = useDrawerContext();\n\n\tconst sideClasses: Record<DrawerSide, string> = {\n\t\ttop: \"inset-x-0 top-0 w-full h-auto max-h-[80vh] border-b border-gray-200 dark:border-gray-800 items-center\",\n\t\tbottom:\n\t\t\t\"inset-x-0 bottom-0 w-full h-auto max-h-[80vh] border-t border-gray-200 dark:border-gray-800 items-center\",\n\t\tleft: \"inset-y-0 left-0 h-full w-80 max-w-[90vw] border-r border-gray-200 dark:border-gray-800 justify-center\",\n\t\tright:\n\t\t\t\"inset-y-0 right-0 h-full w-80 max-w-[90vw] border-l border-gray-200 dark:border-gray-800 justify-center\",\n\t};\n\n\tconst getMotionProps = () => {\n\t\tswitch (side) {\n\t\t\tcase \"top\":\n\t\t\t\treturn {\n\t\t\t\t\tinitial: { y: \"-100%\" },\n\t\t\t\t\tanimate: { y: 0 },\n\t\t\t\t\texit: { y: \"-100%\" },\n\t\t\t\t};\n\t\t\tcase \"bottom\":\n\t\t\t\treturn {\n\t\t\t\t\tinitial: { y: \"100%\" },\n\t\t\t\t\tanimate: { y: 0 },\n\t\t\t\t\texit: { y: \"100%\" },\n\t\t\t\t};\n\t\t\tcase \"left\":\n\t\t\t\treturn {\n\t\t\t\t\tinitial: { x: \"-100%\" },\n\t\t\t\t\tanimate: { x: 0 },\n\t\t\t\t\texit: { x: \"-100%\" },\n\t\t\t\t};\n\t\t\tcase \"right\":\n\t\t\t\treturn {\n\t\t\t\t\tinitial: { x: \"100%\" },\n\t\t\t\t\tanimate: { x: 0 },\n\t\t\t\t\texit: { x: \"100%\" },\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn {\n\t\t\t\t\tinitial: { x: \"100%\" },\n\t\t\t\t\tanimate: { x: 0 },\n\t\t\t\t\texit: { x: \"100%\" },\n\t\t\t\t};\n\t\t}\n\t};\n\n\treturn (\n\t\t<motion.div\n\t\t\tref={ref}\n\t\t\tclassName={`fixed z-50 bg-white dark:bg-black text-gray-900 dark:text-gray-50 shadow-lg flex flex-col ${sideClasses[side]} ${className}`}\n\t\t\t{...getMotionProps()}\n\t\t\ttransition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t\t<button\n\t\t\t\tonClick={() => onOpenChange(false)}\n\t\t\t\tclassName=\"absolute top-3 right-3 rounded-full p-1 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:focus:ring-gray-500\"\n\t\t\t\taria-label=\"Close\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\tclassName=\"h-5 w-5\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\td=\"M6 18L18 6M6 6l12 12\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t</motion.div>\n\t);\n});\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({\n\tclassName,\n\t...props\n}: HTMLAttributes<HTMLDivElement>) => (\n\t<div\n\t\tclassName={`grid gap-1.5 p-6 text-center sm:text-left ${className}`}\n\t\t{...props}\n\t/>\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({\n\tclassName,\n\t...props\n}: HTMLAttributes<HTMLDivElement>) => (\n\t<div\n\t\tclassName={`mt-auto flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 p-6 ${className}`}\n\t\t{...props}\n\t/>\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = React.forwardRef<\n\tHTMLHeadingElement,\n\tHTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n\t<h2\n\t\tref={ref}\n\t\tclassName={`text-lg font-semibold leading-none tracking-tight ${className}`}\n\t\t{...props}\n\t/>\n));\nDrawerTitle.displayName = \"DrawerTitle\";\n\nconst DrawerDescription = React.forwardRef<\n\tHTMLParagraphElement,\n\tHTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n\t<p\n\t\tref={ref}\n\t\tclassName={`text-sm text-gray-500 dark:text-gray-400 ${className}`}\n\t\t{...props}\n\t/>\n));\nDrawerDescription.displayName = \"DrawerDescription\";\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tvariant?: \"default\" | \"outline\";\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, variant = \"default\", ...props }, ref) => (\n\t\t<button\n\t\t\tref={ref}\n\t\t\tclassName={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2\n        ${\n\t\t\t\t\tvariant === \"outline\"\n\t\t\t\t\t\t? \"border border-gray-200 dark:border-gray-700 bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800\"\n\t\t\t\t\t\t: \"bg-gray-900 text-gray-50 hover:bg-gray-900/90 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90\"\n\t\t\t\t} \n        ${className}`}\n\t\t\t{...props}\n\t\t/>\n\t),\n);\nButton.displayName = \"Button\";\n\nexport {\n\tDrawer,\n\tDrawerOverlay,\n\tDrawerContent,\n\tDrawerHeader,\n\tDrawerFooter,\n\tDrawerTitle,\n\tDrawerDescription,\n\tButton,\n};\n",
      "type": "registry:ui"
    }
  ]
}