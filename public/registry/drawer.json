{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "title": "Drawer",
  "description": "A minimalistic drawer component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "drawer.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter,\n  Button,\n} from \"./drawer\";\n\ntype DrawerSide = \"top\" | \"bottom\" | \"left\" | \"right\";\n\nexport default function DrawerView() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [side, setSide] = useState<DrawerSide>(\"right\");\n\n  const handleOpen = (selectedSide: DrawerSide) => {\n    setSide(selectedSide);\n    setIsOpen(true);\n  };\n\n  return (\n    <div className=\"flex w-full flex-col items-center justify-center p-4 font-sans\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold text-gray-900 dark:text-gray-50\">\n          Minimal Drawer\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-300 mt-2\">\n          A minimal, reusable drawer component.\n        </p>\n      </div>\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Button onClick={() => handleOpen(\"top\")}>Top</Button>\n        <Button onClick={() => handleOpen(\"right\")}>Right</Button>\n        <Button onClick={() => handleOpen(\"bottom\")}>Bottom</Button>\n        <Button onClick={() => handleOpen(\"left\")}>Left</Button>\n      </div>\n\n      <Drawer open={isOpen} onOpenChange={setIsOpen} side={side}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader>\n            <DrawerTitle>Edit profile</DrawerTitle>\n            <DrawerDescription>\n              Make changes to your profile here. Click save when you&apos;re\n              done.\n            </DrawerDescription>\n          </DrawerHeader>\n          <div className=\"p-6\">\n            <form className=\"grid gap-4\">\n              <div className=\"grid gap-2\">\n                <label\n                  htmlFor=\"name\"\n                  className=\"text-sm font-medium text-gray-700 dark:text-gray-300\"\n                >\n                  Name\n                </label>\n                <input\n                  id=\"name\"\n                  defaultValue=\"John Doe\"\n                  className=\"flex h-10 w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 transition-colors\"\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <label\n                  htmlFor=\"username\"\n                  className=\"text-sm font-medium text-gray-700 dark:text-gray-300\"\n                >\n                  Username\n                </label>\n                <input\n                  id=\"username\"\n                  defaultValue=\"@johndoe\"\n                  className=\"flex h-10 w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-sm text-gray-900 dark:text-gray-100 placeholder:text-gray-500 dark:placeholder:text-gray-400 focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-400/20 transition-colors\"\n                />\n              </div>\n            </form>\n          </div>\n          <DrawerFooter>\n            <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={() => setIsOpen(false)}>Save changes</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "drawer.tsx",
      "content": "\"use client\";\nimport {\n  useEffect,\n  createContext,\n  useContext,\n  HTMLAttributes,\n  ReactNode,\n  forwardRef,\n  ButtonHTMLAttributes,\n} from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ntype DrawerSide = \"top\" | \"bottom\" | \"left\" | \"right\";\n\ninterface DrawerContextProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  side: DrawerSide;\n}\n\ninterface DrawerProps {\n  children: ReactNode;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  side?: DrawerSide;\n}\n\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\n\nconst useDrawerContext = () => {\n  const context = useContext(DrawerContext);\n  if (!context) {\n    throw new Error(\"useDrawerContext must be used within a DrawerProvider\");\n  }\n  return context;\n};\n\nconst Drawer: React.FC<DrawerProps> = ({\n  children,\n  open,\n  onOpenChange,\n  side = \"right\",\n}) => {\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        onOpenChange(false);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [onOpenChange]);\n\n  return (\n    <DrawerContext.Provider value={{ open, onOpenChange, side }}>\n      <AnimatePresence>{open && <>{children}</>}</AnimatePresence>\n    </DrawerContext.Provider>\n  );\n};\n\nconst DrawerOverlay = forwardRef<\n  HTMLDivElement,\n  Omit<\n    HTMLAttributes<HTMLDivElement>,\n    | \"onDrag\"\n    | \"onDragStart\"\n    | \"onDragEnd\"\n    | \"onAnimationStart\"\n    | \"onAnimationEnd\"\n    | \"onAnimationIteration\"\n  >\n>(({ className, ...props }, ref) => {\n  const { onOpenChange } = useDrawerContext();\n  return (\n    <motion.div\n      ref={ref}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.3, ease: \"easeInOut\" }}\n      className={`fixed inset-0 z-50 bg-black/50 dark:bg-black/70 ${className}`}\n      onClick={() => onOpenChange(false)}\n      {...props}\n    />\n  );\n});\nDrawerOverlay.displayName = \"DrawerOverlay\";\n\nconst DrawerContent = forwardRef<\n  HTMLDivElement,\n  Omit<\n    HTMLAttributes<HTMLDivElement>,\n    | \"onDrag\"\n    | \"onDragStart\"\n    | \"onDragEnd\"\n    | \"onAnimationStart\"\n    | \"onAnimationEnd\"\n    | \"onAnimationIteration\"\n  >\n>(({ className, children, ...props }, ref) => {\n  const { onOpenChange, side } = useDrawerContext();\n\n  const sideClasses: Record<DrawerSide, string> = {\n    top: \"inset-x-0 top-0 w-full h-auto max-h-[80vh] border-b border-gray-200 dark:border-gray-800 items-center\",\n    bottom:\n      \"inset-x-0 bottom-0 w-full h-auto max-h-[80vh] border-t border-gray-200 dark:border-gray-800 items-center\",\n    left: \"inset-y-0 left-0 h-full w-80 max-w-[90vw] border-r border-gray-200 dark:border-gray-800 justify-center\",\n    right:\n      \"inset-y-0 right-0 h-full w-80 max-w-[90vw] border-l border-gray-200 dark:border-gray-800 justify-center\",\n  };\n\n  const getMotionProps = () => {\n    switch (side) {\n      case \"top\":\n        return {\n          initial: { y: \"-100%\" },\n          animate: { y: 0 },\n          exit: { y: \"-100%\" },\n        };\n      case \"bottom\":\n        return {\n          initial: { y: \"100%\" },\n          animate: { y: 0 },\n          exit: { y: \"100%\" },\n        };\n      case \"left\":\n        return {\n          initial: { x: \"-100%\" },\n          animate: { x: 0 },\n          exit: { x: \"-100%\" },\n        };\n      case \"right\":\n        return {\n          initial: { x: \"100%\" },\n          animate: { x: 0 },\n          exit: { x: \"100%\" },\n        };\n      default:\n        return {\n          initial: { x: \"100%\" },\n          animate: { x: 0 },\n          exit: { x: \"100%\" },\n        };\n    }\n  };\n\n  return (\n    <motion.div\n      ref={ref}\n      className={`fixed z-50 bg-white dark:bg-black text-gray-900 dark:text-gray-50 shadow-lg flex flex-col ${sideClasses[side]} ${className}`}\n      {...getMotionProps()}\n      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n      {...props}\n    >\n      {children}\n      <button\n        onClick={() => onOpenChange(false)}\n        className=\"absolute top-3 right-3 rounded-full p-1 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-400 dark:focus:ring-gray-500\"\n        aria-label=\"Close\"\n      >\n        <svg\n          className=\"h-5 w-5\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            d=\"M6 18L18 6M6 6l12 12\"\n          />\n        </svg>\n      </button>\n    </motion.div>\n  );\n});\nDrawerContent.displayName = \"DrawerContent\";\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={`grid gap-1.5 p-6 text-center sm:text-left ${className}`}\n    {...props}\n  />\n);\nDrawerHeader.displayName = \"DrawerHeader\";\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={`mt-auto flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 p-6 ${className}`}\n    {...props}\n  />\n);\nDrawerFooter.displayName = \"DrawerFooter\";\n\nconst DrawerTitle = forwardRef<\n  HTMLHeadingElement,\n  HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h2\n    ref={ref}\n    className={`text-lg font-semibold leading-none tracking-tight ${className}`}\n    {...props}\n  />\n));\nDrawerTitle.displayName = \"DrawerTitle\";\n\nconst DrawerDescription = forwardRef<\n  HTMLParagraphElement,\n  HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={`text-sm text-gray-500 dark:text-gray-400 ${className}`}\n    {...props}\n  />\n));\nDrawerDescription.displayName = \"DrawerDescription\";\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"default\" | \"outline\";\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = \"default\", ...props }, ref) => (\n    <button\n      ref={ref}\n      className={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2\n        ${\n          variant === \"outline\"\n            ? \"border border-gray-200 dark:border-gray-700 bg-transparent hover:bg-gray-100 dark:hover:bg-gray-800\"\n            : \"bg-gray-900 text-gray-50 hover:bg-gray-900/90 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90\"\n        } \n        ${className}`}\n      {...props}\n    />\n  )\n);\nButton.displayName = \"Button\";\n\nexport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n  Button,\n};\n",
      "type": "registry:ui"
    }
  ]
}