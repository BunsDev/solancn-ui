{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pattern",
  "title": "Pattern",
  "description": "A collection of beautiful background patterns designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "pattern.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { Copy, Eye, Check, Search, X, Heart } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { gridPatterns } from \"./patterns\";\nimport { CSSProperties } from \"react\";\n\n// Pattern data structure matching your patterns.ts file\ninterface Pattern {\n  id: string;\n  name: string;\n  category: \"gradients\" | \"geometric\" | \"decorative\" | \"effects\";\n  description?: string;\n  badge?: \"New\" | \"\";\n  style: CSSProperties;\n  code: string;\n}\n\n// Component to render pattern preview\nfunction PatternPreview({ pattern }: { pattern: Pattern }) {\n  return (\n    <div className=\"w-full h-full\" style={pattern.style}>\n      <div className=\"w-full h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white opacity-80\">\n            {pattern.name}\n          </h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst categories = [\n  { id: \"all\", label: \"All Patterns\" },\n  { id: \"gradients\", label: \"Gradients\" },\n  { id: \"geometric\", label: \"Geometric\" },\n  { id: \"decorative\", label: \"Decorative\" },\n  { id: \"effects\", label: \"Effects\" },\n  { id: \"favorites\", label: \"Favorites\" },\n];\n\ninterface PatternCardProps {\n  pattern: Pattern;\n  onPreview: (pattern: Pattern) => void;\n  onCopy: (pattern: Pattern) => void;\n  copiedId: string | null;\n  isFavorite: boolean;\n  onToggleFavorite: (patternId: string) => void;\n}\n\nfunction PatternCard({\n  pattern,\n  onPreview,\n  onCopy,\n  copiedId,\n  isFavorite,\n  onToggleFavorite,\n}: PatternCardProps) {\n  return (\n    <div className=\"group relative bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden hover:shadow-lg hover:shadow-zinc-200/50 dark:hover:shadow-zinc-900/50 transition-all duration-300 hover:border-zinc-300 dark:hover:border-zinc-700 hover:-translate-y-1\">\n      {/* Pattern Preview */}\n      <div\n        className=\"relative h-48 overflow-hidden cursor-pointer\"\n        onClick={() => onPreview(pattern)}\n      >\n        <div className=\"absolute inset-0 scale-110 transition-transform duration-300 group-hover:scale-105\">\n          <PatternPreview pattern={pattern} />\n        </div>\n\n        {/* Overlay with buttons - visible on hover/tap */}\n        <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-3 md:gap-2\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onPreview(pattern);\n            }}\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n          >\n            <Eye size={14} className=\"md:w-4 md:h-4\" />\n            <span className=\"hidden sm:inline\">Preview</span>\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onCopy(pattern);\n            }}\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n          >\n            {copiedId === pattern.id ? (\n              <Check size={14} className=\"md:w-4 md:h-4\" />\n            ) : (\n              <Copy size={14} className=\"md:w-4 md:h-4\" />\n            )}\n            <span className=\"hidden sm:inline\">\n              {copiedId === pattern.id ? \"Copied\" : \"Copy\"}\n            </span>\n          </button>\n        </div>\n\n        {/* New badge and Favorite button */}\n        <div className=\"absolute top-3 right-3 flex items-center gap-2\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onToggleFavorite(pattern.id);\n            }}\n            className={cn(\n              \"p-1.5 rounded-full backdrop-blur-sm transition-colors shadow-lg\",\n              isFavorite\n                ? \"bg-red-500/90 text-white hover:bg-red-600/90\"\n                : \"bg-white/90 dark:bg-zinc-900/90 text-zinc-600 dark:text-zinc-400 hover:text-red-500 dark:hover:text-red-400\"\n            )}\n          >\n            <Heart size={14} className={isFavorite ? \"fill-current\" : \"\"} />\n          </button>\n          {pattern.badge === \"New\" && (\n            <div className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full shadow-lg\">\n              New\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Pattern Info */}\n      <div className=\"p-4\">\n        <h3 className=\"font-medium text-zinc-900 dark:text-zinc-100 text-sm truncate\">\n          {pattern.name}\n        </h3>\n        <p className=\"text-xs text-zinc-500 dark:text-zinc-400 mt-1 capitalize\">\n          {pattern.category}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default function PatternCraftInterface() {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [previewPattern, setPreviewPattern] = useState<Pattern | null>(null);\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\n  const previewRef = useRef<HTMLDivElement>(null);\n\n  const filteredPatterns = gridPatterns.filter((pattern) => {\n    const matchesCategory =\n      selectedCategory === \"all\" ||\n      pattern.category === selectedCategory ||\n      (selectedCategory === \"favorites\" && favorites.has(pattern.id));\n    const matchesSearch = pattern.name\n      .toLowerCase()\n      .includes(searchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleToggleFavorite = (patternId: string) => {\n    setFavorites((prev) => {\n      const newFavorites = new Set(prev);\n      if (newFavorites.has(patternId)) {\n        newFavorites.delete(patternId);\n      } else {\n        newFavorites.add(patternId);\n      }\n      return newFavorites;\n    });\n  };\n\n  const handlePreview = (pattern: Pattern) => {\n    setPreviewPattern(pattern);\n    // Scroll to preview section\n    setTimeout(() => {\n      previewRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, 100);\n  };\n\n  const handleCopy = async (pattern: Pattern) => {\n    try {\n      // Use the actual code from the pattern\n      await navigator.clipboard.writeText(pattern.code);\n      setCopiedId(pattern.id);\n      setTimeout(() => setCopiedId(null), 2000);\n    } catch (error) {\n      console.error(\"Failed to copy:\", error);\n      // Fallback copy\n      const fallbackContent = `// ${pattern.name} Pattern\n${pattern.code}`;\n      await navigator.clipboard.writeText(fallbackContent);\n      setCopiedId(pattern.id);\n      setTimeout(() => setCopiedId(null), 2000);\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-zinc-900 dark:text-zinc-100 mb-2\">\n          Pattern Library\n        </h2>\n        <p className=\"text-zinc-600 dark:text-zinc-400\">\n          Tap on mobile or hover on desktop to see options {\" \"}\n          <span>Inspired by PatternCraft</span>\n        </p>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"max-w-md mx-auto mb-6\">\n        <div className=\"relative\">\n          <Search\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400\"\n            size={20}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Search patterns...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-10 pr-10 py-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg text-zinc-900 dark:text-zinc-100 placeholder-zinc-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n          {searchQuery && (\n            <button\n              onClick={() => setSearchQuery(\"\")}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-zinc-400 hover:text-zinc-600 dark:hover:text-zinc-300\"\n            >\n              <X size={20} />\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Category Filter */}\n      <div className=\"flex flex-wrap justify-center gap-2 mb-8\">\n        {categories.map((category) => (\n          <button\n            key={category.id}\n            onClick={() => setSelectedCategory(category.id)}\n            className={cn(\n              \"px-4 py-2 rounded-lg text-sm font-medium transition-colors\",\n              selectedCategory === category.id\n                ? \"bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900\"\n                : \"bg-zinc-100 dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 hover:bg-zinc-200 dark:hover:bg-zinc-700\"\n            )}\n          >\n            {category.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Results Counter */}\n      <div className=\"text-center mb-6\">\n        <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\n          {filteredPatterns.length} pattern\n          {filteredPatterns.length !== 1 ? \"s\" : \"\"} found\n        </p>\n      </div>\n\n      {/* Pattern Grid */}\n      {filteredPatterns.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n          {filteredPatterns.map((pattern) => (\n            <PatternCard\n              key={pattern.id}\n              pattern={pattern}\n              onPreview={handlePreview}\n              onCopy={handleCopy}\n              copiedId={copiedId}\n              isFavorite={favorites.has(pattern.id)}\n              onToggleFavorite={handleToggleFavorite}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12 mb-12\">\n          <div className=\"text-zinc-400 dark:text-zinc-600 mb-4\">\n            {selectedCategory === \"favorites\" ? (\n              <Heart size={48} className=\"mx-auto\" />\n            ) : (\n              <Search size={48} className=\"mx-auto\" />\n            )}\n          </div>\n          <h3 className=\"text-lg font-medium text-zinc-900 dark:text-zinc-100 mb-2\">\n            {selectedCategory === \"favorites\"\n              ? \"No favorites yet\"\n              : \"No patterns found\"}\n          </h3>\n          <p className=\"text-zinc-600 dark:text-zinc-400\">\n            {selectedCategory === \"favorites\"\n              ? \"Click the heart icon on patterns to add them to your favorites\"\n              : \"Try adjusting your search or category filter\"}\n          </p>\n        </div>\n      )}\n\n      {/* Preview Section */}\n      {previewPattern && (\n        <div\n          ref={previewRef}\n          className=\"border-t border-zinc-200 dark:border-zinc-800 pt-12\"\n        >\n          <div className=\"text-center mb-6\">\n            <div className=\"flex items-center justify-center gap-3 mb-2\">\n              <h3 className=\"text-xl font-bold text-zinc-900 dark:text-zinc-100\">\n                {previewPattern.name}\n              </h3>\n              {previewPattern.badge === \"New\" && (\n                <span className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full\">\n                  New\n                </span>\n              )}\n            </div>\n            <p className=\"text-zinc-600 dark:text-zinc-400 mb-1\">\n              Full preview of the selected pattern\n            </p>\n            <p className=\"text-xs text-zinc-500 dark:text-zinc-400 capitalize\">\n              Category: {previewPattern.category}\n            </p>\n          </div>\n\n          <div className=\"relative bg-zinc-50 dark:bg-zinc-950 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden\">\n            <div className=\"h-[500px] md:h-[600px] lg:h-[700px]\">\n              <PatternPreview pattern={previewPattern} />\n            </div>\n\n            {/* Preview Controls */}\n            <div className=\"absolute top-4 right-4 flex gap-2\">\n              <button\n                onClick={() => setPreviewPattern(null)}\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n              >\n                <X size={16} />\n                <span className=\"hidden sm:inline\">Close</span>\n              </button>\n              <button\n                onClick={() => handleCopy(previewPattern)}\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n              >\n                {copiedId === previewPattern.id ? (\n                  <Check size={16} />\n                ) : (\n                  <Copy size={16} />\n                )}\n                {copiedId === previewPattern.id ? \"Copied\" : \"Copy Code\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "pattern-craft-interface.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef } from \"react\";\nimport { Copy, Eye, Check, Search, X, Heart } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { gridPatterns } from \"./patterns\";\nimport { CSSProperties } from \"react\";\n\n// Pattern data structure matching your patterns.ts file\ninterface Pattern {\n  id: string;\n  name: string;\n  category: \"gradients\" | \"geometric\" | \"decorative\" | \"effects\";\n  description?: string;\n  badge?: \"New\" | \"\";\n  style: CSSProperties;\n  code: string;\n}\n\n// Component to render pattern preview\nfunction PatternPreview({ pattern }: { pattern: Pattern }) {\n  return (\n    <div className=\"w-full h-full\" style={pattern.style}>\n      <div className=\"w-full h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-semibold text-gray-800 dark:text-white opacity-80\">\n            {pattern.name}\n          </h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst categories = [\n  { id: \"all\", label: \"All Patterns\" },\n  { id: \"gradients\", label: \"Gradients\" },\n  { id: \"geometric\", label: \"Geometric\" },\n  { id: \"decorative\", label: \"Decorative\" },\n  { id: \"effects\", label: \"Effects\" },\n  { id: \"favorites\", label: \"Favorites\" },\n];\n\ninterface PatternCardProps {\n  pattern: Pattern;\n  onPreview: (pattern: Pattern) => void;\n  onCopy: (pattern: Pattern) => void;\n  copiedId: string | null;\n  isFavorite: boolean;\n  onToggleFavorite: (patternId: string) => void;\n}\n\nfunction PatternCard({\n  pattern,\n  onPreview,\n  onCopy,\n  copiedId,\n  isFavorite,\n  onToggleFavorite,\n}: PatternCardProps) {\n  return (\n    <div className=\"group relative bg-white dark:bg-zinc-900 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden hover:shadow-lg hover:shadow-zinc-200/50 dark:hover:shadow-zinc-900/50 transition-all duration-300 hover:border-zinc-300 dark:hover:border-zinc-700 hover:-translate-y-1\">\n      {/* Pattern Preview */}\n      <div\n        className=\"relative h-48 overflow-hidden cursor-pointer\"\n        onClick={() => onPreview(pattern)}\n      >\n        <div className=\"absolute inset-0 scale-110 transition-transform duration-300 group-hover:scale-105\">\n          <PatternPreview pattern={pattern} />\n        </div>\n\n        {/* Overlay with buttons - visible on hover/tap */}\n        <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-3 md:gap-2\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onPreview(pattern);\n            }}\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n          >\n            <Eye size={14} className=\"md:w-4 md:h-4\" />\n            <span className=\"hidden sm:inline\">Preview</span>\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onCopy(pattern);\n            }}\n            className=\"flex items-center gap-2 px-3 py-2 md:px-4 md:py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-xs md:text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n          >\n            {copiedId === pattern.id ? (\n              <Check size={14} className=\"md:w-4 md:h-4\" />\n            ) : (\n              <Copy size={14} className=\"md:w-4 md:h-4\" />\n            )}\n            <span className=\"hidden sm:inline\">\n              {copiedId === pattern.id ? \"Copied\" : \"Copy\"}\n            </span>\n          </button>\n        </div>\n\n        {/* New badge and Favorite button */}\n        <div className=\"absolute top-3 right-3 flex items-center gap-2\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onToggleFavorite(pattern.id);\n            }}\n            className={cn(\n              \"p-1.5 rounded-full backdrop-blur-sm transition-colors shadow-lg\",\n              isFavorite\n                ? \"bg-red-500/90 text-white hover:bg-red-600/90\"\n                : \"bg-white/90 dark:bg-zinc-900/90 text-zinc-600 dark:text-zinc-400 hover:text-red-500 dark:hover:text-red-400\"\n            )}\n          >\n            <Heart size={14} className={isFavorite ? \"fill-current\" : \"\"} />\n          </button>\n          {pattern.badge === \"New\" && (\n            <div className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full shadow-lg\">\n              New\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Pattern Info */}\n      <div className=\"p-4\">\n        <h3 className=\"font-medium text-zinc-900 dark:text-zinc-100 text-sm truncate\">\n          {pattern.name}\n        </h3>\n        <p className=\"text-xs text-zinc-500 dark:text-zinc-400 mt-1 capitalize\">\n          {pattern.category}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default function PatternCraftInterface() {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [previewPattern, setPreviewPattern] = useState<Pattern | null>(null);\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [favorites, setFavorites] = useState<Set<string>>(new Set());\n  const previewRef = useRef<HTMLDivElement>(null);\n\n  const filteredPatterns = gridPatterns.filter((pattern) => {\n    const matchesCategory =\n      selectedCategory === \"all\" ||\n      pattern.category === selectedCategory ||\n      (selectedCategory === \"favorites\" && favorites.has(pattern.id));\n    const matchesSearch = pattern.name\n      .toLowerCase()\n      .includes(searchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const handleToggleFavorite = (patternId: string) => {\n    setFavorites((prev) => {\n      const newFavorites = new Set(prev);\n      if (newFavorites.has(patternId)) {\n        newFavorites.delete(patternId);\n      } else {\n        newFavorites.add(patternId);\n      }\n      return newFavorites;\n    });\n  };\n\n  const handlePreview = (pattern: Pattern) => {\n    setPreviewPattern(pattern);\n    // Scroll to preview section\n    setTimeout(() => {\n      previewRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, 100);\n  };\n\n  const handleCopy = async (pattern: Pattern) => {\n    try {\n      // Use the actual code from the pattern\n      await navigator.clipboard.writeText(pattern.code);\n      setCopiedId(pattern.id);\n      setTimeout(() => setCopiedId(null), 2000);\n    } catch (error) {\n      console.error(\"Failed to copy:\", error);\n      // Fallback copy\n      const fallbackContent = `// ${pattern.name} Pattern\n${pattern.code}`;\n      await navigator.clipboard.writeText(fallbackContent);\n      setCopiedId(pattern.id);\n      setTimeout(() => setCopiedId(null), 2000);\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-zinc-900 dark:text-zinc-100 mb-2\">\n          Pattern Library\n        </h2>\n        <p className=\"text-zinc-600 dark:text-zinc-400\">\n          Tap on mobile or hover on desktop to see options {\" \"}\n          <span>Inspired by PatternCraft</span>\n        </p>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"max-w-md mx-auto mb-6\">\n        <div className=\"relative\">\n          <Search\n            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400\"\n            size={20}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Search patterns...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-10 pr-10 py-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg text-zinc-900 dark:text-zinc-100 placeholder-zinc-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          />\n          {searchQuery && (\n            <button\n              onClick={() => setSearchQuery(\"\")}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-zinc-400 hover:text-zinc-600 dark:hover:text-zinc-300\"\n            >\n              <X size={20} />\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Category Filter */}\n      <div className=\"flex flex-wrap justify-center gap-2 mb-8\">\n        {categories.map((category) => (\n          <button\n            key={category.id}\n            onClick={() => setSelectedCategory(category.id)}\n            className={cn(\n              \"px-4 py-2 rounded-lg text-sm font-medium transition-colors\",\n              selectedCategory === category.id\n                ? \"bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900\"\n                : \"bg-zinc-100 dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 hover:bg-zinc-200 dark:hover:bg-zinc-700\"\n            )}\n          >\n            {category.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Results Counter */}\n      <div className=\"text-center mb-6\">\n        <p className=\"text-sm text-zinc-600 dark:text-zinc-400\">\n          {filteredPatterns.length} pattern\n          {filteredPatterns.length !== 1 ? \"s\" : \"\"} found\n        </p>\n      </div>\n\n      {/* Pattern Grid */}\n      {filteredPatterns.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12\">\n          {filteredPatterns.map((pattern) => (\n            <PatternCard\n              key={pattern.id}\n              pattern={pattern}\n              onPreview={handlePreview}\n              onCopy={handleCopy}\n              copiedId={copiedId}\n              isFavorite={favorites.has(pattern.id)}\n              onToggleFavorite={handleToggleFavorite}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12 mb-12\">\n          <div className=\"text-zinc-400 dark:text-zinc-600 mb-4\">\n            {selectedCategory === \"favorites\" ? (\n              <Heart size={48} className=\"mx-auto\" />\n            ) : (\n              <Search size={48} className=\"mx-auto\" />\n            )}\n          </div>\n          <h3 className=\"text-lg font-medium text-zinc-900 dark:text-zinc-100 mb-2\">\n            {selectedCategory === \"favorites\"\n              ? \"No favorites yet\"\n              : \"No patterns found\"}\n          </h3>\n          <p className=\"text-zinc-600 dark:text-zinc-400\">\n            {selectedCategory === \"favorites\"\n              ? \"Click the heart icon on patterns to add them to your favorites\"\n              : \"Try adjusting your search or category filter\"}\n          </p>\n        </div>\n      )}\n\n      {/* Preview Section */}\n      {previewPattern && (\n        <div\n          ref={previewRef}\n          className=\"border-t border-zinc-200 dark:border-zinc-800 pt-12\"\n        >\n          <div className=\"text-center mb-6\">\n            <div className=\"flex items-center justify-center gap-3 mb-2\">\n              <h3 className=\"text-xl font-bold text-zinc-900 dark:text-zinc-100\">\n                {previewPattern.name}\n              </h3>\n              {previewPattern.badge === \"New\" && (\n                <span className=\"px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full\">\n                  New\n                </span>\n              )}\n            </div>\n            <p className=\"text-zinc-600 dark:text-zinc-400 mb-1\">\n              Full preview of the selected pattern\n            </p>\n            <p className=\"text-xs text-zinc-500 dark:text-zinc-400 capitalize\">\n              Category: {previewPattern.category}\n            </p>\n          </div>\n\n          <div className=\"relative bg-zinc-50 dark:bg-zinc-950 rounded-xl border border-zinc-200 dark:border-zinc-800 overflow-hidden\">\n            <div className=\"h-[500px] md:h-[600px] lg:h-[700px]\">\n              <PatternPreview pattern={previewPattern} />\n            </div>\n\n            {/* Preview Controls */}\n            <div className=\"absolute top-4 right-4 flex gap-2\">\n              <button\n                onClick={() => setPreviewPattern(null)}\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n              >\n                <X size={16} />\n                <span className=\"hidden sm:inline\">Close</span>\n              </button>\n              <button\n                onClick={() => handleCopy(previewPattern)}\n                className=\"flex items-center gap-2 px-3 py-2 bg-white/90 dark:bg-zinc-900/90 backdrop-blur-sm rounded-lg text-sm font-medium text-zinc-900 dark:text-zinc-100 hover:bg-white dark:hover:bg-zinc-800 transition-colors shadow-lg\"\n              >\n                {copiedId === previewPattern.id ? (\n                  <Check size={16} />\n                ) : (\n                  <Copy size={16} />\n                )}\n                {copiedId === previewPattern.id ? \"Copied\" : \"Copy Code\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}