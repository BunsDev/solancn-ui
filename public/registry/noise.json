{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "noise",
  "title": "Noise",
  "description": "A minimalistic noise component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "noise.tsx",
      "content": "\"use client\";\nimport React, { type FC } from \"react\";\nimport ClassicBlackCard from \"./cards/classic-black-card\";\nimport CrimsonRedCard from \"./cards/crimson-red-card\";\nimport DeepOceanCard from \"./cards/deep-ocean-card\";\nimport ElectricPurpleCard from \"./cards/electric-purple-card\";\nimport ForestGreenCard from \"./cards/forest-green-card\";\nimport VibrantOrangeCard from \"./cards/vibrant-orange-card\";\n\n// The main App component demonstrates a gallery of NoiseCards with different colors.\nconst App: FC = () => {\n\treturn (\n\t\t<div className=\"min-h-screen w-full bg-gray-800 flex items-center justify-center p-8 font-sans\">\n\t\t\t<div className=\"flex flex-wrap gap-8 justify-center\">\n\t\t\t\t<DeepOceanCard />\n\t\t\t\t<ElectricPurpleCard />\n\t\t\t\t<ForestGreenCard />\n\t\t\t\t<ClassicBlackCard />\n\t\t\t\t<CrimsonRedCard />\n\t\t\t\t<VibrantOrangeCard />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n",
      "type": "registry:ui"
    },
    {
      "path": "noise-card.tsx",
      "content": "\"use client\";\nimport React, { type FC, type ReactNode, useEffect, useRef } from \"react\";\n\ninterface NoiseCardProps {\n\twidth?: string;\n\theight?: string;\n\tchildren: ReactNode;\n\tclassName?: string;\n\tanimated?: boolean;\n\tnoiseOpacity?: number;\n\tgrainSize?: number;\n\tbgColor?: string;\n}\n\nconst NoiseCard: FC<NoiseCardProps> = ({\n\twidth = \"w-96\",\n\theight = \"h-72\",\n\tchildren,\n\tclassName = \"\",\n\tanimated = true,\n\tnoiseOpacity = 0.1,\n\tgrainSize = 1,\n\tbgColor = \"bg-[#0014FF]\",\n}) => {\n\tconst canvasRef = useRef<HTMLCanvasElement>(null);\n\tconst containerRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst container = containerRef.current;\n\t\tif (!canvas || !container) return;\n\n\t\tconst ctx = canvas.getContext(\"2d\");\n\t\tif (!ctx) return;\n\n\t\tlet animationFrameId: number;\n\n\t\tconst drawNoise = () => {\n\t\t\tconst { width, height } = canvas;\n\t\t\tif (width === 0 || height === 0) return;\n\n\t\t\tif (grainSize === 1) {\n\t\t\t\tconst imageData = ctx.createImageData(width, height);\n\t\t\t\tconst data = imageData.data;\n\t\t\t\tconst opacity = Math.floor(noiseOpacity * 255);\n\n\t\t\t\tfor (let i = 0; i < data.length; i += 4) {\n\t\t\t\t\tconst randomValue = Math.floor(Math.random() * 255);\n\t\t\t\t\tdata[i] = randomValue;\n\t\t\t\t\tdata[i + 1] = randomValue;\n\t\t\t\t\tdata[i + 2] = randomValue;\n\t\t\t\t\tdata[i + 3] = opacity;\n\t\t\t\t}\n\n\t\t\t\tctx.putImageData(imageData, 0, 0);\n\t\t\t} else {\n\t\t\t\tctx.clearRect(0, 0, width, height);\n\t\t\t\tfor (let y = 0; y < height; y += grainSize) {\n\t\t\t\t\tfor (let x = 0; x < width; x += grainSize) {\n\t\t\t\t\t\tconst randomValue = Math.floor(Math.random() * 255);\n\t\t\t\t\t\tctx.fillStyle = `rgba(${randomValue}, ${randomValue}, ${randomValue}, ${noiseOpacity})`;\n\t\t\t\t\t\tctx.fillRect(x, y, grainSize, grainSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst loop = () => {\n\t\t\tdrawNoise();\n\t\t\tanimationFrameId = requestAnimationFrame(loop);\n\t\t};\n\n\t\tconst resizeObserver = new ResizeObserver((entries) => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tconst { width, height } = entry.contentRect;\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\t\t\t\tdrawNoise();\n\t\t\t}\n\t\t});\n\n\t\tresizeObserver.observe(container);\n\n\t\tif (animated) {\n\t\t\tloop();\n\t\t} else {\n\t\t\tdrawNoise();\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (animated) {\n\t\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t\t}\n\t\t\tresizeObserver.disconnect();\n\t\t};\n\t}, [animated, noiseOpacity, grainSize]);\n\n\treturn (\n\t\t<div\n\t\t\tref={containerRef}\n\t\t\tclassName={`${width} ${height} ${bgColor} rounded-xl p-8 relative overflow-hidden ${className}`}\n\t\t>\n\t\t\t<canvas\n\t\t\t\tref={canvasRef}\n\t\t\t\tclassName=\"absolute inset-0 w-full h-full pointer-events-none\"\n\t\t\t/>\n\t\t\t<div className=\"relative z-10 text-white h-full flex flex-col\">\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default NoiseCard;\n",
      "type": "registry:ui"
    }
  ]
}