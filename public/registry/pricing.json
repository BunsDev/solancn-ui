{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing",
  "title": "Pricing",
  "description": "A minimalistic pricing component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "pricing.tsx",
      "content": "'use client'\nimport React from 'react';\n\n// TypeScript interfaces\ninterface PricingFeature {\n  text: string;\n  included: boolean;\n}\n\ninterface PricingPlan {\n  name: string;\n  price: string;\n  pricePeriod: string | null;\n  description: string;\n  features: PricingFeature[];\n  buttonText: string;\n  isPopular: boolean;\n}\n\ninterface PricingCardProps {\n  plan: PricingPlan;\n}\n\n// SVG Icon for included features\nconst CheckIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-5 w-5 text-green-500 dark:text-green-400 mr-3 flex-shrink-0\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\n// SVG Icon for excluded features\nconst TimesIcon = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    className=\"h-5 w-5 text-gray-400 dark:text-gray-500 mr-3 flex-shrink-0\"\n    viewBox=\"0 0 20 20\"\n    fill=\"currentColor\"\n  >\n    <path\n      fillRule=\"evenodd\"\n      d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\n// Data for the pricing plans\nconst pricingPlans: PricingPlan[] = [\n  {\n    name: 'Starter',\n    price: '$19',\n    pricePeriod: '/month',\n    description: 'Perfect for individuals and small teams starting out.',\n    features: [\n      { text: 'Up to 3 users', included: true },\n      { text: 'Basic automations', included: true },\n      { text: '5GB storage', included: true },\n      { text: 'Advanced analytics', included: false },\n      { text: 'Priority support', included: false },\n    ],\n    buttonText: 'Get Started',\n    isPopular: false,\n  },\n  {\n    name: 'Professional',\n    price: '$49',\n    pricePeriod: '/month',\n    description: 'For growing teams that need more power and features.',\n    features: [\n      { text: 'Up to 10 users', included: true },\n      { text: 'Advanced automations', included: true },\n      { text: '50GB storage', included: true },\n      { text: 'AI-powered analytics', included: true },\n      { text: 'Priority support', included: true },\n    ],\n    buttonText: 'Start Free Trial',\n    isPopular: true,\n  },\n  {\n    name: 'Enterprise',\n    price: 'Custom',\n    pricePeriod: null,\n    description: 'For large organizations with complex needs and scale.',\n    features: [\n      { text: 'Unlimited users', included: true },\n      { text: 'Custom automations & SSO', included: true },\n      { text: 'Unlimited storage', included: true },\n      { text: 'Advanced analytics & reporting', included: true },\n      { text: '24/7 dedicated support', included: true },\n    ],\n    buttonText: 'Contact Sales',\n    isPopular: false,\n  },\n];\n\n// Individual Pricing Card Component\nconst PricingCard: React.FC<PricingCardProps> = ({ plan }) => {\n  const cardClasses = `\n    pricing-card bg-white/80 dark:bg-zinc-900/80 backdrop-blur-xl\n    border rounded-2xl p-6 md:p-8 flex flex-col transition-all duration-300\n    hover:-translate-y-1 hover:shadow-xl dark:hover:shadow-2xl\n    ${plan.isPopular\n      ? 'border-2 border-indigo-500 dark:border-indigo-400 relative shadow-lg shadow-indigo-500/20 dark:shadow-indigo-400/20'\n      : 'border-gray-200 dark:border-zinc-700 hover:border-gray-300 dark:hover:border-zinc-600'\n    }\n  `;\n\n  const buttonClasses = `\n    w-full py-3 px-6 rounded-lg font-medium mt-auto transition-all duration-300\n    border border-transparent focus:outline-none focus:ring-2 focus:ring-offset-2\n    ${plan.isPopular\n      ? 'bg-indigo-500 dark:bg-indigo-600 text-white shadow-lg shadow-indigo-500/30 dark:shadow-indigo-600/30 hover:bg-indigo-600 dark:hover:bg-indigo-700 focus:ring-indigo-500 dark:focus:ring-indigo-400'\n      : `\n        bg-white/70 dark:bg-zinc-800/70 hover:bg-white dark:hover:bg-zinc-800\n        text-slate-800 dark:text-zinc-200\n        border border-slate-200 dark:border-zinc-600\n        backdrop-blur-sm hover:shadow-md dark:hover:shadow-lg\n        focus:ring-slate-500 dark:focus:ring-zinc-400\n       `\n    }\n  `;\n\n  return (\n    <div className={cardClasses}>\n      {plan.isPopular && (\n        <div className=\"absolute top-0 right-4 -mt-3 bg-indigo-500 dark:bg-indigo-600 text-white text-xs font-bold px-3 py-1 rounded-full shadow-md\">\n          MOST POPULAR\n        </div>\n      )}\n      <h3 className=\"text-2xl font-bold text-gray-800 dark:text-zinc-100 mb-4\">{plan.name}</h3>\n      <p className=\"text-gray-800 dark:text-zinc-100 text-4xl font-bold mb-2\">\n        {plan.price}\n        {plan.pricePeriod && (\n          <span className=\"text-lg text-gray-500 dark:text-zinc-400 font-medium\">{plan.pricePeriod}</span>\n        )}\n      </p>\n      <p className=\"text-gray-600 dark:text-zinc-400 mb-8 text-sm h-10\">{plan.description}</p>\n      <ul className=\"space-y-4 mb-8\">\n        {plan.features.map((feature: PricingFeature, index: number) => (\n          <li\n            key={index}\n            className={`flex items-center ${\n              feature.included\n                ? 'text-gray-700 dark:text-zinc-300'\n                : 'text-gray-400 dark:text-zinc-500'\n            }`}\n          >\n            {feature.included ? <CheckIcon /> : <TimesIcon />}\n            <span>{feature.text}</span>\n          </li>\n        ))}\n      </ul>\n      <button className={buttonClasses}>\n        {plan.buttonText}\n      </button>\n    </div>\n  );\n};\n\n\n// Main Pricing Section Component\nconst PricingSection: React.FC = () => {\n  return (\n    <section id=\"pricing\" className=\"relative py-16 sm:py-24 overflow-hidden\">\n      {/* Subtle pattern overlay */}\n      <div className=\"absolute inset-0 opacity-30 dark:opacity-20\">\n        <div\n          className=\"absolute inset-0\"\n          style={{\n            backgroundImage: `\n              radial-gradient(circle at 25% 25%, rgba(99, 102, 241, 0.1) 0%, transparent 50%),\n              radial-gradient(circle at 75% 75%, rgba(168, 85, 247, 0.1) 0%, transparent 50%)\n            `\n          }}\n        />\n      </div>\n\n      <div className=\"relative container mx-auto px-4\">\n        <div className=\"text-center max-w-4xl mx-auto mb-12 md:mb-16\">\n          <h2 className=\"text-3xl md:text-5xl font-bold text-gray-900 dark:text-zinc-100 mb-6 tracking-tight\">\n            Simple, Transparent Pricing\n          </h2>\n          <p className=\"text-lg md:text-xl text-gray-600 dark:text-zinc-400 max-w-2xl mx-auto\">\n            Choose the plan that works best for your team. No hidden fees, no surprises.\n            Start with a free trial and scale as you grow.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n          {pricingPlans.map((plan: PricingPlan, index: number) => (\n            <PricingCard key={index} plan={plan} />\n          ))}\n        </div>\n\n        {/* Additional info section */}\n        <div className=\"text-center mt-16 max-w-3xl mx-auto\">\n          <p className=\"text-sm text-gray-500 dark:text-zinc-500 mb-4\">\n            All plans include a 14-day free trial. No credit card required.\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-6 text-sm text-gray-600 dark:text-zinc-400\">\n            <span className=\"flex items-center\">\n              <CheckIcon />\n              Cancel anytime\n            </span>\n            <span className=\"flex items-center\">\n              <CheckIcon />\n              24/7 support\n            </span>\n            <span className=\"flex items-center\">\n              <CheckIcon />\n              99.9% uptime SLA\n            </span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default PricingSection;",
      "type": "registry:ui"
    },
    {
      "path": "pricing2.tsx",
      "content": "'use client'\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion';\n\n// Helper component for animating numbers with a \"smokey\" effect\ninterface AnimatedPriceProps {\n  price: string;\n}\n\nconst AnimatedPrice: React.FC<AnimatedPriceProps> = ({ price }) => {\n  return (\n    <motion.span\n      className=\"inline-block\" // Ensure it takes up space for animation\n      key={price} // Add key to force re-render and animation on price change\n      initial={{ opacity: 0, filter: 'blur(8px)' }}\n      animate={{ opacity: 1, filter: 'blur(0px)' }}\n      transition={{ duration: 0.5, ease: 'easeOut' }}\n    >\n      {price}\n    </motion.span>\n  );\n};\n\nconst Pricing2 = () => {\n  const [isMonthly, setIsMonthly] = useState(true);\n  const monthlyButtonRef = useRef<HTMLButtonElement>(null);\n  const yearlyButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeButtonLeft, setActiveButtonLeft] = useState(0);\n  const [activeButtonWidth, setActiveButtonWidth] = useState(0);\n\n  // Effect to measure button widths and positions\n  useEffect(() => {\n    const updateButtonMetrics = () => {\n      // Ensure refs are available before trying to access offset properties\n      if (monthlyButtonRef.current && yearlyButtonRef.current) {\n        if (isMonthly) {\n          setActiveButtonLeft(monthlyButtonRef.current.offsetLeft);\n          setActiveButtonWidth(monthlyButtonRef.current.offsetWidth);\n        } else {\n          setActiveButtonLeft(yearlyButtonRef.current.offsetLeft);\n          setActiveButtonWidth(yearlyButtonRef.current.offsetWidth);\n        }\n      }\n    };\n\n    // Initial calculation on component mount\n    updateButtonMetrics();\n\n    // Recalculate on window resize to ensure responsiveness\n    window.addEventListener('resize', updateButtonMetrics);\n\n    // Cleanup event listener on component unmount\n    return () => {\n      window.removeEventListener('resize', updateButtonMetrics);\n    };\n  }, [isMonthly]); // Recalculate when isMonthly state changes\n\n  const pricingTiers = [\n    {\n      name: 'Basic',\n      monthlyPrice: '$19',\n      yearlyPrice: '$199',\n      features: [\n        '5 Projects',\n        '10 GB Storage',\n        'Basic Analytics',\n        'Community Support',\n        'Custom Domains'\n      ],\n      buttonText: 'Get Started',\n      isPopular: false,\n    },\n    {\n      name: 'Pro',\n      monthlyPrice: '$49',\n      yearlyPrice: '$499',\n      features: [\n        'Unlimited Projects',\n        '50 GB Storage',\n        'Advanced Analytics',\n        'Priority Email Support',\n        'Custom Domains',\n        'Team Collaboration'\n      ],\n      buttonText: 'Start Free Trial',\n      isPopular: true,\n    },\n    {\n      name: 'Enterprise',\n      monthlyPrice: '$99',\n      yearlyPrice: '$999',\n      features: [\n        'All Pro Features',\n        'Unlimited Storage',\n        'Real-time Analytics',\n        '24/7 Phone Support',\n        'Dedicated Account Manager',\n        'SAML/SSO Integration'\n      ],\n      buttonText: 'Contact Sales',\n      isPopular: false,\n    },\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const cardVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n      transition: {\n        type: 'spring' as const,\n        stiffness: 100,\n        damping: 10,\n      },\n    },\n  };\n\n  return (\n    <div className=\"min-h-screen w-full relative bg-white dark:bg-black overflow-hidden\">\n      {/* Rose Twilight Background with Top Glow - Light/Dark mode support */}\n      <div\n        className=\"absolute inset-0 z-0\"\n        style={{\n          background: \"radial-gradient(ellipse 80% 60% at 50% 0%, rgba(202, 44, 72, 0.15), transparent 70%), rgb(248 250 252)\",\n        }}\n      />\n      <div\n        className=\"absolute inset-0 z-0 dark:block hidden\"\n        style={{\n          background: \"radial-gradient(ellipse 80% 60% at 50% 0%, rgba(202, 44, 72, 0.25), transparent 70%), #000000\",\n        }}\n      />\n      {/* Additional subtle glow elements - Light/Dark mode support */}\n      <div className=\"absolute top-1/4 left-1/4 w-48 h-48 bg-[#CA2C48] rounded-full mix-blend-multiply filter blur-xl opacity-5 dark:opacity-10 animate-blob animation-delay-2000 pointer-events-none\"></div>\n      <div className=\"absolute bottom-1/4 right-1/4 w-48 h-48 bg-[#CA2C48] rounded-full mix-blend-multiply filter blur-xl opacity-5 dark:opacity-10 animate-blob animation-delay-4000 pointer-events-none\"></div>\n\n\n      {/* Your Content/Components - This is the existing pricing page content */}\n      <div className=\"relative z-10 font-inter py-12 px-4 sm:px-6 lg:px-8 flex items-center justify-center min-h-screen\">\n        <div className=\"max-w-7xl mx-auto w-full\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-extrabold text-gray-900 dark:text-white tracking-tight leading-tight\">\n              Simple, Transparent Pricing\n            </h1>\n            <p className=\"mt-4 text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              Choose the plan that&apos;s right for you. No hidden fees, no surprises.\n            </p>\n          </div>\n\n          {/* Billing Toggle - Light/Dark mode support with black glow */}\n          <div className=\"mt-10 flex justify-center\">\n            <div\n              className=\"relative flex items-center p-1 rounded-full border border-gray-300 dark:border-gray-700 dark:shadow-2xl\"\n              style={{\n                background: 'rgba(255, 255, 255, 0.8)', // Light mode background\n                backdropFilter: 'blur(10px)', // Glassy blur effect\n                WebkitBackdropFilter: 'blur(10px)', // For Safari compatibility\n                boxShadow: 'none', // No shadow in light mode\n              }}\n            >\n              <div\n                className=\"absolute inset-0 rounded-full dark:block hidden\"\n                style={{\n                  background: 'rgba(0, 0, 0, 0.8)', // Darker black background for more contrast\n                  backdropFilter: 'blur(10px)',\n                  WebkitBackdropFilter: 'blur(10px)',\n                  boxShadow: '0 0 30px rgba(0, 0, 0, 0.8), 0 0 60px rgba(0, 0, 0, 0.6), 0 0 90px rgba(0, 0, 0, 0.4)', // Black glow effect\n                }}\n              />\n              <button\n                ref={monthlyButtonRef}\n                onClick={() => setIsMonthly(true)}\n                className={`relative z-10 py-2 px-6 rounded-full text-sm font-medium text-center transition-all duration-300 ${\n                  isMonthly\n                    ? 'text-white'\n                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200'\n                }`}\n              >\n                Monthly\n              </button>\n              <button\n                ref={yearlyButtonRef}\n                onClick={() => setIsMonthly(false)}\n                className={`relative z-10 py-2 px-6 rounded-full text-sm font-medium text-center transition-all duration-300 flex items-center justify-center ${\n                  !isMonthly\n                    ? 'text-white'\n                    : 'text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200'\n                }`}\n              >\n                Yearly\n                <span className=\"ml-2 px-2 py-0.5 bg-[#CA2C48] text-white text-xs font-bold rounded-full\">\n                  20% off\n                </span>\n              </button>\n              {/* Motion div for the active background - Updated for glassy feel */}\n              {activeButtonWidth > 0 && (\n                <motion.div\n                  className=\"absolute inset-y-1 rounded-full shadow-md\"\n                  style={{\n                    background: 'rgba(202, 44, 72, 0.8)', // Semi-transparent red\n                    backdropFilter: 'blur(8px)', // Glassy blur effect\n                    WebkitBackdropFilter: 'blur(8px)', // For Safari compatibility\n                  }}\n                  initial={false}\n                  animate={{\n                    left: activeButtonLeft,\n                    width: activeButtonWidth,\n                  }}\n                  transition={{ type: \"spring\" as const, stiffness: 300, damping: 30 }}\n                />\n              )}\n            </div>\n          </div>\n\n          {/* Pricing Cards - Updated for glassy feel */}\n          <motion.div\n            className=\"mt-16 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            {pricingTiers.map((tier) => (\n              <motion.div\n                key={tier.name}\n                className={`relative flex flex-col p-8 rounded-xl border transition-all duration-300 ${\n                  tier.isPopular\n                    ? 'border-[#CA2C48] bg-white/90 dark:bg-black/60'\n                    : 'border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-900/60'\n                }`}\n                style={{\n                  backdropFilter: 'blur(10px)', // Glassy blur effect\n                  WebkitBackdropFilter: 'blur(10px)', // For Safari compatibility\n                  boxShadow: tier.isPopular\n                    ? '0 10px 20px rgba(202, 44, 72, 0.15), 0 4px 8px rgba(0,0,0,0.1)'\n                    : '0 5px 15px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.05)', // Lighter shadows for light mode\n                }}\n                variants={cardVariants}\n                whileHover={{\n                  y: -8,\n                  boxShadow: tier.isPopular\n                    ? '0 25px 50px -12px rgba(202, 44, 72, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.15)'\n                    : '0 25px 50px -12px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1)',\n                }}\n                transition={{ type: \"spring\" as const, stiffness: 300, damping: 20 }}\n              >\n                {tier.isPopular && (\n                  <div className=\"absolute -top-3 left-1/2 -translate-x-1/2 px-3 py-1 bg-[#CA2C48] text-white text-xs font-semibold uppercase rounded-full shadow-md\">\n                    Most Popular\n                  </div>\n                )}\n                <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{tier.name}</h3>\n                <div className=\"mt-4 flex items-baseline\">\n                  <span className=\"text-5xl font-extrabold text-gray-900 dark:text-white\">\n                    <AnimatedPrice price={isMonthly ? tier.monthlyPrice : tier.yearlyPrice} />\n                  </span>\n                  <span className=\"ml-1 text-xl font-medium text-gray-500 dark:text-gray-400\">\n                    /{isMonthly ? 'month' : 'year'}\n                  </span>\n                </div>\n                <p className=\"mt-4 text-gray-600 dark:text-gray-400 text-sm\">\n                  {tier.name === 'Basic' && 'For individuals and small teams getting started.'}\n                  {tier.name === 'Pro' && 'Perfect for growing businesses and advanced users.'}\n                  {tier.name === 'Enterprise' && 'Tailored for large organizations with specific needs.'}\n                </p>\n\n                <ul role=\"list\" className=\"mt-8 space-y-3 flex-grow\">\n                  {tier.features.map((feature) => (\n                    <li key={feature} className=\"flex items-start\">\n                      <svg\n                        className=\"flex-shrink-0 h-5 w-5 text-[#CA2C48] mt-1\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      >\n                        <polyline points=\"20 6 9 17 4 12\"></polyline>\n                      </svg>\n                      <p className=\"ml-3 text-base text-gray-700 dark:text-gray-200\">{feature}</p>\n                    </li>\n                  ))}\n                </ul>\n\n                <div className=\"mt-8\">\n                  <motion.button\n                    className={`w-full py-2 px-4 rounded-md text-base font-medium shadow-sm transition-all duration-300 inline-flex items-center justify-center border ${\n                      tier.isPopular\n                        ? 'bg-[#CA2C48] text-white border-[#CA2C48] hover:bg-[#B02441]'\n                        : 'bg-white/80 dark:bg-gray-800/80 text-[#CA2C48] border-[#CA2C48]/30 dark:border-[#CA2C48]/50 hover:bg-[#CA2C48]/10 dark:hover:bg-[#CA2C48]/20'\n                    }`}\n                    style={{\n                      backdropFilter: 'blur(5px)', // Glassy blur for buttons\n                      WebkitBackdropFilter: 'blur(5px)', // For Safari compatibility\n                    }}\n                    whileHover={{\n                      scale: 1.005,\n                      boxShadow: tier.isPopular\n                        ? '0 4px 8px rgba(202, 44, 72, 0.3)'\n                        : '0 4px 8px rgba(0, 0, 0, 0.1)',\n                    }}\n                    whileTap={{ scale: 0.995 }}\n                  >\n                    {tier.buttonText}\n                  </motion.button>\n                </div>\n              </motion.div>\n            ))}\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Pricing2;\n",
      "type": "registry:ui"
    },
    {
      "path": "pricing3.tsx",
      "content": "'use client';\n\nimport { Sparkles, ArrowRight, Check, Star, Zap, Shield } from 'lucide-react';\nimport { useState, useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\n\n// Utility function for conditional class names\nfunction cn(...classes: (string | undefined | null | false)[]): string {\n  return classes.filter(Boolean).join(' ');\n}\n\n// Card components\ninterface CardProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nconst Card: React.FC<CardProps> = ({ className, children }) => (\n  <div className={cn('rounded-lg border bg-card text-card-foreground shadow-sm', className)}>\n    {children}\n  </div>\n);\n\nconst CardHeader: React.FC<CardProps> = ({ className, children }) => (\n  <div className={cn('flex flex-col space-y-1.5 p-6', className)}>\n    {children}\n  </div>\n);\n\nconst CardTitle: React.FC<CardProps> = ({ className, children }) => (\n  <h3 className={cn('text-2xl font-semibold leading-none tracking-tight', className)}>\n    {children}\n  </h3>\n);\n\nconst CardDescription: React.FC<CardProps> = ({ className, children }) => (\n  <div className={cn('text-sm text-muted-foreground', className)}>\n    {children}\n  </div>\n);\n\nconst CardContent: React.FC<CardProps> = ({ className, children }) => (\n  <div className={cn('p-6 pt-0', className)}>\n    {children}\n  </div>\n);\n\nconst CardFooter: React.FC<CardProps> = ({ className, children }) => (\n  <div className={cn('flex items-center p-6 pt-0', className)}>\n    {children}\n  </div>\n);\n\n// Custom AnimatedNumber component to replace NumberFlow\ninterface AnimatedNumberProps {\n  value: number;\n  format: {\n    style: 'currency' | 'decimal' | 'percent';\n    currency?: string;\n    maximumFractionDigits: number;\n  };\n  className?: string;\n}\n\nconst AnimatedNumber: React.FC<AnimatedNumberProps> = ({ value, format, className }) => {\n  const [currentValue, setCurrentValue] = useState(0);\n  const animationFrameRef = useRef<number | null>(null);\n  const startTimeRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    const duration = 500; // milliseconds for the animation\n\n    const animate = (timestamp: DOMHighResTimeStamp) => {\n      if (!startTimeRef.current) {\n        startTimeRef.current = timestamp;\n      }\n\n      const progress = (timestamp - startTimeRef.current) / duration;\n      const easedProgress = Math.min(1, progress); // Ensure progress doesn't exceed 1\n\n      const newValue = easedProgress * value;\n      setCurrentValue(newValue);\n\n      if (progress < 1) {\n        animationFrameRef.current = requestAnimationFrame(animate);\n      } else {\n        setCurrentValue(value); // Ensure final value is exact\n        startTimeRef.current = null; // Reset for next animation\n      }\n    };\n\n    // Clear any existing animation frame before starting a new one\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    startTimeRef.current = null; // Reset start time for new animation\n    animationFrameRef.current = requestAnimationFrame(animate);\n\n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    };\n  }, [value]);\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: format.style,\n    currency: format.currency,\n    maximumFractionDigits: format.maximumFractionDigits,\n  });\n\n  return <span className={className}>{formatter.format(currentValue)}</span>;\n};\n\n\n// Define the structure for a plan for better type safety and readability\ninterface Plan {\n  id: string;\n  name: string;\n  icon: React.ElementType; // Using React.ElementType for component props\n  price: {\n    monthly: number | string;\n    yearly: number | string;\n  };\n  description: string;\n  features: string[];\n  cta: string;\n  popular?: boolean; // Optional property\n}\n\n// Data for the pricing plans\nconst plans: Plan[] = [\n  {\n    id: 'starter',\n    name: 'Starter AI',\n    icon: Star,\n    price: {\n      monthly: 'Free forever',\n      yearly: 'Free forever',\n    },\n    description:\n      'Kickstart your AI journey with essential features for personal projects.',\n    features: [\n      '1,000 AI generations / month',\n      'Basic AI model access',\n      'Community support',\n      'Standard processing speed',\n      '500MB storage for models',\n    ],\n    cta: 'Start for Free',\n  },\n  {\n    id: 'pro',\n    name: 'Pro AI',\n    icon: Zap,\n    price: {\n      monthly: 90,\n      yearly: 75,\n    },\n    description: 'Unlock advanced AI capabilities for your growing applications.',\n    features: [\n      'Unlimited AI generations',\n      'Premium AI model access',\n      'Priority email support',\n      'High-speed processing',\n      '10GB storage for models',\n    ],\n    cta: 'Subscribe to Pro AI',\n    popular: true,\n  },\n  {\n    id: 'enterprise',\n    name: 'Enterprise AI',\n    icon: Shield,\n    price: {\n      monthly: 'Contact for pricing',\n      yearly: 'Contact for pricing',\n    },\n    description: 'Tailored AI solutions for large-scale deployments and critical needs.',\n    features: [\n      'Customizable AI models',\n      'Dedicated technical account manager',\n      'On-premise deployment options',\n      'Ultra-low latency processing',\n      'Unlimited secure storage',\n    ],\n    cta: 'Request a Demo',\n  },\n];\n\nexport default function SimplePricing() {\n  // State to manage the selected frequency (monthly or yearly)\n  const [frequency, setFrequency] = useState<'monthly' | 'yearly'>('monthly');\n  // State to track if the component has mounted to prevent hydration errors\n  const [mounted, setMounted] = useState(false);\n\n  // Set mounted to true after the component has been rendered on the client side\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Render nothing until the component is mounted to prevent hydration mismatches\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <div className=\"not-prose relative flex w-full flex-col gap-16 overflow-hidden px-4 py-24 text-center sm:px-8\">\n      {/* Background gradient effects for visual appeal */}\n      <div className=\"absolute inset-0 -z-10 overflow-hidden\">\n        <div className=\"absolute -top-[10%] left-[50%] h-[40%] w-[60%] -translate-x-1/2 rounded-full bg-primary/10 blur-3xl\" />\n        <div className=\"absolute -bottom-[10%] -right-[10%] h-[40%] w-[40%] rounded-full bg-primary/5 blur-3xl\" />\n        <div className=\"absolute -bottom-[10%] -left-[10%] h-[40%] w-[40%] rounded-full bg-primary/5 blur-3xl\" />\n      </div>\n\n      <div className=\"flex flex-col items-center justify-center gap-8\">\n        {/* Section for title and description */}\n        <div className=\"flex flex-col items-center space-y-2\">\n          {/* Pricing Plans Badge - Replaced with span */}\n          <span\n            className=\"mb-4 inline-flex items-center rounded-full border border-primary/20 bg-primary/5 px-4 py-1 text-sm font-medium text-foreground\"\n          >\n            <Sparkles className=\"mr-1 h-3.5 w-3.5 animate-pulse text-primary\" />\n            AI Subscription Plans\n          </span>\n          {/* Main Title with animation */}\n          <motion.h1\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"bg-gradient-to-b from-foreground to-foreground/30 bg-clip-text text-4xl font-bold text-transparent sm:text-5xl\"\n          >\n            Choose the AI plan that powers your innovation\n          </motion.h1>\n          {/* Description with animation */}\n          <motion.p\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n            className=\"max-w-md pt-2 text-lg text-muted-foreground\"\n          >\n            Flexible and powerful AI plans designed to scale with your needs, from hobby projects to enterprise solutions.\n          </motion.p>\n        </div>\n\n        {/* Frequency Tabs with animation - Replaced with div and buttons */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.4, delay: 0.2 }}\n        >\n          <div\n            className=\"inline-block rounded-full bg-muted/30 p-1 shadow-sm\"\n          >\n            <div className=\"flex bg-transparent\">\n              <button\n                onClick={() => setFrequency('monthly')}\n                className={cn(\n                  \"inline-flex items-center justify-center whitespace-nowrap rounded-full px-3 py-1.5 text-sm font-medium ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n                  frequency === 'monthly'\n                    ? 'bg-background shadow-sm'\n                    : 'bg-transparent hover:bg-muted/50'\n                )}\n              >\n                Monthly\n              </button>\n              <button\n                onClick={() => setFrequency('yearly')}\n                className={cn(\n                  \"inline-flex items-center justify-center whitespace-nowrap rounded-full px-3 py-1.5 text-sm font-medium ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n                  frequency === 'yearly'\n                    ? 'bg-background shadow-sm'\n                    : 'bg-transparent hover:bg-muted/50'\n                )}\n              >\n                Yearly\n                <span\n                  className=\"ml-2 inline-flex items-center rounded-full border border-transparent bg-primary/10 px-2.5 py-0.5 text-xs font-semibold text-primary transition-colors hover:bg-primary/15\"\n                >\n                  20% off\n                </span>\n              </button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Pricing Cards Grid */}\n        <div className=\"mt-8 grid w-full max-w-6xl grid-cols-1 gap-6 md:grid-cols-3\">\n          {plans.map((plan, index) => (\n            <motion.div\n              key={plan.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.1 + index * 0.1 }}\n              whileHover={{ y: -5 }} // Hover effect for cards\n              className=\"flex\" // Use flex to make cards fill available height\n            >\n              <Card\n                className={cn(\n                  'relative h-full w-full bg-secondary/20 text-left transition-all duration-300 hover:shadow-lg',\n                  plan.popular\n                    ? 'shadow-md ring-2 ring-primary/50 dark:shadow-primary/10'\n                    : 'hover:border-primary/30',\n                  plan.popular &&\n                    'bg-gradient-to-b from-primary/[0.03] to-transparent',\n                )}\n              >\n                {/* \"Popular\" Badge for the popular plan - Replaced with span */}\n                {plan.popular && (\n                  <div className=\"absolute -top-3 left-0 right-0 mx-auto w-fit\">\n                    <span className=\"inline-flex items-center rounded-full bg-primary px-4 py-1 text-sm font-medium text-primary-foreground shadow-sm\">\n                      <Sparkles className=\"mr-1 h-3.5 w-3.5\" />\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n                <CardHeader className={cn('pb-4', plan.popular && 'pt-8')}>\n                  <div className=\"flex items-center gap-2\">\n                    {/* Plan Icon */}\n                    <div\n                      className={cn(\n                        'flex h-8 w-8 items-center justify-center rounded-full',\n                        plan.popular\n                          ? 'bg-primary/10 text-primary'\n                          : 'bg-secondary text-foreground',\n                      )}\n                    >\n                      <plan.icon className=\"h-4 w-4\" />\n                    </div>\n                    {/* Plan Name */}\n                    <CardTitle\n                      className={cn(\n                        'text-xl font-bold',\n                        plan.popular && 'text-primary',\n                      )}\n                    >\n                      {plan.name}\n                    </CardTitle>\n                  </div>\n                  <CardDescription className=\"mt-3 space-y-2\">\n                    {/* Plan Description */}\n                    <p className=\"text-sm\">{plan.description}</p>\n                    {/* Price Display */}\n                    <div className=\"pt-2\">\n                      {typeof plan.price[frequency] === 'number' ? (\n                        <div className=\"flex items-baseline\">\n                          <AnimatedNumber // Using custom AnimatedNumber component\n                            className={cn(\n                              'text-3xl font-bold',\n                              plan.popular ? 'text-primary' : 'text-foreground',\n                            )}\n                            format={{\n                              style: 'currency',\n                              currency: 'USD',\n                              maximumFractionDigits: 0,\n                            }}\n                            value={plan.price[frequency] as number}\n                          />\n                          <span className=\"ml-1 text-sm text-muted-foreground\">\n                            /month, billed {frequency}\n                          </span>\n                        </div>\n                      ) : (\n                        <span\n                          className={cn(\n                            'text-2xl font-bold',\n                            plan.popular ? 'text-primary' : 'text-foreground',\n                          )}\n                        >\n                          {plan.price[frequency]}\n                        </span>\n                      )}\n                    </div>\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"grid gap-3 pb-6\">\n                  {/* Features List */}\n                  {plan.features.map((feature, featureIndex) => (\n                    <motion.div\n                      key={featureIndex}\n                      initial={{ opacity: 0, x: -5 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3, delay: 0.5 + featureIndex * 0.05 }}\n                      className=\"flex items-center gap-2 text-sm\"\n                    >\n                      <div\n                        className={cn(\n                          'flex h-5 w-5 items-center justify-center rounded-full',\n                          plan.popular\n                            ? 'bg-primary/10 text-primary'\n                            : 'bg-secondary text-secondary-foreground',\n                        )}\n                      >\n                        <Check className=\"h-3.5 w-3.5\" />\n                      </div>\n                      <span\n                        className={\n                          plan.popular\n                            ? 'text-foreground'\n                            : 'text-muted-foreground'\n                        }\n                      >\n                        {feature}\n                      </span>\n                    </motion.div>\n                  ))}\n                </CardContent>\n                <CardFooter>\n                  {/* Call to Action Button - Replaced with button */}\n                  <button\n                    className={cn(\n                      'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2 w-full group',\n                      plan.popular\n                        ? 'bg-primary text-primary-foreground hover:bg-primary/90 hover:shadow-md hover:shadow-primary/20'\n                        : 'border border-input bg-background hover:border-primary/30 hover:bg-primary/5 hover:text-primary',\n                    )}\n                  >\n                    {plan.cta}\n                    <ArrowRight className=\"ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1\" />\n                  </button>\n                </CardFooter>\n\n                {/* Subtle gradient effects and border for popular plan */}\n                {plan.popular ? (\n                  <>\n                    <div className=\"pointer-events-none absolute bottom-0 left-0 right-0 h-1/2 rounded-b-lg bg-gradient-to-t from-primary/[0.05] to-transparent\" />\n                    <div className=\"pointer-events-none absolute inset-0 rounded-lg border border-primary/20\" />\n                  </>\n                ) : (\n                  <div className=\"pointer-events-none absolute inset-0 rounded-lg border border-transparent opacity-0 transition-opacity duration-300 hover:border-primary/10 hover:opacity-100\" />\n                )}\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}