{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modern-button",
  "title": "Modern Button",
  "description": "A minimalistic modern button component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "modern-button.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\n\n// Utility function to merge Tailwind CSS classes conditionally.\n// This is a simplified version of the 'clsx' or 'tailwind-merge' library.\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n\treturn classes.filter(Boolean).join(\" \");\n};\n\n// --- Icon Components (replaces lucide-react) ---\n\n// Check icon component using inline SVG\nconst Check = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\n// Copy icon component using inline SVG\nconst Copy = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" />\n\t\t<path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n\t</svg>\n);\n\n// --- UI Components (replaces custom component library) ---\n\n// A simple, reusable Button component.\nconst Button = React.forwardRef<\n\tHTMLButtonElement,\n\tReact.ButtonHTMLAttributes<HTMLButtonElement> & {\n\t\tclassName?: string;\n\t}\n>(({ className, children, ...props }, ref) => {\n\treturn (\n\t\t<button\n\t\t\tclassName={cn(\n\t\t\t\t\"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n\t\t\t\t\"h-10 px-4 py-2\", // Default size\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tref={ref}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n});\nButton.displayName = \"Button\";\n\n// --- The Main Button Component from your request ---\n\ninterface CopyButtonProps\n\textends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tclassName?: string;\n\ttextToCopy?: string;\n\tsuccessDuration?: number;\n}\n\nfunction CopyButton({\n\tclassName,\n\ttextToCopy = \"https://gemini.google.com/\",\n\tsuccessDuration = 2000,\n\t...props\n}: CopyButtonProps) {\n\tconst [isCopied, setIsCopied] = useState(false);\n\n\tasync function handleCopy() {\n\t\ttry {\n\t\t\t// Use modern Clipboard API if available\n\t\t\tif (navigator.clipboard && window.isSecureContext) {\n\t\t\t\tawait navigator.clipboard.writeText(textToCopy);\n\t\t\t\tsetIsCopied(true);\n\t\t\t\tsetTimeout(() => setIsCopied(false), successDuration);\n\t\t\t} else {\n\t\t\t\t// Fallback for older browsers\n\t\t\t\tconst textArea = document.createElement(\"textarea\");\n\t\t\t\ttextArea.value = textToCopy;\n\t\t\t\ttextArea.style.position = \"fixed\";\n\t\t\t\ttextArea.style.top = \"-9999px\";\n\t\t\t\ttextArea.style.left = \"-9999px\";\n\t\t\t\tdocument.body.appendChild(textArea);\n\t\t\t\ttextArea.focus();\n\t\t\t\ttextArea.select();\n\t\t\t\tconst successful = document.execCommand(\"copy\");\n\t\t\t\tif (successful) {\n\t\t\t\t\tsetIsCopied(true);\n\t\t\t\t\tsetTimeout(() => setIsCopied(false), successDuration);\n\t\t\t\t}\n\t\t\t\tdocument.body.removeChild(textArea);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error(\"Failed to copy text:\", err);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Button\n\t\t\tclassName={cn(\n\t\t\t\t\"min-w-40 relative group transition-all duration-300 ease-in-out\",\n\t\t\t\t\"bg-emerald-50 dark:bg-emerald-950\",\n\t\t\t\t\"hover:bg-emerald-100 dark:hover:bg-emerald-900\",\n\t\t\t\t\"text-emerald-600 dark:text-emerald-300\",\n\t\t\t\t\"border border-emerald-200 dark:border-emerald-800\",\n\t\t\t\t// When isCopied is true, apply the animation class\n\t\t\t\tisCopied && \"bg-emerald-100 dark:bg-emerald-900 animate-jiggle\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={handleCopy}\n\t\t\t{...props}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"w-full flex items-center justify-center gap-2\",\n\t\t\t\t\t\"transition-transform duration-300\",\n\t\t\t\t\tisCopied && \"scale-105\",\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{isCopied ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Check className=\"w-4 h-4 text-emerald-500 transition-all duration-300\" />\n\t\t\t\t\t\t<span className=\"font-semibold\">Copied!</span>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Copy\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"w-4 h-4 transition-transform duration-200\",\n\t\t\t\t\t\t\t\t\"group-hover:scale-110 group-hover:rotate-6\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span>Copy code</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Button>\n\t);\n}\n\n// --- Main App Component to display the button ---\n\nexport default function CopyButtonView() {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center p-4 font-sans\">\n\t\t\t{/* Injecting keyframe animation directly with a style tag */}\n\t\t\t<style>\n\t\t\t\t{`\n          @keyframes jiggle {\n            0%, 100% { transform: translateX(0); }\n            25% { transform: translateX(-2px) rotate(-1deg); }\n            75% { transform: translateX(2px) rotate(1deg); }\n          }\n          .animate-jiggle {\n            animation: jiggle 0.4s ease-in-out;\n          }\n        `}\n\t\t\t</style>\n\t\t\t<div className=\"text-center mb-8\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-white mb-2\">Copy Button</h1>\n\t\t\t\t<p className=\"text-gray-400\">\n\t\t\t\t\tClick the button below to copy the text to your clipboard.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<CopyButton />\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "button.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\n\n// Utility function to merge Tailwind CSS classes conditionally.\n// This is a simplified version of the 'clsx' or 'tailwind-merge' library.\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n\treturn classes.filter(Boolean).join(\" \");\n};\n\n// --- Icon Components (replaces lucide-react) ---\n\n// Check icon component using inline SVG\nconst Check = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\n// Copy icon component using inline SVG\nconst Copy = ({ className }: { className?: string }) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" />\n\t\t<path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n\t</svg>\n);\n\n// --- UI Components (replaces custom component library) ---\n\n// A simple, reusable Button component.\nconst Button = React.forwardRef<\n\tHTMLButtonElement,\n\tReact.ButtonHTMLAttributes<HTMLButtonElement> & {\n\t\tclassName?: string;\n\t}\n>(({ className, children, ...props }, ref) => {\n\treturn (\n\t\t<button\n\t\t\tclassName={cn(\n\t\t\t\t\"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n\t\t\t\t\"h-10 px-4 py-2\", // Default size\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tref={ref}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n});\nButton.displayName = \"Button\";\n\n// --- The Main Button Component from your request ---\n\ninterface CopyButtonProps\n\textends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tclassName?: string;\n\ttextToCopy?: string;\n\tsuccessDuration?: number;\n}\n\nfunction CopyButton({\n\tclassName,\n\ttextToCopy = \"https://gemini.google.com/\",\n\tsuccessDuration = 2000,\n\t...props\n}: CopyButtonProps) {\n\tconst [isCopied, setIsCopied] = useState(false);\n\n\tasync function handleCopy() {\n\t\ttry {\n\t\t\t// Use modern Clipboard API if available\n\t\t\tif (navigator.clipboard && window.isSecureContext) {\n\t\t\t\tawait navigator.clipboard.writeText(textToCopy);\n\t\t\t\tsetIsCopied(true);\n\t\t\t\tsetTimeout(() => setIsCopied(false), successDuration);\n\t\t\t} else {\n\t\t\t\t// Fallback for older browsers\n\t\t\t\tconst textArea = document.createElement(\"textarea\");\n\t\t\t\ttextArea.value = textToCopy;\n\t\t\t\ttextArea.style.position = \"fixed\";\n\t\t\t\ttextArea.style.top = \"-9999px\";\n\t\t\t\ttextArea.style.left = \"-9999px\";\n\t\t\t\tdocument.body.appendChild(textArea);\n\t\t\t\ttextArea.focus();\n\t\t\t\ttextArea.select();\n\t\t\t\tconst successful = document.execCommand(\"copy\");\n\t\t\t\tif (successful) {\n\t\t\t\t\tsetIsCopied(true);\n\t\t\t\t\tsetTimeout(() => setIsCopied(false), successDuration);\n\t\t\t\t}\n\t\t\t\tdocument.body.removeChild(textArea);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error(\"Failed to copy text:\", err);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Button\n\t\t\tclassName={cn(\n\t\t\t\t\"min-w-40 relative group transition-all duration-300 ease-in-out\",\n\t\t\t\t\"bg-emerald-50 dark:bg-emerald-950\",\n\t\t\t\t\"hover:bg-emerald-100 dark:hover:bg-emerald-900\",\n\t\t\t\t\"text-emerald-600 dark:text-emerald-300\",\n\t\t\t\t\"border border-emerald-200 dark:border-emerald-800\",\n\t\t\t\t// When isCopied is true, apply the animation class\n\t\t\t\tisCopied && \"bg-emerald-100 dark:bg-emerald-900 animate-jiggle\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={handleCopy}\n\t\t\t{...props}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"w-full flex items-center justify-center gap-2\",\n\t\t\t\t\t\"transition-transform duration-300\",\n\t\t\t\t\tisCopied && \"scale-105\",\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{isCopied ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Check className=\"w-4 h-4 text-emerald-500 transition-all duration-300\" />\n\t\t\t\t\t\t<span className=\"font-semibold\">Copied!</span>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Copy\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"w-4 h-4 transition-transform duration-200\",\n\t\t\t\t\t\t\t\t\"group-hover:scale-110 group-hover:rotate-6\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span>Copy code</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Button>\n\t);\n}\n\n// --- Main App Component to display the button ---\n\nexport default function CopyButtonView() {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center p-4 font-sans\">\n\t\t\t{/* Injecting keyframe animation directly with a style tag */}\n\t\t\t<style>\n\t\t\t\t{`\n          @keyframes jiggle {\n            0%, 100% { transform: translateX(0); }\n            25% { transform: translateX(-2px) rotate(-1deg); }\n            75% { transform: translateX(2px) rotate(1deg); }\n          }\n          .animate-jiggle {\n            animation: jiggle 0.4s ease-in-out;\n          }\n        `}\n\t\t\t</style>\n\t\t\t<div className=\"text-center mb-8\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-white mb-2\">Copy Button</h1>\n\t\t\t\t<p className=\"text-gray-400\">\n\t\t\t\t\tClick the button below to copy the text to your clipboard.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<CopyButton />\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "button2.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport {\n\ttype ButtonHTMLAttributes,\n\tforwardRef,\n\ttype ReactNode,\n\tuseState,\n} from \"react\";\n\n// Utility function to merge Tailwind CSS classes conditionally.\nconst cn = (\n\t...classes: (string | boolean | undefined | null | Record<string, boolean>)[]\n): string => {\n\treturn classes\n\t\t.map((cls) => {\n\t\t\tif (typeof cls === \"string\") return cls;\n\t\t\tif (typeof cls === \"object\" && cls !== null) {\n\t\t\t\treturn Object.entries(cls)\n\t\t\t\t\t.filter(([, condition]) => condition)\n\t\t\t\t\t.map(([className]) => className)\n\t\t\t\t\t.join(\" \");\n\t\t\t}\n\t\t\treturn \"\";\n\t\t})\n\t\t.filter(Boolean)\n\t\t.join(\" \");\n};\n\n// --- Icon Components (replaces lucide-react) ---\n\n// Correctly define the type for IconProps\ntype IconProps = {\n\tclassName?: string;\n};\n\nconst Check = ({ className }: IconProps) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M20 6 9 17l-5-5\" />\n\t</svg>\n);\n\nconst X = ({ className }: IconProps) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M18 6 6 18\" />\n\t\t<path d=\"m6 6 12 12\" />\n\t</svg>\n);\n\nconst Download = ({ className }: IconProps) => (\n\t<svg\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\twidth=\"24\"\n\t\theight=\"24\"\n\t\tviewBox=\"0 0 24 24\"\n\t\tfill=\"none\"\n\t\tstroke=\"currentColor\"\n\t\tstrokeWidth=\"2\"\n\t\tstrokeLinecap=\"round\"\n\t\tstrokeLinejoin=\"round\"\n\t\tclassName={className}\n\t>\n\t\t<path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n\t\t<polyline points=\"7 10 12 15 17 10\" />\n\t\t<line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\" />\n\t</svg>\n);\n\n// --- UI Components ---\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n\tchildren: ReactNode;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, children, ...props }, ref) => {\n\t\treturn (\n\t\t\t<button\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border\",\n\t\t\t\t\t\"h-10 px-4 py-2\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\tref={ref}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</button>\n\t\t);\n\t},\n);\nButton.displayName = \"Button\";\n\n// --- The Main Reusable Processing Button Component ---\n\ntype State = \"idle\" | \"processing\" | \"success\" | \"error\";\n\ninterface ProcessingButtonProps\n\textends ButtonHTMLAttributes<HTMLButtonElement> {\n\tonProcess: () => Promise<boolean>;\n\tchildren: ReactNode;\n}\n\nconst ProcessingButton: React.FC<ProcessingButtonProps> = ({\n\tclassName,\n\tonProcess,\n\tchildren,\n\t...props\n}) => {\n\tconst [state, setState] = useState<State>(\"idle\");\n\tconst [isScaling, setIsScaling] = useState(false);\n\n\tasync function handleClick() {\n\t\tif (state !== \"idle\") return;\n\n\t\tsetState(\"processing\");\n\n\t\ttry {\n\t\t\tconst success = await onProcess();\n\t\t\tsetState(success ? \"success\" : \"error\");\n\t\t} catch (error) {\n\t\t\tconsole.error(\"An error occurred during the process:\", error);\n\t\t\tsetState(\"error\");\n\t\t}\n\n\t\tsetIsScaling(true);\n\n\t\t// Reset the button to its idle state after a delay\n\t\tsetTimeout(() => {\n\t\t\tsetState(\"idle\");\n\t\t\tsetIsScaling(false);\n\t\t}, 2000);\n\t}\n\n\tconst isProcessing = state === \"processing\";\n\n\treturn (\n\t\t<Button\n\t\t\tclassName={cn(\n\t\t\t\t\"min-w-40 relative group overflow-hidden\",\n\t\t\t\t\"transition-all duration-300\",\n\t\t\t\t{\n\t\t\t\t\t\"bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-800/30 text-blue-700 dark:text-blue-200 border-blue-200 dark:border-blue-700\":\n\t\t\t\t\t\tstate === \"idle\" || state === \"processing\",\n\t\t\t\t\t\"bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-200 border-green-200 dark:border-green-700\":\n\t\t\t\t\t\tstate === \"success\",\n\t\t\t\t\t\"bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-200 border-red-200 dark:border-red-700\":\n\t\t\t\t\t\tstate === \"error\",\n\t\t\t\t},\n\t\t\t\tisProcessing && \"cursor-wait\",\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\tonClick={handleClick}\n\t\t\tdisabled={isProcessing}\n\t\t\t{...props}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t\"relative w-full flex items-center justify-center gap-2\",\n\t\t\t\t\tisScaling && \"animate-scale-in-out\",\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{state === \"idle\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Download className=\"w-4 h-4 transition-transform duration-200 group-hover:scale-110\" />\n\t\t\t\t\t\t<span>{children}</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{state === \"processing\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Download className=\"w-4 h-4 animate-bounce\" />\n\t\t\t\t\t\t<span>Processing...</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{state === \"success\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Check className=\"w-4 h-4\" />\n\t\t\t\t\t\t<span className=\"font-semibold\">Complete!</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t\t{state === \"error\" && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<X className=\"w-4 h-4\" />\n\t\t\t\t\t\t<span className=\"font-semibold\">Failed</span>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Button>\n\t);\n};\n\n// --- Main App Component to display the button ---\n\nexport default function CopyButtonView2() {\n\t// EXAMPLE: Define the asynchronous task you want the button to perform.\n\tconst handleDownload = async (): Promise<boolean> => {\n\t\tconsole.log(\"Starting download process...\");\n\t\tawait new Promise((resolve) => setTimeout(resolve, 2000));\n\n\t\tconst isSuccess = Math.random() > 0.5;\n\t\tif (isSuccess) {\n\t\t\tconsole.log(\"Download successful!\");\n\t\t\treturn true;\n\t\t} else {\n\t\t\tconsole.log(\"Download failed.\");\n\t\t\treturn false;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center p-4 font-sans\">\n\t\t\t<style>\n\t\t\t\t{`\n          @keyframes scale-in-out {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.1); }\n            100% { transform: scale(1); }\n          }\n          .animate-scale-in-out {\n            animation: scale-in-out 300ms ease-in-out;\n          }\n        `}\n\t\t\t</style>\n\t\t\t<div className=\"text-center mb-8\">\n\t\t\t\t<h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n\t\t\t\t\tProfessional Processing Button\n\t\t\t\t</h1>\n\t\t\t\t<p className=\"text-gray-600 dark:text-gray-400\">\n\t\t\t\t\tThis button is now reusable, type-safe, and ready for any project.\n\t\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<ProcessingButton onProcess={handleDownload}>\n\t\t\t\tDownload File\n\t\t\t</ProcessingButton>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}