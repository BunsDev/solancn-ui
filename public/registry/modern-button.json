{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modern-button",
  "title": "Modern Button",
  "description": "A minimalistic modern button component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "modern-button.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\n\n// Utility function to merge Tailwind CSS classes conditionally.\n// This is a simplified version of the 'clsx' or 'tailwind-merge' library.\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n  return classes.filter(Boolean).join(\" \");\n};\n\n// --- Icon Components (replaces lucide-react) ---\n\n// Check icon component using inline SVG\nconst Check = ({ className }: { className?: string }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <path d=\"M20 6 9 17l-5-5\" />\n  </svg>\n);\n\n// Copy icon component using inline SVG\nconst Copy = ({ className }: { className?: string }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" />\n    <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n  </svg>\n);\n\n// --- UI Components (replaces custom component library) ---\n\n// A simple, reusable Button component.\nconst Button = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    className?: string;\n  }\n>(({ className, children, ...props }, ref) => {\n  return (\n    <button\n      className={cn(\n        \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n        \"h-10 px-4 py-2\", // Default size\n        className\n      )}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n});\nButton.displayName = \"Button\";\n\n// --- The Main Button Component from your request ---\n\ninterface CopyButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string;\n  textToCopy?: string;\n  successDuration?: number;\n}\n\nfunction CopyButton({\n  className,\n  textToCopy = \"https://gemini.google.com/\",\n  successDuration = 2000,\n  ...props\n}: CopyButtonProps) {\n  const [isCopied, setIsCopied] = useState(false);\n\n  async function handleCopy() {\n    try {\n      // Use modern Clipboard API if available\n      if (navigator.clipboard && window.isSecureContext) {\n        await navigator.clipboard.writeText(textToCopy);\n        setIsCopied(true);\n        setTimeout(() => setIsCopied(false), successDuration);\n      } else {\n        // Fallback for older browsers\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = textToCopy;\n        textArea.style.position = \"fixed\";\n        textArea.style.top = \"-9999px\";\n        textArea.style.left = \"-9999px\";\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        const successful = document.execCommand(\"copy\");\n        if (successful) {\n          setIsCopied(true);\n          setTimeout(() => setIsCopied(false), successDuration);\n        }\n        document.body.removeChild(textArea);\n      }\n    } catch (err) {\n      console.error(\"Failed to copy text:\", err);\n    }\n  }\n\n  return (\n    <Button\n      className={cn(\n        \"min-w-40 relative group transition-all duration-300 ease-in-out\",\n        \"bg-emerald-50 dark:bg-emerald-950\",\n        \"hover:bg-emerald-100 dark:hover:bg-emerald-900\",\n        \"text-emerald-600 dark:text-emerald-300\",\n        \"border border-emerald-200 dark:border-emerald-800\",\n        // When isCopied is true, apply the animation class\n        isCopied && \"bg-emerald-100 dark:bg-emerald-900 animate-jiggle\",\n        className\n      )}\n      onClick={handleCopy}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"w-full flex items-center justify-center gap-2\",\n          \"transition-transform duration-300\",\n          isCopied && \"scale-105\"\n        )}\n      >\n        {isCopied ? (\n          <>\n            <Check className=\"w-4 h-4 text-emerald-500 transition-all duration-300\" />\n            <span className=\"font-semibold\">Copied!</span>\n          </>\n        ) : (\n          <>\n            <Copy\n              className={cn(\n                \"w-4 h-4 transition-transform duration-200\",\n                \"group-hover:scale-110 group-hover:rotate-6\"\n              )}\n            />\n            <span>Copy code</span>\n          </>\n        )}\n      </div>\n    </Button>\n  );\n}\n\n// --- Main App Component to display the button ---\n\nexport default function CopyButtonView() {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-4 font-sans\">\n      {/* Injecting keyframe animation directly with a style tag */}\n      <style>\n        {`\n          @keyframes jiggle {\n            0%, 100% { transform: translateX(0); }\n            25% { transform: translateX(-2px) rotate(-1deg); }\n            75% { transform: translateX(2px) rotate(1deg); }\n          }\n          .animate-jiggle {\n            animation: jiggle 0.4s ease-in-out;\n          }\n        `}\n      </style>\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-white mb-2\">\n           Copy Button\n        </h1>\n        <p className=\"text-gray-400\">\n          Click the button below to copy the text to your clipboard.\n        </p>\n      </div>\n      <CopyButton />\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "button.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\n\n// Utility function to merge Tailwind CSS classes conditionally.\n// This is a simplified version of the 'clsx' or 'tailwind-merge' library.\nconst cn = (...classes: (string | boolean | undefined | null)[]): string => {\n  return classes.filter(Boolean).join(\" \");\n};\n\n// --- Icon Components (replaces lucide-react) ---\n\n// Check icon component using inline SVG\nconst Check = ({ className }: { className?: string }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <path d=\"M20 6 9 17l-5-5\" />\n  </svg>\n);\n\n// Copy icon component using inline SVG\nconst Copy = ({ className }: { className?: string }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\" />\n    <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\" />\n  </svg>\n);\n\n// --- UI Components (replaces custom component library) ---\n\n// A simple, reusable Button component.\nconst Button = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    className?: string;\n  }\n>(({ className, children, ...props }, ref) => {\n  return (\n    <button\n      className={cn(\n        \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n        \"h-10 px-4 py-2\", // Default size\n        className\n      )}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n});\nButton.displayName = \"Button\";\n\n// --- The Main Button Component from your request ---\n\ninterface CopyButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string;\n  textToCopy?: string;\n  successDuration?: number;\n}\n\nfunction CopyButton({\n  className,\n  textToCopy = \"https://gemini.google.com/\",\n  successDuration = 2000,\n  ...props\n}: CopyButtonProps) {\n  const [isCopied, setIsCopied] = useState(false);\n\n  async function handleCopy() {\n    try {\n      // Use modern Clipboard API if available\n      if (navigator.clipboard && window.isSecureContext) {\n        await navigator.clipboard.writeText(textToCopy);\n        setIsCopied(true);\n        setTimeout(() => setIsCopied(false), successDuration);\n      } else {\n        // Fallback for older browsers\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = textToCopy;\n        textArea.style.position = \"fixed\";\n        textArea.style.top = \"-9999px\";\n        textArea.style.left = \"-9999px\";\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        const successful = document.execCommand(\"copy\");\n        if (successful) {\n          setIsCopied(true);\n          setTimeout(() => setIsCopied(false), successDuration);\n        }\n        document.body.removeChild(textArea);\n      }\n    } catch (err) {\n      console.error(\"Failed to copy text:\", err);\n    }\n  }\n\n  return (\n    <Button\n      className={cn(\n        \"min-w-40 relative group transition-all duration-300 ease-in-out\",\n        \"bg-emerald-50 dark:bg-emerald-950\",\n        \"hover:bg-emerald-100 dark:hover:bg-emerald-900\",\n        \"text-emerald-600 dark:text-emerald-300\",\n        \"border border-emerald-200 dark:border-emerald-800\",\n        // When isCopied is true, apply the animation class\n        isCopied && \"bg-emerald-100 dark:bg-emerald-900 animate-jiggle\",\n        className\n      )}\n      onClick={handleCopy}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"w-full flex items-center justify-center gap-2\",\n          \"transition-transform duration-300\",\n          isCopied && \"scale-105\"\n        )}\n      >\n        {isCopied ? (\n          <>\n            <Check className=\"w-4 h-4 text-emerald-500 transition-all duration-300\" />\n            <span className=\"font-semibold\">Copied!</span>\n          </>\n        ) : (\n          <>\n            <Copy\n              className={cn(\n                \"w-4 h-4 transition-transform duration-200\",\n                \"group-hover:scale-110 group-hover:rotate-6\"\n              )}\n            />\n            <span>Copy code</span>\n          </>\n        )}\n      </div>\n    </Button>\n  );\n}\n\n// --- Main App Component to display the button ---\n\nexport default function CopyButtonView() {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-4 font-sans\">\n      {/* Injecting keyframe animation directly with a style tag */}\n      <style>\n        {`\n          @keyframes jiggle {\n            0%, 100% { transform: translateX(0); }\n            25% { transform: translateX(-2px) rotate(-1deg); }\n            75% { transform: translateX(2px) rotate(1deg); }\n          }\n          .animate-jiggle {\n            animation: jiggle 0.4s ease-in-out;\n          }\n        `}\n      </style>\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-white mb-2\">\n           Copy Button\n        </h1>\n        <p className=\"text-gray-400\">\n          Click the button below to copy the text to your clipboard.\n        </p>\n      </div>\n      <CopyButton />\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "button2.tsx",
      "content": "\"use client\";\n\nimport React, {\n  useState,\n  forwardRef,\n  ButtonHTMLAttributes,\n  ReactNode,\n} from \"react\";\n\n// Utility function to merge Tailwind CSS classes conditionally.\nconst cn = (\n  ...classes: (string | boolean | undefined | null | Record<string, boolean>)[]\n): string => {\n  return classes\n    .map((cls) => {\n      if (typeof cls === \"string\") return cls;\n      if (typeof cls === \"object\" && cls !== null) {\n        return Object.entries(cls)\n          .filter(([, condition]) => condition)\n          .map(([className]) => className)\n          .join(\" \");\n      }\n      return \"\";\n    })\n    .filter(Boolean)\n    .join(\" \");\n};\n\n// --- Icon Components (replaces lucide-react) ---\n\n// Correctly define the type for IconProps\ntype IconProps = {\n  className?: string;\n};\n\nconst Check = ({ className }: IconProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <path d=\"M20 6 9 17l-5-5\" />\n  </svg>\n);\n\nconst X = ({ className }: IconProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <path d=\"M18 6 6 18\" />\n    <path d=\"m6 6 12 12\" />\n  </svg>\n);\n\nconst Download = ({ className }: IconProps) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={className}\n  >\n    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" />\n    <polyline points=\"7 10 12 15 17 10\" />\n    <line x1=\"12\" x2=\"12\" y1=\"15\" y2=\"3\" />\n  </svg>\n);\n\n// --- UI Components ---\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  children: ReactNode;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <button\n        className={cn(\n          \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border\",\n          \"h-10 px-4 py-2\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </button>\n    );\n  }\n);\nButton.displayName = \"Button\";\n\n// --- The Main Reusable Processing Button Component ---\n\ntype State = \"idle\" | \"processing\" | \"success\" | \"error\";\n\ninterface ProcessingButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement> {\n  onProcess: () => Promise<boolean>;\n  children: ReactNode;\n}\n\nconst ProcessingButton: React.FC<ProcessingButtonProps> = ({\n  className,\n  onProcess,\n  children,\n  ...props\n}) => {\n  const [state, setState] = useState<State>(\"idle\");\n  const [isScaling, setIsScaling] = useState(false);\n\n  async function handleClick() {\n    if (state !== \"idle\") return;\n\n    setState(\"processing\");\n\n    try {\n      const success = await onProcess();\n      setState(success ? \"success\" : \"error\");\n    } catch (error) {\n      console.error(\"An error occurred during the process:\", error);\n      setState(\"error\");\n    }\n\n    setIsScaling(true);\n\n    // Reset the button to its idle state after a delay\n    setTimeout(() => {\n      setState(\"idle\");\n      setIsScaling(false);\n    }, 2000);\n  }\n\n  const isProcessing = state === \"processing\";\n\n  return (\n    <Button\n      className={cn(\n        \"min-w-40 relative group overflow-hidden\",\n        \"transition-all duration-300\",\n        {\n          \"bg-blue-50 dark:bg-blue-900/20 hover:bg-blue-100 dark:hover:bg-blue-800/30 text-blue-700 dark:text-blue-200 border-blue-200 dark:border-blue-700\":\n            state === \"idle\" || state === \"processing\",\n          \"bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-200 border-green-200 dark:border-green-700\":\n            state === \"success\",\n          \"bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-200 border-red-200 dark:border-red-700\":\n            state === \"error\",\n        },\n        isProcessing && \"cursor-wait\",\n        className\n      )}\n      onClick={handleClick}\n      disabled={isProcessing}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"relative w-full flex items-center justify-center gap-2\",\n          isScaling && \"animate-scale-in-out\"\n        )}\n      >\n        {state === \"idle\" && (\n          <>\n            <Download className=\"w-4 h-4 transition-transform duration-200 group-hover:scale-110\" />\n            <span>{children}</span>\n          </>\n        )}\n        {state === \"processing\" && (\n          <>\n            <Download className=\"w-4 h-4 animate-bounce\" />\n            <span>Processing...</span>\n          </>\n        )}\n        {state === \"success\" && (\n          <>\n            <Check className=\"w-4 h-4\" />\n            <span className=\"font-semibold\">Complete!</span>\n          </>\n        )}\n        {state === \"error\" && (\n          <>\n            <X className=\"w-4 h-4\" />\n            <span className=\"font-semibold\">Failed</span>\n          </>\n        )}\n      </div>\n    </Button>\n  );\n};\n\n// --- Main App Component to display the button ---\n\nexport default function CopyButtonView2() {\n  // EXAMPLE: Define the asynchronous task you want the button to perform.\n  const handleDownload = async (): Promise<boolean> => {\n    console.log(\"Starting download process...\");\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n\n    const isSuccess = Math.random() > 0.5;\n    if (isSuccess) {\n      console.log(\"Download successful!\");\n      return true;\n    } else {\n      console.log(\"Download failed.\");\n      return false;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center p-4 font-sans\">\n      <style>\n        {`\n          @keyframes scale-in-out {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.1); }\n            100% { transform: scale(1); }\n          }\n          .animate-scale-in-out {\n            animation: scale-in-out 300ms ease-in-out;\n          }\n        `}\n      </style>\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          Professional Processing Button\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          This button is now reusable, type-safe, and ready for any project.\n        </p>\n      </div>\n\n      <ProcessingButton onProcess={handleDownload}>\n        Download File\n      </ProcessingButton>\n    </div>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}