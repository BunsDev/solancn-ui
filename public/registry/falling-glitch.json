{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "falling-glitch",
  "title": "Falling Glitch",
  "description": "A minimalistic falling glitch component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "falling-glitch.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\n\nconst FallingGlitch = ({\n\tglitchColors = [\"#ff7cce\", \"#7cf0ff\", \"#fcf07c\", \"#8E44AD\", \"#3498DB\"],\n\tfontSize = 14,\n\tbackgroundColor = \"#080A12\",\n\tglitchSpeed = 50,\n\tglitchIntensity = 0.05,\n\tfallSpeed = 0.75,\n\touterVignette = true,\n\tchildren,\n}: {\n\tglitchColors?: string[];\n\tfontSize?: number;\n\tbackgroundColor?: string;\n\tglitchSpeed?: number;\n\tglitchIntensity?: number;\n\tfallSpeed?: number;\n\touterVignette?: boolean;\n\tchildren?: React.ReactNode;\n}) => {\n\tconst canvasRef = useRef<HTMLCanvasElement | null>(null);\n\tconst containerRef = useRef<HTMLDivElement | null>(null);\n\tconst animationFrameId = useRef<number | null>(null);\n\n\tconst grid = useRef({ columns: 0, rows: 0, charWidth: 0, charHeight: 0 });\n\tconst letters = useRef<\n\t\tArray<{\n\t\t\tchar: string;\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t\tcolor: string;\n\t\t}>\n\t>([]);\n\tconst lastGlitchTime = useRef(0);\n\n\tconst characterSet = useMemo(() => '.:*+=#%@\",', []);\n\tconst getRandomChar = useCallback(\n\t\t() => characterSet[Math.floor(Math.random() * characterSet.length)],\n\t\t[characterSet],\n\t);\n\tconst getRandomColor = useCallback(\n\t\t() => glitchColors[Math.floor(Math.random() * glitchColors.length)],\n\t\t[glitchColors],\n\t);\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current;\n\t\tconst container = containerRef.current;\n\t\tif (!canvas || !container) return;\n\n\t\tconst ctx = canvas.getContext(\"2d\");\n\t\tif (!ctx) return;\n\n\t\tlet canvasWidth = 0;\n\t\tlet canvasHeight = 0;\n\n\t\tconst setup = () => {\n\t\t\tif (animationFrameId.current)\n\t\t\t\tcancelAnimationFrame(animationFrameId.current);\n\n\t\t\tconst dpr = window.devicePixelRatio || 1;\n\t\t\tconst rect = container.getBoundingClientRect();\n\t\t\tcanvasWidth = rect.width;\n\t\t\tcanvasHeight = rect.height;\n\t\t\tcanvas.width = canvasWidth * dpr;\n\t\t\tcanvas.height = canvasHeight * dpr;\n\t\t\tcanvas.style.width = `${canvasWidth}px`;\n\t\t\tcanvas.style.height = `${canvasHeight}px`;\n\t\t\tctx.scale(dpr, dpr);\n\n\t\t\tctx.font = `${fontSize}px monospace`;\n\t\t\tconst charMetrics = ctx.measureText(\"M\");\n\t\t\tgrid.current = {\n\t\t\t\tcolumns: Math.floor(canvasWidth / charMetrics.width),\n\t\t\t\trows: Math.floor(canvasHeight / (fontSize * 1.2)),\n\t\t\t\tcharWidth: charMetrics.width,\n\t\t\t\tcharHeight: fontSize * 1.2,\n\t\t\t};\n\n\t\t\tconst extendedRows = grid.current.rows * 2;\n\t\t\tconst totalLetters = grid.current.columns * extendedRows;\n\t\t\tletters.current = Array.from({ length: totalLetters }, (_, i) => {\n\t\t\t\tconst col = i % grid.current.columns;\n\t\t\t\tconst row = Math.floor(i / grid.current.columns);\n\t\t\t\treturn {\n\t\t\t\t\tchar: getRandomChar(),\n\t\t\t\t\tx: col * grid.current.charWidth,\n\t\t\t\t\ty:\n\t\t\t\t\t\trow * grid.current.charHeight -\n\t\t\t\t\t\tgrid.current.rows * grid.current.charHeight,\n\t\t\t\t\tcolor: getRandomColor(),\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tanimationFrameId.current = requestAnimationFrame(animate);\n\t\t};\n\n\t\tconst animate = (timestamp: number) => {\n\t\t\tanimationFrameId.current = requestAnimationFrame(animate);\n\n\t\t\tif (timestamp - lastGlitchTime.current > glitchSpeed) {\n\t\t\t\tlastGlitchTime.current = timestamp;\n\t\t\t\tconst updateCount = Math.floor(\n\t\t\t\t\tletters.current.length * glitchIntensity,\n\t\t\t\t);\n\t\t\t\tfor (let i = 0; i < updateCount; i++) {\n\t\t\t\t\tconst index = Math.floor(Math.random() * letters.current.length);\n\t\t\t\t\tif (letters.current[index]) {\n\t\t\t\t\t\tletters.current[index].char = getRandomChar();\n\t\t\t\t\t\tletters.current[index].color = getRandomColor();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst totalFieldHeight = grid.current.rows * grid.current.charHeight * 2;\n\t\t\tletters.current.forEach((letter) => {\n\t\t\t\tletter.y += fallSpeed;\n\t\t\t\tif (letter.y > canvasHeight) {\n\t\t\t\t\tletter.y -= totalFieldHeight;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\t\tctx.font = `${fontSize}px monospace`;\n\t\t\tctx.textBaseline = \"top\";\n\n\t\t\tletters.current.forEach((letter) => {\n\t\t\t\tctx.fillStyle = letter.color;\n\t\t\t\tctx.fillText(letter.char, letter.x, letter.y);\n\t\t\t});\n\t\t};\n\n\t\tlet resizeTimeout: NodeJS.Timeout;\n\t\tconst handleResize = () => {\n\t\t\tclearTimeout(resizeTimeout);\n\t\t\tresizeTimeout = setTimeout(setup, 150);\n\t\t};\n\t\twindow.addEventListener(\"resize\", handleResize);\n\t\tsetup();\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener(\"resize\", handleResize);\n\t\t\tif (animationFrameId.current) {\n\t\t\t\tcancelAnimationFrame(animationFrameId.current);\n\t\t\t}\n\t\t};\n\t}, [\n\t\tglitchColors,\n\t\tfontSize,\n\t\tbackgroundColor,\n\t\tglitchSpeed,\n\t\tglitchIntensity,\n\t\tfallSpeed,\n\t\tgetRandomChar,\n\t\tgetRandomColor,\n\t]);\n\n\treturn (\n\t\t<div ref={containerRef} className=\"relative w-full h-full bg-black\">\n\t\t\t<canvas ref={canvasRef} className=\"absolute inset-0 z-0\" />\n\t\t\t{outerVignette && (\n\t\t\t\t<div className=\"absolute inset-0 z-0 pointer-events-none bg-[radial-gradient(circle,_transparent_70%,_black_100%)]\"></div>\n\t\t\t)}\n\t\t\t<div className=\"relative z-10 flex items-center justify-center w-full h-full\">\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default function FallingGlitchAn() {\n\treturn (\n\t\t<div className=\"relative w-full h-screen overflow-hidden\">\n\t\t\t<style>\n\t\t\t\t{`\n         @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400..700&display=swap');\n        `}\n\t\t\t</style>\n\t\t\t<FallingGlitch>\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<h1\n\t\t\t\t\t\tclassName=\"text-7xl md:text-9xl font-bold text-white\"\n\t\t\t\t\t\tstyle={{ fontFamily: \"'Dancing Script', cursive\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\tSolancn UI\n\t\t\t\t\t</h1>\n\t\t\t\t</div>\n\t\t\t</FallingGlitch>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:ui"
    }
  ]
}