{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "glitchvault",
  "title": "Glitchvault",
  "description": "A minimalistic glitchvault component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "glitchvault.tsx",
      "content": "import GlitchVault from \"./glitchvault\";\nexport default function GlitchVaultProfile() {\n  return (\n    <main className=\"w-full  flex flex-col items-center justify-center p-4 relative overflow-hidden\">\n      <div className=\"absolute inset-0\"></div>\n      <GlitchVault\n        className=\"w-full max-w-sm backdrop-blur-xl bg-white/20 dark:bg-black/20 border border-white/30 dark:border-white/10 rounded-2xl shadow-2xl shadow-cyan-500/10 relative z-10\"\n        glitchColor=\"#0AF0F0\"\n        glitchRadius={120}\n      >\n        <div className=\"p-8 text-center relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-white/5 to-transparent rounded-2xl\"></div>\n          <div className=\"flex justify-center items-center mb-8 relative z-10\">\n            <div className=\"w-28 h-28 bg-gradient-to-br from-cyan-400/20 to-blue-500/20 backdrop-blur-sm rounded-full flex items-center justify-center border border-white/20 shadow-lg shadow-cyan-500/20 group cursor-pointer hover:scale-105 transition-all duration-500\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-cyan-500/10 to-blue-600/10 rounded-full flex items-center justify-center border border-white/10\">\n                <span className=\"text-cyan-600 dark:text-cyan-300 text-sm font-medium opacity-70 group-hover:opacity-100 group-hover:scale-110 transition-all duration-300\">\n                  Hover me\n                </span>\n              </div>\n            </div>\n          </div>\n          <h2 className=\"text-3xl font-bold bg-gradient-to-r from-slate-800 via-slate-700 to-cyan-700 dark:from-white dark:via-slate-100 dark:to-cyan-300 bg-clip-text text-transparent mb-2 tracking-wide relative z-10\">\n            Aura\n          </h2>\n          <p className=\"text-slate-600/80 dark:text-slate-300/80 mb-8 text-sm font-medium relative z-10\">\n            UI/UX Designer & Developer\n          </p>\n          <button className=\"bg-gradient-to-r from-cyan-500/10 via-blue-500/10 to-cyan-500/10 backdrop-blur-sm border border-cyan-400/30 text-cyan-700 dark:text-cyan-300 px-8 py-3 rounded-full hover:from-cyan-500/20 hover:via-blue-500/20 hover:to-cyan-500/20 hover:border-cyan-400/50 hover:shadow-lg hover:shadow-cyan-500/25 transition-all duration-300 font-medium relative z-10 hover:scale-105\">\n            View Profile\n          </button>\n        </div>\n      </GlitchVault>\n    </main>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "glitchvault-card.tsx",
      "content": "import GlitchVault from \"./glitchvault\";\n\nexport default function GlitchVaultCard() {\n  return (\n    <GlitchVault\n      className=\"w-full max-w-md border border-slate-200 dark:border-slate-800 rounded-xl bg-white/50 dark:bg-slate-900/50 backdrop-blur-sm\"\n      glitchColor=\"#FF6B6B\"\n      glitchRadius={80}\n    >\n      <div className=\"p-6\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-red-400 to-pink-500 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white font-bold text-lg\">ðŸš€</span>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-slate-800 dark:text-slate-100\">\n              Project Launch\n            </h3>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n              Ready to deploy\n            </p>\n          </div>\n        </div>\n        <p className=\"text-slate-700 dark:text-slate-300 text-sm mb-4\">\n          Your application is ready for production deployment with all tests\n          passing.\n        </p>\n        <div className=\"flex gap-2\">\n          <button className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\">\n            Deploy Now\n          </button>\n          <button className=\"border border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 px-4 py-2 rounded-lg text-sm font-medium hover:bg-slate-50 dark:hover:bg-slate-800 transition-colors\">\n            View Details\n          </button>\n        </div>\n      </div>\n    </GlitchVault>\n  );\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "glitchvault.tsx",
      "content": "\"use client\";\nimport React, { useRef, useEffect, useCallback, useMemo } from \"react\";\n\n// Type declarations for OffscreenCanvas (may not be available in all environments)\ndeclare global {\n  interface Window {\n    OffscreenCanvas?: {\n      new (width: number, height: number): OffscreenCanvas;\n    };\n  }\n}\n\ninterface OffscreenCanvas {\n  width: number;\n  height: number;\n  getContext(\n    contextId: \"2d\",\n    options?: CanvasRenderingContext2DSettings\n  ): OffscreenCanvasRenderingContext2D | null;\n}\n\ninterface OffscreenCanvasRenderingContext2D {\n  canvas: OffscreenCanvas;\n  clearRect(x: number, y: number, w: number, h: number): void;\n  fillText(text: string, x: number, y: number): void;\n  createRadialGradient(\n    x0: number,\n    y0: number,\n    r0: number,\n    x1: number,\n    y1: number,\n    r1: number\n  ): CanvasGradient;\n  font: string;\n  textBaseline: CanvasTextBaseline;\n  fillStyle: string | CanvasGradient | CanvasPattern;\n  globalAlpha: number;\n}\n\ninterface HexColor {\n  r: number;\n  g: number;\n  b: number;\n}\n\ninterface MousePosition {\n  x: number;\n  y: number;\n}\n\ninterface GridDimensions {\n  cols: number;\n  rows: number;\n}\n\ninterface MatrixAnimationOptions {\n  glitchColor?: string;\n  glitchRadius?: number;\n  performanceMode?: \"high\" | \"balanced\" | \"low\";\n}\n\ninterface LetterGlitchProps {\n  glitchColor?: string;\n  glitchRadius?: number;\n  interactionRef: React.RefObject<HTMLDivElement | null>;\n  performanceMode?: \"high\" | \"balanced\" | \"low\";\n}\n\ninterface GlitchVaultProps {\n  children: React.ReactNode;\n  className?: string;\n  glitchColor?: string;\n  glitchRadius?: number;\n  performanceMode?: \"high\" | \"balanced\" | \"low\";\n  disabled?: boolean;\n  theme?: \"light\" | \"dark\" | \"auto\";\n}\n\nconst FONT_SIZE = 16;\nconst CHAR_WIDTH = 10;\nconst CHAR_HEIGHT = 20;\nconst CHARACTER_SET =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*()-_{}[]:;<>,.?/\";\nconst PARTICLE_POOL_SIZE = 5000; // Pre-allocate particles\nconst RENDER_THROTTLE = 16; // Throttle rendering to ~60fps\n\n// Theme-specific color\n\nfunction hexToRgb(hex: string): HexColor | null {\n  if (!hex) return null;\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(\n    shorthandRegex,\n    (_: string, r: string, g: string, b: string) => r + r + g + g + b + b\n  );\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null;\n}\n\nclass Particle {\n  x = 0;\n  y = 0;\n  char = \"\";\n  opacity = 0;\n  targetOpacity = 0;\n  opacityVelocity = 0;\n  lastUpdate = 0;\n  isActive = false;\n  isDirty = false;\n\n  reset(x: number, y: number, char: string): void {\n    this.x = x;\n    this.y = y;\n    this.char = char;\n    this.opacity = 0;\n    this.targetOpacity = 0;\n    this.opacityVelocity = 0;\n    this.lastUpdate = performance.now();\n    this.isActive = true;\n    this.isDirty = false;\n  }\n\n  update(deltaTime: number): boolean {\n    if (!this.isActive || Math.abs(this.opacity - this.targetOpacity) < 0.01) {\n      if (this.opacity !== this.targetOpacity) {\n        this.opacity = this.targetOpacity;\n      }\n      return false;\n    }\n\n    const diff = this.targetOpacity - this.opacity;\n    this.opacityVelocity = diff * 0.15; // Smooth easing\n    this.opacity += this.opacityVelocity * (deltaTime / 16);\n\n    if (Math.abs(this.opacity - this.targetOpacity) < 0.01) {\n      this.opacity = this.targetOpacity;\n    }\n\n    this.isDirty = true;\n    return true;\n  }\n\n  setTargetOpacity(target: number): void {\n    if (this.targetOpacity !== target) {\n      this.targetOpacity = target;\n      if (target > 0 && this.opacity === 0) {\n        this.randomizeCharacter();\n      }\n    }\n  }\n\n  randomizeCharacter(): void {\n    this.char = CHARACTER_SET[Math.floor(Math.random() * CHARACTER_SET.length)];\n    this.isDirty = true;\n  }\n}\n\nclass ParticlePool {\n  pool: Particle[] = [];\n  activeParticles = new Set<Particle>();\n\n  constructor(size: number) {\n    for (let i = 0; i < size; i++) {\n      this.pool.push(new Particle());\n    }\n  }\n\n  acquire(x: number, y: number, char: string): Particle | null {\n    const particle = this.pool.pop();\n    if (particle) {\n      particle.reset(x, y, char);\n      this.activeParticles.add(particle);\n      return particle;\n    }\n    // console.warn(\"Particle pool depleted.\");\n    return null;\n  }\n\n  release(particle: Particle): void {\n    particle.isActive = false;\n    this.activeParticles.delete(particle);\n    this.pool.push(particle);\n  }\n\n  getActiveParticles(): Particle[] {\n    return Array.from(this.activeParticles);\n  }\n\n  clear(): void {\n    this.activeParticles.forEach((p) => this.release(p));\n  }\n}\n\nclass RenderingEngine {\n  ctx: CanvasRenderingContext2D;\n  offscreenCanvas: OffscreenCanvas | null = null;\n  offscreenCtx: OffscreenCanvasRenderingContext2D | null = null;\n  lastRenderTime = 0;\n  renderThrottle: number;\n\n  constructor(ctx: CanvasRenderingContext2D, throttle = RENDER_THROTTLE) {\n    this.ctx = ctx;\n    this.renderThrottle = throttle;\n    this.setupOffscreenCanvas();\n  }\n\n  setupOffscreenCanvas(): void {\n    if (typeof window !== \"undefined\" && window.OffscreenCanvas) {\n      this.offscreenCanvas = new window.OffscreenCanvas(\n        this.ctx.canvas.width,\n        this.ctx.canvas.height\n      );\n      this.offscreenCtx = this.offscreenCanvas.getContext(\"2d\", {\n        alpha: true,\n        desynchronized: true,\n      });\n\n      if (this.offscreenCtx) {\n        this.offscreenCtx.font = `${FONT_SIZE}px monospace`;\n        this.offscreenCtx.textBaseline = \"top\";\n      }\n    }\n  }\n\n  render(\n    particles: Particle[],\n    glitchColor: string,\n    forceRender = false\n  ): void {\n    const now = performance.now();\n    if (!forceRender && now - this.lastRenderTime < this.renderThrottle) {\n      return;\n    }\n\n    this.lastRenderTime = now;\n    const renderCtx = this.offscreenCtx || this.ctx;\n    const baseColor = hexToRgb(glitchColor);\n    if (!baseColor) return; // Exit if the color is invalid\n\n    renderCtx.clearRect(0, 0, renderCtx.canvas.width, renderCtx.canvas.height);\n\n    const opacityBuckets = new Map<number, Particle[]>();\n\n    particles.forEach((particle) => {\n      if (particle.opacity > 0.01) {\n        const bucketKey = Math.round(particle.opacity * 20) / 20; // Group in 5% increments\n        if (!opacityBuckets.has(bucketKey)) {\n          opacityBuckets.set(bucketKey, []);\n        }\n        opacityBuckets.get(bucketKey)!.push(particle);\n      }\n    });\n\n    opacityBuckets.forEach((bucket, opacity) => {\n      renderCtx.globalAlpha = opacity;\n\n      bucket.forEach((particle) => {\n        const gradient = renderCtx.createRadialGradient(\n          particle.x + CHAR_WIDTH / 2,\n          particle.y + CHAR_HEIGHT / 2,\n          0,\n          particle.x + CHAR_WIDTH / 2,\n          particle.y + CHAR_HEIGHT / 2,\n          CHAR_WIDTH * 1.5\n        );\n\n        gradient.addColorStop(\n          0,\n          `rgba(${baseColor.r}, ${baseColor.g}, ${baseColor.b}, 1)`\n        );\n        gradient.addColorStop(\n          0.5,\n          `rgba(${baseColor.r}, ${baseColor.g}, ${baseColor.b}, 0.5)`\n        );\n        gradient.addColorStop(\n          1,\n          `rgba(${baseColor.r}, ${baseColor.g}, ${baseColor.b}, 0)`\n        );\n\n        renderCtx.fillStyle = gradient;\n        renderCtx.fillText(particle.char, particle.x, particle.y);\n      });\n    });\n\n    if (this.offscreenCanvas && this.offscreenCtx) {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n      this.ctx.drawImage(\n        this.offscreenCanvas as unknown as CanvasImageSource,\n        0,\n        0\n      );\n    }\n  }\n\n  resize(width: number, height: number): void {\n    if (this.offscreenCanvas) {\n      this.offscreenCanvas.width = width;\n      this.offscreenCanvas.height = height;\n      if (this.offscreenCtx) {\n        this.offscreenCtx.font = `${FONT_SIZE}px monospace`;\n        this.offscreenCtx.textBaseline = \"top\";\n      }\n    }\n  }\n}\n\nconst useMatrixAnimation = (\n  canvasRef: React.RefObject<HTMLCanvasElement | null>,\n  interactionRef: React.RefObject<HTMLDivElement | null>,\n  options: MatrixAnimationOptions\n) => {\n  const {\n    glitchColor = \"#00ffff\",\n    glitchRadius = 100,\n    performanceMode = \"balanced\",\n  } = options;\n\n  const particlePoolRef = useRef<ParticlePool | null>(null);\n  const renderingEngineRef = useRef<RenderingEngine | null>(null);\n  const animationFrameId = useRef<number | null>(null);\n  const mousePosRef = useRef<MousePosition | null>(null);\n  const lastFrameTime = useRef(0);\n  const gridRef = useRef<GridDimensions>({\n    cols: 0,\n    rows: 0,\n  });\n\n  const performanceSettings = useMemo(() => {\n    switch (performanceMode) {\n      case \"high\":\n        return {\n          updateInterval: 16,\n          renderThrottle: 16,\n          batchSize: 200,\n        };\n      case \"low\":\n        return {\n          updateInterval: 50,\n          renderThrottle: 33,\n          batchSize: 50,\n        };\n      default:\n        return {\n          updateInterval: 33,\n          renderThrottle: 16,\n          batchSize: 100,\n        };\n    }\n  }, [performanceMode]);\n\n  const handleMouseMove = useCallback(\n    (event: Event) => {\n      const mouseEvent = event as MouseEvent;\n      const interactionElement = interactionRef?.current;\n      if (!interactionElement) return;\n\n      const rect = interactionElement.getBoundingClientRect();\n      mousePosRef.current = {\n        x: mouseEvent.clientX - rect.left,\n        y: mouseEvent.clientY - rect.top,\n      };\n    },\n    [interactionRef]\n  );\n\n  const handleMouseLeave = useCallback(() => {\n    mousePosRef.current = null;\n  }, []);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const interactionElement = interactionRef?.current || canvas;\n    if (!canvas || !interactionElement) return;\n\n    const context = canvas.getContext(\"2d\", {\n      alpha: true,\n      desynchronized: true,\n      willReadFrequently: false,\n    });\n    if (!context) return;\n\n    particlePoolRef.current = new ParticlePool(PARTICLE_POOL_SIZE);\n    renderingEngineRef.current = new RenderingEngine(\n      context,\n      performanceSettings.renderThrottle\n    );\n\n    const setup = (width: number, height: number) => {\n      const dpr = window.devicePixelRatio || 1;\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n      context.setTransform(dpr, 0, 0, dpr, 0, 0);\n\n      context.font = `${FONT_SIZE}px monospace`;\n      context.textBaseline = \"top\";\n\n      gridRef.current.cols = Math.ceil(width / CHAR_WIDTH);\n      gridRef.current.rows = Math.ceil(height / CHAR_HEIGHT);\n\n      particlePoolRef.current?.clear();\n\n      for (let row = 0; row < gridRef.current.rows; row++) {\n        for (let col = 0; col < gridRef.current.cols; col++) {\n          const x = col * CHAR_WIDTH;\n          const y = row * CHAR_HEIGHT;\n          const char =\n            CHARACTER_SET[Math.floor(Math.random() * CHARACTER_SET.length)];\n          particlePoolRef.current?.acquire(x, y, char);\n        }\n      }\n\n      renderingEngineRef.current?.resize(canvas.width, canvas.height);\n    };\n\n    const animate = (currentTime: number) => {\n      const deltaTime = currentTime - lastFrameTime.current;\n\n      if (deltaTime >= performanceSettings.updateInterval) {\n        const particles = particlePoolRef.current?.getActiveParticles() || [];\n        const mousePos = mousePosRef.current;\n        let needsRender = false;\n\n        for (\n          let i = 0;\n          i < particles.length;\n          i += performanceSettings.batchSize\n        ) {\n          const batch = particles.slice(i, i + performanceSettings.batchSize);\n\n          batch.forEach((particle) => {\n            let targetOpacity = 0;\n\n            if (mousePos) {\n              const dx = particle.x - mousePos.x + CHAR_WIDTH / 2;\n              const dy = particle.y - mousePos.y + CHAR_HEIGHT / 2;\n              const distance = Math.sqrt(dx * dx + dy * dy);\n\n              if (distance < glitchRadius) {\n                targetOpacity = 1 - distance / glitchRadius;\n              }\n            }\n\n            particle.setTargetOpacity(targetOpacity);\n            if (particle.update(deltaTime)) {\n              needsRender = true;\n            }\n          });\n        }\n\n        if (needsRender && renderingEngineRef.current) {\n          renderingEngineRef.current.render(particles, glitchColor);\n        }\n\n        lastFrameTime.current = currentTime;\n      }\n\n      animationFrameId.current = requestAnimationFrame(animate);\n    };\n\n    interactionElement.addEventListener(\"mousemove\", handleMouseMove, {\n      passive: true,\n    });\n    interactionElement.addEventListener(\"mouseleave\", handleMouseLeave, {\n      passive: true,\n    });\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      if (!entries || entries.length === 0) return;\n      const { width, height } = entries[0].contentRect;\n      setup(width, height);\n    });\n\n    if (canvas.parentElement) {\n      resizeObserver.observe(canvas.parentElement);\n    }\n\n    lastFrameTime.current = performance.now();\n    animate(lastFrameTime.current);\n\n    return () => {\n      interactionElement.removeEventListener(\"mousemove\", handleMouseMove);\n      interactionElement.removeEventListener(\"mouseleave\", handleMouseLeave);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n      resizeObserver.disconnect();\n      particlePoolRef.current?.clear();\n    };\n  }, [\n    glitchColor,\n    glitchRadius,\n    handleMouseMove,\n    handleMouseLeave,\n    canvasRef,\n    interactionRef,\n    performanceSettings,\n  ]);\n};\n\nconst LetterGlitch = React.memo<LetterGlitchProps>(\n  ({\n    glitchColor,\n    glitchRadius,\n    interactionRef,\n    performanceMode = \"balanced\",\n  }) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useMatrixAnimation(canvasRef, interactionRef, {\n      glitchColor,\n      glitchRadius,\n      performanceMode,\n    });\n\n    return <canvas ref={canvasRef} className=\"block w-full h-full\" />;\n  }\n);\n\nLetterGlitch.displayName = \"LetterGlitch\";\n\nconst GlitchVault = React.memo<GlitchVaultProps>(\n  ({\n    children,\n    className,\n    glitchColor = \"#0AF0F0\",\n    glitchRadius = 120,\n    performanceMode = \"balanced\",\n    disabled = false,\n  }) => {\n    const interactionRef = useRef<HTMLDivElement>(null);\n\n    return (\n      <div\n        ref={interactionRef}\n        className={`relative rounded-2xl overflow-hidden ${className}`}\n      >\n        {!disabled && (\n          <div className=\"absolute inset-0 z-0\">\n            <LetterGlitch\n              interactionRef={interactionRef}\n              glitchColor={glitchColor}\n              glitchRadius={glitchRadius}\n              performanceMode={performanceMode}\n            />\n          </div>\n        )}\n        <div className=\"relative z-20\"> {children} </div>\n      </div>\n    );\n  }\n);\nGlitchVault.displayName = \"GlitchVault\";\nexport default GlitchVault;\n",
      "type": "registry:ui"
    }
  ]
}